
/*
 * AttackInjectorView.java
 */
package attackinjector;

import org.jdesktop.application.Action;
import org.jdesktop.application.ResourceMap;
import org.jdesktop.application.SingleFrameApplication;
import org.jdesktop.application.FrameView;
import org.jdesktop.application.TaskMonitor;
import org.jdesktop.application.Task;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.*;
import java.sql.*;
import java.util.Properties;
import java.net.*;
import java.io.*;
import java.util.ArrayList;
import javax.sql.rowset.serial.SerialBlob;
import javax.swing.event.HyperlinkEvent;
import javax.swing.text.Document;
import javax.swing.text.html.HTMLDocument;
import javax.swing.text.html.HTMLFrameHyperlinkEvent;
import javax.swing.event.HyperlinkListener;

/**
 * The application's main frame.
 */
public class AttackInjectorView extends FrameView implements HyperlinkListener {

    String[] FaultTypeOperators;
    private Properties DBprops = null;
    private DatabaseAccess JavaDBAccess = null;
    private PHPFileOperations PHPFile = new PHPFileOperations();
    private VulnerabilityInjector VulnInject = new VulnerabilityInjector();
    private SQLInjectionAttack Attack = new SQLInjectionAttack();
    private MySQLPacket MySQLPacket = new MySQLPacket();
    private ToolRegex Regex = null;
    private ToolHackersOrg HackersOrg = null;
    private java.util.Vector HTTPProxyResult = null;
    private boolean usingProxy = false;
// Browser's list of pages that have been visited.
    private ArrayList pageList = new ArrayList();
    private java.util.Vector MySQLListenerResult = null;
    private boolean usingMySQLListener = false;
    private boolean StartedInspection = false;    // Set to true to end the loop
    static boolean done = false;    // Create list of link diff files
    static private ArrayList ResultList = new ArrayList();
    public File selFile; //DBSniffer file
    private Process ExternalProcess;     // Process tracks one external native process
    static private ArrayList ExternalProcessResultList = new ArrayList();
    Thread processThread;
    Thread inReadThread;

    public AttackInjectorView(SingleFrameApplication app) {
        super(app);

        initComponents();

        this.DBprops = new Properties();
        this.DBprops.put("framework", "derbyclient");
        this.DBprops.put("driver", "org.apache.derby.jdbc.ClientDriver");
        this.DBprops.put("protocol", "jdbc:derby://localhost:1527/");
        this.DBprops.put("databaseName", "AttackDB");
        this.DBprops.put("user", "attackdb");
        this.DBprops.put("password", "attackdb");

        JavaDBAccess = new DatabaseAccess(DBprops);
        Regex = new ToolRegex(RegexResultTable);
        HackersOrg = new ToolHackersOrg(XSSAttackNames);

        try {
            TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));
        } catch (Throwable e) {
        }
        try {
            PayloadSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadAttackPayloadData()));
        } catch (Throwable e) {
        }
        try {
            SQLVariableSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileSQLVariablesData()));
        } catch (Throwable e) {
        }
        try {
            PayloadHTTPSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadPayloadHTTPData()));
        } catch (Throwable e) {
        }

        // Set up page display.
        displayEditorPane.setContentType("text/html");
        displayEditorPane.setEditable(false);
        displayEditorPane.addHyperlinkListener(this);

        // status bar initialization - message timeout, idle icon and busy animation, etc
        ResourceMap resourceMap = getResourceMap();
        int messageTimeout = resourceMap.getInteger("StatusBar.messageTimeout");
        messageTimer = new Timer(messageTimeout, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                statusMessageLabel.setText("");
            }
        });
        messageTimer.setRepeats(false);
        int busyAnimationRate = resourceMap.getInteger("StatusBar.busyAnimationRate");
        for (int i = 0; i < busyIcons.length; i++) {
            busyIcons[i] = resourceMap.getIcon("StatusBar.busyIcons[" + i + "]");
        }
        busyIconTimer = new Timer(busyAnimationRate, new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                busyIconIndex = (busyIconIndex + 1) % busyIcons.length;
                statusAnimationLabel.setIcon(busyIcons[busyIconIndex]);
            }
        });
        idleIcon = resourceMap.getIcon("StatusBar.idleIcon");
        statusAnimationLabel.setIcon(idleIcon);
        progressBar.setVisible(false);

        // connecting action tasks to status bar via TaskMonitor
        TaskMonitor taskMonitor = new TaskMonitor(getApplication().getContext());
        taskMonitor.addPropertyChangeListener(new java.beans.PropertyChangeListener() {

            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                String propertyName = evt.getPropertyName();
                if ("started".equals(propertyName)) {
                    if (!busyIconTimer.isRunning()) {
                        statusAnimationLabel.setIcon(busyIcons[0]);
                        busyIconIndex = 0;
                        busyIconTimer.start();
                    }
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(true);
                } else if ("done".equals(propertyName)) {
                    busyIconTimer.stop();
                    statusAnimationLabel.setIcon(idleIcon);
                    progressBar.setVisible(false);
                    progressBar.setValue(0);
                } else if ("message".equals(propertyName)) {
                    String text = (String) (evt.getNewValue());
                    statusMessageLabel.setText((text == null) ? "" : text);
                    messageTimer.restart();
                } else if ("progress".equals(propertyName)) {
                    int value = (Integer) (evt.getNewValue());
                    progressBar.setVisible(true);
                    progressBar.setIndeterminate(false);
                    progressBar.setValue(value);
                }
            }
        });
    }

    @Action
    public void showAboutBox() {
        if (aboutBox == null) {
            JFrame mainFrame = AttackInjectorApp.getApplication().getMainFrame();
            aboutBox = new AboutBox(mainFrame);
            aboutBox.setLocationRelativeTo(mainFrame);
        }
        AttackInjectorApp.getApplication().show(aboutBox);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        mainPanel = new javax.swing.JPanel();
        AttackInjectorTabbedPane = new javax.swing.JTabbedPane();
        DatabasePanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        StartEmbeddedDatabaseButton = new javax.swing.JButton();
        StopEmbeddedDatabaseButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        DatabaseStatusLabel = new javax.swing.JLabel();
        EmbeddedRadioButton = new javax.swing.JRadioButton();
        ClientServerRadioButton = new javax.swing.JRadioButton();
        jPanel3 = new javax.swing.JPanel();
        DeleteMySQLDataButton = new javax.swing.JButton();
        DeleteHTTPDataButton = new javax.swing.JButton();
        DeleteStaticDataButton = new javax.swing.JButton();
        DeleteAttackDataButton = new javax.swing.JButton();
        DeleteAllDBDataButton = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        CreateDatabaseButton = new javax.swing.JButton();
        jScrollPane26 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        Inspection = new javax.swing.JPanel();
        jLabel22 = new javax.swing.JLabel();
        HostPath = new javax.swing.JTextField();
        HostPathButton = new javax.swing.JButton();
        jScrollPane25 = new javax.swing.JScrollPane();
        InspectionTextArea = new javax.swing.JTextArea();
        StaticAnalysisButton = new javax.swing.JButton();
        AnalyzeMySQLPacketsButton = new javax.swing.JButton();
        ParsePHPFileButton = new javax.swing.JButton();
        StopInspectionButton = new javax.swing.JButton();
        StartInspectionButton = new javax.swing.JButton();
        InspectionLabel = new javax.swing.JLabel();
        jTextField4 = new javax.swing.JTextField();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        AffectSQLStaticCk = new javax.swing.JCheckBox();
        AffectSQLDynamicCk = new javax.swing.JCheckBox();
        AttackPanel = new javax.swing.JPanel();
        GenerateAttackPayloadsButton = new javax.swing.JButton();
        StartAttackButton = new javax.swing.JButton();
        jScrollPane27 = new javax.swing.JScrollPane();
        AttackTextArea = new javax.swing.JTextArea();
        WebApplicationDatabaseRestoreCommand = new javax.swing.JTextField();
        jLabel23 = new javax.swing.JLabel();
        RestoreMySQLDBButton = new javax.swing.JButton();
        jLabel24 = new javax.swing.JLabel();
        WebApplicationPHPFilesRestoreCommand = new javax.swing.JTextField();
        RestorePHPFilesButton = new javax.swing.JButton();
        CalculateAttackSuccessButton = new javax.swing.JButton();
        ShowAttackResultsButton = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        UseIDSRadioButton = new javax.swing.JRadioButton();
        DoNotUseIDSRadioButton = new javax.swing.JRadioButton();
        TargetPanel = new javax.swing.JPanel();
        WebApplicationHOST = new javax.swing.JTextField();
        WebApplicationURL = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        AddPHPFileButton = new javax.swing.JButton();
        DeletePHPFileButton = new javax.swing.JButton();
        ViewPHPFileButton = new javax.swing.JButton();
        AnalyzePHPFileButton = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        TargetPHPFileSelectedComboBox = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        PHPFileTextArea = new javax.swing.JTextArea();
        jLabel5 = new javax.swing.JLabel();
        WebApplicationPORT = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        WebApplicationFileURL = new javax.swing.JTextField();
        InjectionPanel = new javax.swing.JPanel();
        jPanel8 = new javax.swing.JPanel();
        VulnerabilityInjectionButton = new javax.swing.JButton();
        ViewResultsButton = new javax.swing.JButton();
        DeleteResultsButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        CreateDiffFilesButton = new javax.swing.JButton();
        DeleteDiffButton = new javax.swing.JButton();
        jPanel10 = new javax.swing.JPanel();
        CreateVulnerabilityFilesButton = new javax.swing.JButton();
        DeleteVulnerabilityFilesButton = new javax.swing.JButton();
        jLabel25 = new javax.swing.JLabel();
        VulnerabilitySelectedComboBox = new javax.swing.JComboBox();
        RefreshVulnerabilitiesButton = new javax.swing.JButton();
        ApplySingleVulnerabilityButton = new javax.swing.JButton();
        jScrollPane10 = new javax.swing.JScrollPane();
        VulnerabilityInjectionTextArea = new javax.swing.JTextArea();
        jLabel26 = new javax.swing.JLabel();
        SuccessPayloadSelectedComboBox = new javax.swing.JComboBox();
        ApplySinglePayloadButton = new javax.swing.JButton();
        WebApplicationIPAddress = new javax.swing.JTextField();
        jLabel27 = new javax.swing.JLabel();
        WebApplicationPort = new javax.swing.JTextField();
        jLabel30 = new javax.swing.JLabel();
        jLabel34 = new javax.swing.JLabel();
        MySQLListenerPanel = new javax.swing.JPanel();
        jLabel21 = new javax.swing.JLabel();
        MySQLListenerProxyPort = new javax.swing.JTextField();
        DeleteMySQLListenerDBDataButton = new javax.swing.JButton();
        StartMySQLListenerButton = new javax.swing.JButton();
        StopMySQLListenerButton = new javax.swing.JButton();
        jScrollPane23 = new javax.swing.JScrollPane();
        MySQLListenerTextArea = new javax.swing.JTextArea();
        ViewMySQLPacketsButton = new javax.swing.JButton();
        ModeComboBox = new javax.swing.JComboBox();
        HTTPProxyPanel = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        HTTPProxySourcePort = new javax.swing.JTextField();
        StartHTTPProxyButton = new javax.swing.JButton();
        StopHTTPProxyButton = new javax.swing.JButton();
        jScrollPane12 = new javax.swing.JScrollPane();
        HTTPProxyTextArea = new javax.swing.JTextArea();
        DeleteHTTPProxyDBDataButton = new javax.swing.JButton();
        MySQL2HTTPButton = new javax.swing.JButton();
        PayloadPanel = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        PayloadSelectedComboBox = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        SQLVariableSelectedComboBox = new javax.swing.JComboBox();
        jLabel11 = new javax.swing.JLabel();
        PayloadHTTPSelectedComboBox = new javax.swing.JComboBox();
        jScrollPane21 = new javax.swing.JScrollPane();
        HTTPRequestTextArea = new javax.swing.JTextArea();
        jScrollPane22 = new javax.swing.JScrollPane();
        HTTPResponseTextArea = new javax.swing.JTextArea();
        jLabel19 = new javax.swing.JLabel();
        jLabel20 = new javax.swing.JLabel();
        ApplyPayloadButton = new javax.swing.JButton();
        ManualAttackPanel = new javax.swing.JPanel();
        MaxIDButton = new javax.swing.JButton();
        jScrollPane11 = new javax.swing.JScrollPane();
        SQLInjectionAttackTextArea = new javax.swing.JTextArea();
        jScrollPane13 = new javax.swing.JScrollPane();
        SQLInjectionAttackTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        ReadRequestButton = new javax.swing.JButton();
        jTextField2 = new javax.swing.JTextField();
        jScrollPane14 = new javax.swing.JScrollPane();
        displayPreviewPane = new javax.swing.JEditorPane();
        RefreshPreviewButton = new javax.swing.JButton();
        jScrollPane15 = new javax.swing.JScrollPane();
        SQLInjectionAttackTextArea2 = new javax.swing.JTextArea();
        jTextField3 = new javax.swing.JTextField();
        SendHTTPButton = new javax.swing.JButton();
        MiniBrowserPanel = new javax.swing.JPanel();
        backButton = new javax.swing.JButton();
        forwardButton = new javax.swing.JButton();
        locationTextField = new javax.swing.JTextField();
        jScrollPane24 = new javax.swing.JScrollPane();
        displayEditorPane = new javax.swing.JEditorPane();
        goButton = new javax.swing.JButton();
        IDSPanel = new javax.swing.JPanel();
        jScrollPane28 = new javax.swing.JScrollPane();
        jTPFile = new javax.swing.JTextPane();
        jPanel11 = new javax.swing.JPanel();
        jLDBSniffer = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel36 = new javax.swing.JLabel();
        jPath = new javax.swing.JTextField();
        IDSResultsButton = new javax.swing.JButton();
        jPanel12 = new javax.swing.JPanel();
        StartIDSButton = new javax.swing.JButton();
        StopIDSButton = new javax.swing.JButton();
        menuBar = new javax.swing.JMenuBar();
        javax.swing.JMenu fileMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem exitMenuItem = new javax.swing.JMenuItem();
        utilMenu = new javax.swing.JMenu();
        Encode_DecodeMenuItem = new javax.swing.JMenuItem();
        RegexMenuItem = new javax.swing.JMenuItem();
        hackersMenuItem = new javax.swing.JMenuItem();
        SQLMenuItem = new javax.swing.JMenuItem();
        NotesMenuItem = new javax.swing.JMenuItem();
        javax.swing.JMenu helpMenu = new javax.swing.JMenu();
        javax.swing.JMenuItem aboutMenuItem = new javax.swing.JMenuItem();
        statusPanel = new javax.swing.JPanel();
        javax.swing.JSeparator statusPanelSeparator = new javax.swing.JSeparator();
        statusMessageLabel = new javax.swing.JLabel();
        statusAnimationLabel = new javax.swing.JLabel();
        progressBar = new javax.swing.JProgressBar();
        ServerTypebuttonGroup = new javax.swing.ButtonGroup();
        NotesBox = new javax.swing.JDialog();
        closeNotesBoxButton = new javax.swing.JButton();
        jScrollPane17 = new javax.swing.JScrollPane();
        jTextArea2 = new javax.swing.JTextArea();
        jLabel32 = new javax.swing.JLabel();
        jScrollPane20 = new javax.swing.JScrollPane();
        jTextArea3 = new javax.swing.JTextArea();
        jLabel33 = new javax.swing.JLabel();
        ha_ckers_orgBox = new javax.swing.JDialog();
        OpenVulnerabilityXMLButton = new javax.swing.JButton();
        XMLFileName = new javax.swing.JTextField();
        ProcessVulnerabilityXMLButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        XSSAttackName = new javax.swing.JTextField();
        XSSAttackLabel = new javax.swing.JTextField();
        jLabel16 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        XSSAttackBrowser = new javax.swing.JTextArea();
        jScrollPane9 = new javax.swing.JScrollPane();
        XSSAttackCode = new javax.swing.JTextArea();
        jScrollPane8 = new javax.swing.JScrollPane();
        XSSAttackNames = new javax.swing.JList();
        jScrollPane7 = new javax.swing.JScrollPane();
        XSSAttackDesc = new javax.swing.JTextArea();
        closeHa_ckers_orgBoxButton = new javax.swing.JButton();
        RegexBox = new javax.swing.JDialog();
        jLabel31 = new javax.swing.JLabel();
        RegularExpression = new javax.swing.JTextField();
        jScrollPane16 = new javax.swing.JScrollPane();
        RegexSubjectString = new javax.swing.JTextArea();
        TestRegexMatchButton = new javax.swing.JButton();
        jLabel35 = new javax.swing.JLabel();
        RegexMatchTrueFalse = new javax.swing.JTextField();
        CaseSensitiveCB = new javax.swing.JCheckBox();
        ReadFileRegexButton = new javax.swing.JButton();
        RegexFilePath = new javax.swing.JTextField();
        RegexFileName = new javax.swing.JTextField();
        jScrollPane18 = new javax.swing.JScrollPane();
        RegexResultTable = new javax.swing.JTable();
        closeRegexBoxButton = new javax.swing.JButton();
        Encode_DecodeBox = new javax.swing.JDialog();
        jLabel12 = new javax.swing.JLabel();
        jLabel29 = new javax.swing.JLabel();
        jLabel28 = new javax.swing.JLabel();
        Delimiter = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        EncodeButton = new javax.swing.JButton();
        DecodeButton = new javax.swing.JButton();
        RadioButtonText = new javax.swing.JRadioButton();
        jRadioButtonHex = new javax.swing.JRadioButton();
        MessageText = new javax.swing.JTextField();
        jScrollPane4 = new javax.swing.JScrollPane();
        PlainText = new javax.swing.JTextArea();
        jScrollPane5 = new javax.swing.JScrollPane();
        EncodedText = new javax.swing.JTextArea();
        jScrollPane6 = new javax.swing.JScrollPane();
        EncodeMethod = new javax.swing.JList();
        closeEncode_DecodeBoxButton = new javax.swing.JButton();
        JavaDBSQLBox = new javax.swing.JDialog();
        closeJavaDBSQLBoxButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        JavaDBSQLResult = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane19 = new javax.swing.JScrollPane();
        JavaDBSQLCommand = new javax.swing.JTextArea();
        ExecuteJavaDBSQLCommandButton = new javax.swing.JButton();
        UseIDSbuttonGroup = new javax.swing.ButtonGroup();

        mainPanel.setName("mainPanel"); // NOI18N

        AttackInjectorTabbedPane.setName("AttackInjectorTabbedPane"); // NOI18N

        DatabasePanel.setName("DatabasePanel"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(attackinjector.AttackInjectorApp.class).getContext().getResourceMap(AttackInjectorView.class);
        jPanel7.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel7.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel7.border.titleFont"))); // NOI18N
        jPanel7.setName("jPanel7"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(attackinjector.AttackInjectorApp.class).getContext().getActionMap(AttackInjectorView.class, this);
        StartEmbeddedDatabaseButton.setAction(actionMap.get("StartDatabase")); // NOI18N
        StartEmbeddedDatabaseButton.setText(resourceMap.getString("StartEmbeddedDatabaseButton.text")); // NOI18N
        StartEmbeddedDatabaseButton.setName("StartEmbeddedDatabaseButton"); // NOI18N

        StopEmbeddedDatabaseButton.setAction(actionMap.get("StopDatabase")); // NOI18N
        StopEmbeddedDatabaseButton.setText(resourceMap.getString("StopEmbeddedDatabaseButton.text")); // NOI18N
        StopEmbeddedDatabaseButton.setName("StopEmbeddedDatabaseButton"); // NOI18N

        jLabel1.setFont(resourceMap.getFont("jLabel1.font")); // NOI18N
        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        DatabaseStatusLabel.setText(resourceMap.getString("DatabaseStatusLabel.text")); // NOI18N
        DatabaseStatusLabel.setName("DatabaseStatusLabel"); // NOI18N

        ServerTypebuttonGroup.add(EmbeddedRadioButton);
        EmbeddedRadioButton.setText(resourceMap.getString("EmbeddedRadioButton.text")); // NOI18N
        EmbeddedRadioButton.setName("EmbeddedRadioButton"); // NOI18N

        ServerTypebuttonGroup.add(ClientServerRadioButton);
        ClientServerRadioButton.setSelected(true);
        ClientServerRadioButton.setText(resourceMap.getString("ClientServerRadioButton.text")); // NOI18N
        ClientServerRadioButton.setName("ClientServerRadioButton"); // NOI18N

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(StartEmbeddedDatabaseButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StopEmbeddedDatabaseButton))
                    .addGroup(jPanel7Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(DatabaseStatusLabel)
                        .addGap(26, 26, 26)
                        .addComponent(EmbeddedRadioButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ClientServerRadioButton)))
                .addContainerGap(626, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartEmbeddedDatabaseButton)
                    .addComponent(StopEmbeddedDatabaseButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(DatabaseStatusLabel)
                    .addComponent(EmbeddedRadioButton)
                    .addComponent(ClientServerRadioButton)))
        );

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel3.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel3.border.titleFont"))); // NOI18N
        jPanel3.setName("jPanel3"); // NOI18N

        DeleteMySQLDataButton.setText(resourceMap.getString("DeleteMySQLDataButton.text")); // NOI18N
        DeleteMySQLDataButton.setName("DeleteMySQLDataButton"); // NOI18N
        DeleteMySQLDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMySQLDataButtonActionPerformed(evt);
            }
        });

        DeleteHTTPDataButton.setText(resourceMap.getString("DeleteHTTPDataButton.text")); // NOI18N
        DeleteHTTPDataButton.setName("DeleteHTTPDataButton"); // NOI18N
        DeleteHTTPDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteHTTPDataButtonActionPerformed(evt);
            }
        });

        DeleteStaticDataButton.setText(resourceMap.getString("DeleteStaticDataButton.text")); // NOI18N
        DeleteStaticDataButton.setName("DeleteStaticDataButton"); // NOI18N
        DeleteStaticDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteStaticDataButtonActionPerformed(evt);
            }
        });

        DeleteAttackDataButton.setText(resourceMap.getString("DeleteAttackDataButton.text")); // NOI18N
        DeleteAttackDataButton.setName("DeleteAttackDataButton"); // NOI18N
        DeleteAttackDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAttackDataButtonActionPerformed(evt);
            }
        });

        DeleteAllDBDataButton.setText(resourceMap.getString("DeleteAllDBDataButton.text")); // NOI18N
        DeleteAllDBDataButton.setName("DeleteAllDBDataButton"); // NOI18N
        DeleteAllDBDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteAllDBDataButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(DeleteMySQLDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteHTTPDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteStaticDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteAttackDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteAllDBDataButton)
                .addContainerGap(383, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(DeleteAllDBDataButton)
                    .addComponent(DeleteMySQLDataButton)
                    .addComponent(DeleteHTTPDataButton)
                    .addComponent(DeleteStaticDataButton)
                    .addComponent(DeleteAttackDataButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel4.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel4.border.titleFont"))); // NOI18N
        jPanel4.setName("jPanel4"); // NOI18N

        CreateDatabaseButton.setText(resourceMap.getString("CreateDatabaseButton.text")); // NOI18N
        CreateDatabaseButton.setName("CreateDatabaseButton"); // NOI18N
        CreateDatabaseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDatabaseButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CreateDatabaseButton)
                .addContainerGap(933, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(CreateDatabaseButton)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jScrollPane26.setName("jScrollPane26"); // NOI18N

        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jTextArea1.setName("jTextArea1"); // NOI18N
        jScrollPane26.setViewportView(jTextArea1);

        javax.swing.GroupLayout DatabasePanelLayout = new javax.swing.GroupLayout(DatabasePanel);
        DatabasePanel.setLayout(DatabasePanelLayout);
        DatabasePanelLayout.setHorizontalGroup(
            DatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, DatabasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(DatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane26, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        DatabasePanelLayout.setVerticalGroup(
            DatabasePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(DatabasePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane26, javax.swing.GroupLayout.DEFAULT_SIZE, 301, Short.MAX_VALUE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("DatabasePanel.TabConstraints.tabTitle"), DatabasePanel); // NOI18N

        Inspection.setName("Inspection"); // NOI18N

        jLabel22.setText(resourceMap.getString("jLabel22.text")); // NOI18N
        jLabel22.setName("jLabel22"); // NOI18N

        HostPath.setText(resourceMap.getString("HostPath.text")); // NOI18N
        HostPath.setName("HostPath"); // NOI18N

        HostPathButton.setText(resourceMap.getString("HostPathButton.text")); // NOI18N
        HostPathButton.setName("HostPathButton"); // NOI18N
        HostPathButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HostPathButtonActionPerformed(evt);
            }
        });

        jScrollPane25.setName("jScrollPane25"); // NOI18N

        InspectionTextArea.setColumns(20);
        InspectionTextArea.setRows(5);
        InspectionTextArea.setName("InspectionTextArea"); // NOI18N
        jScrollPane25.setViewportView(InspectionTextArea);

        StaticAnalysisButton.setText(resourceMap.getString("StaticAnalysisButton.text")); // NOI18N
        StaticAnalysisButton.setName("StaticAnalysisButton"); // NOI18N
        StaticAnalysisButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StaticAnalysisButtonActionPerformed(evt);
            }
        });

        AnalyzeMySQLPacketsButton.setText(resourceMap.getString("AnalyzeMySQLPacketsButton.text")); // NOI18N
        AnalyzeMySQLPacketsButton.setName("AnalyzeMySQLPacketsButton"); // NOI18N
        AnalyzeMySQLPacketsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzeMySQLPacketsButtonActionPerformed(evt);
            }
        });

        ParsePHPFileButton.setText(resourceMap.getString("ParsePHPFileButton.text")); // NOI18N
        ParsePHPFileButton.setName("ParsePHPFileButton"); // NOI18N
        ParsePHPFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ParsePHPFileButtonActionPerformed(evt);
            }
        });

        StopInspectionButton.setText(resourceMap.getString("StopInspectionButton.text")); // NOI18N
        StopInspectionButton.setName("StopInspectionButton"); // NOI18N
        StopInspectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopInspectionButtonActionPerformed(evt);
            }
        });

        StartInspectionButton.setText(resourceMap.getString("StartInspectionButton.text")); // NOI18N
        StartInspectionButton.setName("StartInspectionButton"); // NOI18N
        StartInspectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartInspectionButtonActionPerformed(evt);
            }
        });

        InspectionLabel.setFont(resourceMap.getFont("InspectionLabel.font")); // NOI18N
        InspectionLabel.setForeground(resourceMap.getColor("InspectionLabel.foreground")); // NOI18N
        InspectionLabel.setText(resourceMap.getString("InspectionLabel.text")); // NOI18N
        InspectionLabel.setName("InspectionLabel"); // NOI18N

        jTextField4.setText(resourceMap.getString("jTextField4.text")); // NOI18N
        jTextField4.setName("jTextField4"); // NOI18N

        jButton2.setText(resourceMap.getString("jButton2.text")); // NOI18N
        jButton2.setName("jButton2"); // NOI18N
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText(resourceMap.getString("jButton3.text")); // NOI18N
        jButton3.setName("jButton3"); // NOI18N
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText(resourceMap.getString("jButton4.text")); // NOI18N
        jButton4.setName("jButton4"); // NOI18N
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jTextField5.setText(resourceMap.getString("jTextField5.text")); // NOI18N
        jTextField5.setName("jTextField5"); // NOI18N

        jTextField6.setText(resourceMap.getString("jTextField6.text")); // NOI18N
        jTextField6.setName("jTextField6"); // NOI18N

        AffectSQLStaticCk.setSelected(true);
        AffectSQLStaticCk.setText(resourceMap.getString("AffectSQLStaticCk.text")); // NOI18N
        AffectSQLStaticCk.setName("AffectSQLStaticCk"); // NOI18N

        AffectSQLDynamicCk.setSelected(true);
        AffectSQLDynamicCk.setText(resourceMap.getString("AffectSQLDynamicCk.text")); // NOI18N
        AffectSQLDynamicCk.setName("AffectSQLDynamicCk"); // NOI18N

        javax.swing.GroupLayout InspectionLayout = new javax.swing.GroupLayout(Inspection);
        Inspection.setLayout(InspectionLayout);
        InspectionLayout.setHorizontalGroup(
            InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InspectionLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InspectionLayout.createSequentialGroup()
                        .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane25, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                            .addComponent(InspectionLabel, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(InspectionLayout.createSequentialGroup()
                                .addComponent(jLabel22)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HostPath, javax.swing.GroupLayout.PREFERRED_SIZE, 269, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(HostPathButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AffectSQLStaticCk)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(AffectSQLDynamicCk)
                                .addGap(161, 161, 161)
                                .addComponent(StartInspectionButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StopInspectionButton)))
                        .addContainerGap())
                    .addGroup(InspectionLayout.createSequentialGroup()
                        .addComponent(ParsePHPFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnalyzeMySQLPacketsButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jTextField5)
                            .addComponent(StaticAnalysisButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, 366, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(InspectionLayout.createSequentialGroup()
                                .addComponent(jButton4)
                                .addGap(17, 17, 17)
                                .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton3)
                            .addComponent(jButton2))
                        .addGap(83, 83, 83))))
        );
        InspectionLayout.setVerticalGroup(
            InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InspectionLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(InspectionLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel22)
                    .addComponent(HostPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(HostPathButton)
                    .addComponent(StopInspectionButton)
                    .addComponent(StartInspectionButton)
                    .addComponent(AffectSQLStaticCk)
                    .addComponent(AffectSQLDynamicCk))
                .addGap(41, 41, 41)
                .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ParsePHPFileButton)
                    .addComponent(AnalyzeMySQLPacketsButton)
                    .addComponent(StaticAnalysisButton)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InspectionLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3)
                    .addComponent(jButton4)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane25, javax.swing.GroupLayout.PREFERRED_SIZE, 382, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("Inspection.TabConstraints.tabTitle"), Inspection); // NOI18N

        AttackPanel.setName("AttackPanel"); // NOI18N

        GenerateAttackPayloadsButton.setText(resourceMap.getString("GenerateAttackPayloadsButton.text")); // NOI18N
        GenerateAttackPayloadsButton.setName("GenerateAttackPayloadsButton"); // NOI18N
        GenerateAttackPayloadsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                GenerateAttackPayloadsButtonActionPerformed(evt);
            }
        });

        StartAttackButton.setText(resourceMap.getString("StartAttackButton.text")); // NOI18N
        StartAttackButton.setName("StartAttackButton"); // NOI18N
        StartAttackButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartAttackButtonActionPerformed(evt);
            }
        });

        jScrollPane27.setName("jScrollPane27"); // NOI18N

        AttackTextArea.setColumns(20);
        AttackTextArea.setRows(5);
        AttackTextArea.setName("AttackTextArea"); // NOI18N
        jScrollPane27.setViewportView(AttackTextArea);

        WebApplicationDatabaseRestoreCommand.setText(resourceMap.getString("WebApplicationDatabaseRestoreCommand.text")); // NOI18N
        WebApplicationDatabaseRestoreCommand.setName("WebApplicationDatabaseRestoreCommand"); // NOI18N

        jLabel23.setText(resourceMap.getString("jLabel23.text")); // NOI18N
        jLabel23.setName("jLabel23"); // NOI18N

        RestoreMySQLDBButton.setText(resourceMap.getString("RestoreMySQLDBButton.text")); // NOI18N
        RestoreMySQLDBButton.setName("RestoreMySQLDBButton"); // NOI18N
        RestoreMySQLDBButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestoreMySQLDBButtonActionPerformed(evt);
            }
        });

        jLabel24.setText(resourceMap.getString("jLabel24.text")); // NOI18N
        jLabel24.setName("jLabel24"); // NOI18N

        WebApplicationPHPFilesRestoreCommand.setText(resourceMap.getString("WebApplicationPHPFilesRestoreCommand.text")); // NOI18N
        WebApplicationPHPFilesRestoreCommand.setName("WebApplicationPHPFilesRestoreCommand"); // NOI18N

        RestorePHPFilesButton.setText(resourceMap.getString("RestorePHPFilesButton.text")); // NOI18N
        RestorePHPFilesButton.setName("RestorePHPFilesButton"); // NOI18N
        RestorePHPFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RestorePHPFilesButtonActionPerformed(evt);
            }
        });

        CalculateAttackSuccessButton.setText(resourceMap.getString("CalculateAttackSuccessButton.text")); // NOI18N
        CalculateAttackSuccessButton.setName("CalculateAttackSuccessButton"); // NOI18N
        CalculateAttackSuccessButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculateAttackSuccessButtonActionPerformed(evt);
            }
        });

        ShowAttackResultsButton.setText(resourceMap.getString("ShowAttackResultsButton.text")); // NOI18N
        ShowAttackResultsButton.setName("ShowAttackResultsButton"); // NOI18N
        ShowAttackResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ShowAttackResultsButtonActionPerformed(evt);
            }
        });

        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(resourceMap.getString("jPanel6.border.title"))); // NOI18N
        jPanel6.setName("jPanel6"); // NOI18N

        UseIDSbuttonGroup.add(UseIDSRadioButton);
        UseIDSRadioButton.setText(resourceMap.getString("UseIDSRadioButton.text")); // NOI18N
        UseIDSRadioButton.setName("UseIDSRadioButton"); // NOI18N

        UseIDSbuttonGroup.add(DoNotUseIDSRadioButton);
        DoNotUseIDSRadioButton.setSelected(true);
        DoNotUseIDSRadioButton.setText(resourceMap.getString("DoNotUseIDSRadioButton.text")); // NOI18N
        DoNotUseIDSRadioButton.setName("DoNotUseIDSRadioButton"); // NOI18N

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(UseIDSRadioButton)
                    .addComponent(DoNotUseIDSRadioButton))
                .addContainerGap(103, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(UseIDSRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DoNotUseIDSRadioButton)
                .addContainerGap(36, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout AttackPanelLayout = new javax.swing.GroupLayout(AttackPanel);
        AttackPanel.setLayout(AttackPanelLayout);
        AttackPanelLayout.setHorizontalGroup(
            AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttackPanelLayout.createSequentialGroup()
                .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AttackPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane27, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, AttackPanelLayout.createSequentialGroup()
                        .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AttackPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel23)
                                    .addComponent(jLabel24)))
                            .addGroup(AttackPanelLayout.createSequentialGroup()
                                .addGap(12, 12, 12)
                                .addComponent(GenerateAttackPayloadsButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(StartAttackButton)))
                        .addGap(5, 5, 5)
                        .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(AttackPanelLayout.createSequentialGroup()
                                .addComponent(CalculateAttackSuccessButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ShowAttackResultsButton))
                            .addGroup(AttackPanelLayout.createSequentialGroup()
                                .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(WebApplicationDatabaseRestoreCommand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(WebApplicationPHPFilesRestoreCommand, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 383, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(RestorePHPFilesButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(RestoreMySQLDBButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        AttackPanelLayout.setVerticalGroup(
            AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(AttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(AttackPanelLayout.createSequentialGroup()
                        .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel23)
                            .addComponent(WebApplicationDatabaseRestoreCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RestoreMySQLDBButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(WebApplicationPHPFilesRestoreCommand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(RestorePHPFilesButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(AttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(GenerateAttackPayloadsButton)
                            .addComponent(StartAttackButton)
                            .addComponent(CalculateAttackSuccessButton)
                            .addComponent(ShowAttackResultsButton)))
                    .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane27, javax.swing.GroupLayout.DEFAULT_SIZE, 436, Short.MAX_VALUE))
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("AttackPanel.TabConstraints.tabTitle"), AttackPanel); // NOI18N

        TargetPanel.setName("TargetPanel"); // NOI18N

        WebApplicationHOST.setText(resourceMap.getString("WebApplicationHOST.text")); // NOI18N
        WebApplicationHOST.setName("WebApplicationHOST"); // NOI18N

        WebApplicationURL.setText(resourceMap.getString("WebApplicationURL.text")); // NOI18N
        WebApplicationURL.setName("WebApplicationURL"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        AddPHPFileButton.setText(resourceMap.getString("AddPHPFileButton.text")); // NOI18N
        AddPHPFileButton.setName("AddPHPFileButton"); // NOI18N
        AddPHPFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddPHPFileButtonActionPerformed(evt);
            }
        });

        DeletePHPFileButton.setText(resourceMap.getString("DeletePHPFileButton.text")); // NOI18N
        DeletePHPFileButton.setName("DeletePHPFileButton"); // NOI18N
        DeletePHPFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletePHPFileButtonActionPerformed(evt);
            }
        });

        ViewPHPFileButton.setText(resourceMap.getString("ViewPHPFileButton.text")); // NOI18N
        ViewPHPFileButton.setName("ViewPHPFileButton"); // NOI18N
        ViewPHPFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewPHPFileButtonActionPerformed(evt);
            }
        });

        AnalyzePHPFileButton.setText(resourceMap.getString("AnalyzePHPFileButton.text")); // NOI18N
        AnalyzePHPFileButton.setName("AnalyzePHPFileButton"); // NOI18N
        AnalyzePHPFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AnalyzePHPFileButtonActionPerformed(evt);
            }
        });

        jLabel2.setFont(resourceMap.getFont("jLabel2.font")); // NOI18N
        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        TargetPHPFileSelectedComboBox.setName("TargetPHPFileSelectedComboBox"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        PHPFileTextArea.setColumns(20);
        PHPFileTextArea.setRows(5);
        PHPFileTextArea.setName("PHPFileTextArea"); // NOI18N
        jScrollPane1.setViewportView(PHPFileTextArea);

        jLabel5.setText(resourceMap.getString("jLabel5.text")); // NOI18N
        jLabel5.setName("jLabel5"); // NOI18N

        WebApplicationPORT.setText(resourceMap.getString("WebApplicationPORT.text")); // NOI18N
        WebApplicationPORT.setName("WebApplicationPORT"); // NOI18N

        jLabel6.setText(resourceMap.getString("jLabel6.text")); // NOI18N
        jLabel6.setName("jLabel6"); // NOI18N

        WebApplicationFileURL.setText(resourceMap.getString("WebApplicationFileURL.text")); // NOI18N
        WebApplicationFileURL.setName("WebApplicationFileURL"); // NOI18N

        javax.swing.GroupLayout TargetPanelLayout = new javax.swing.GroupLayout(TargetPanel);
        TargetPanel.setLayout(TargetPanelLayout);
        TargetPanelLayout.setHorizontalGroup(
            TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TargetPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(TargetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WebApplicationURL, javax.swing.GroupLayout.DEFAULT_SIZE, 998, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(TargetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WebApplicationHOST, javax.swing.GroupLayout.DEFAULT_SIZE, 1026, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(TargetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TargetPHPFileSelectedComboBox, 0, 902, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(TargetPanelLayout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(18, 18, 18)
                        .addComponent(WebApplicationPORT, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel6)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WebApplicationFileURL, javax.swing.GroupLayout.DEFAULT_SIZE, 881, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(TargetPanelLayout.createSequentialGroup()
                        .addComponent(AddPHPFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ViewPHPFileButton)
                        .addGap(44, 44, 44)
                        .addComponent(DeletePHPFileButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(AnalyzePHPFileButton, javax.swing.GroupLayout.DEFAULT_SIZE, 439, Short.MAX_VALUE)
                        .addGap(15, 15, 15))))
            .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(TargetPanelLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        TargetPanelLayout.setVerticalGroup(
            TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(TargetPanelLayout.createSequentialGroup()
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(WebApplicationHOST, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(WebApplicationURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(WebApplicationPORT, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(WebApplicationFileURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddPHPFileButton)
                    .addComponent(ViewPHPFileButton)
                    .addComponent(DeletePHPFileButton)
                    .addComponent(AnalyzePHPFileButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(TargetPHPFileSelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(408, Short.MAX_VALUE))
            .addGroup(TargetPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, TargetPanelLayout.createSequentialGroup()
                    .addContainerGap(329, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 228, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addContainerGap()))
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("TargetPanel.TabConstraints.tabTitle"), TargetPanel); // NOI18N

        InjectionPanel.setName("InjectionPanel"); // NOI18N

        jPanel8.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel8.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel8.border.titleFont"))); // NOI18N
        jPanel8.setName("jPanel8"); // NOI18N

        VulnerabilityInjectionButton.setText(resourceMap.getString("VulnerabilityInjectionButton.text")); // NOI18N
        VulnerabilityInjectionButton.setName("VulnerabilityInjectionButton"); // NOI18N
        VulnerabilityInjectionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                VulnerabilityInjectionButtonActionPerformed(evt);
            }
        });

        ViewResultsButton.setText(resourceMap.getString("ViewResultsButton.text")); // NOI18N
        ViewResultsButton.setName("ViewResultsButton"); // NOI18N
        ViewResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewResultsButtonActionPerformed(evt);
            }
        });

        DeleteResultsButton.setText(resourceMap.getString("DeleteResultsButton.text")); // NOI18N
        DeleteResultsButton.setName("DeleteResultsButton"); // NOI18N
        DeleteResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteResultsButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(VulnerabilityInjectionButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ViewResultsButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteResultsButton)
                .addContainerGap(746, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(VulnerabilityInjectionButton)
                    .addComponent(ViewResultsButton)
                    .addComponent(DeleteResultsButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel9.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel9.border.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel9.border.border.titleFont")))); // NOI18N
        jPanel9.setName("jPanel9"); // NOI18N

        CreateDiffFilesButton.setText(resourceMap.getString("CreateDiffFilesButton.text")); // NOI18N
        CreateDiffFilesButton.setName("CreateDiffFilesButton"); // NOI18N
        CreateDiffFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateDiffFilesButtonActionPerformed(evt);
            }
        });

        DeleteDiffButton.setText(resourceMap.getString("DeleteDiffButton.text")); // NOI18N
        DeleteDiffButton.setName("DeleteDiffButton"); // NOI18N
        DeleteDiffButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteDiffButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CreateDiffFilesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteDiffButton)
                .addContainerGap(817, Short.MAX_VALUE))
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addGroup(jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateDiffFilesButton)
                    .addComponent(DeleteDiffButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel10.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel10.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel10.border.titleFont"))); // NOI18N
        jPanel10.setName("jPanel10"); // NOI18N

        CreateVulnerabilityFilesButton.setText(resourceMap.getString("CreateVulnerabilityFilesButton.text")); // NOI18N
        CreateVulnerabilityFilesButton.setName("CreateVulnerabilityFilesButton"); // NOI18N
        CreateVulnerabilityFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CreateVulnerabilityFilesButtonActionPerformed(evt);
            }
        });

        DeleteVulnerabilityFilesButton.setText(resourceMap.getString("DeleteVulnerabilityFilesButton.text")); // NOI18N
        DeleteVulnerabilityFilesButton.setName("DeleteVulnerabilityFilesButton"); // NOI18N
        DeleteVulnerabilityFilesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteVulnerabilityFilesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(CreateVulnerabilityFilesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteVulnerabilityFilesButton)
                .addContainerGap(711, Short.MAX_VALUE))
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel10Layout.createSequentialGroup()
                .addGroup(jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CreateVulnerabilityFilesButton)
                    .addComponent(DeleteVulnerabilityFilesButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jLabel25.setText(resourceMap.getString("jLabel25.text")); // NOI18N
        jLabel25.setName("jLabel25"); // NOI18N

        VulnerabilitySelectedComboBox.setName("VulnerabilitySelectedComboBox"); // NOI18N

        RefreshVulnerabilitiesButton.setText(resourceMap.getString("RefreshVulnerabilitiesButton.text")); // NOI18N
        RefreshVulnerabilitiesButton.setName("RefreshVulnerabilitiesButton"); // NOI18N
        RefreshVulnerabilitiesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshVulnerabilitiesButtonActionPerformed(evt);
            }
        });

        ApplySingleVulnerabilityButton.setText(resourceMap.getString("ApplySingleVulnerabilityButton.text")); // NOI18N
        ApplySingleVulnerabilityButton.setName("ApplySingleVulnerabilityButton"); // NOI18N
        ApplySingleVulnerabilityButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySingleVulnerabilityButtonActionPerformed(evt);
            }
        });

        jScrollPane10.setName("jScrollPane10"); // NOI18N

        VulnerabilityInjectionTextArea.setColumns(20);
        VulnerabilityInjectionTextArea.setRows(5);
        VulnerabilityInjectionTextArea.setName("VulnerabilityInjectionTextArea"); // NOI18N
        jScrollPane10.setViewportView(VulnerabilityInjectionTextArea);

        jLabel26.setText(resourceMap.getString("jLabel26.text")); // NOI18N
        jLabel26.setName("jLabel26"); // NOI18N

        SuccessPayloadSelectedComboBox.setName("SuccessPayloadSelectedComboBox"); // NOI18N

        ApplySinglePayloadButton.setText(resourceMap.getString("ApplySinglePayloadButton.text")); // NOI18N
        ApplySinglePayloadButton.setName("ApplySinglePayloadButton"); // NOI18N
        ApplySinglePayloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplySinglePayloadButtonActionPerformed(evt);
            }
        });

        WebApplicationIPAddress.setText(resourceMap.getString("WebApplicationIPAddress.text")); // NOI18N
        WebApplicationIPAddress.setName("WebApplicationIPAddress"); // NOI18N

        jLabel27.setText(resourceMap.getString("jLabel27.text")); // NOI18N
        jLabel27.setName("jLabel27"); // NOI18N

        WebApplicationPort.setText(resourceMap.getString("WebApplicationPort.text")); // NOI18N
        WebApplicationPort.setName("WebApplicationPort"); // NOI18N

        jLabel30.setText(resourceMap.getString("jLabel30.text")); // NOI18N
        jLabel30.setName("jLabel30"); // NOI18N

        jLabel34.setText(resourceMap.getString("jLabel34.text")); // NOI18N
        jLabel34.setName("jLabel34"); // NOI18N

        javax.swing.GroupLayout InjectionPanelLayout = new javax.swing.GroupLayout(InjectionPanel);
        InjectionPanel.setLayout(InjectionPanelLayout);
        InjectionPanelLayout.setHorizontalGroup(
            InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InjectionPanelLayout.createSequentialGroup()
                .addGroup(InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(InjectionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                            .addComponent(jPanel10, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel9, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPanel8, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(RefreshVulnerabilitiesButton)
                            .addGroup(InjectionPanelLayout.createSequentialGroup()
                                .addComponent(jLabel25)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(VulnerabilitySelectedComboBox, 0, 785, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ApplySingleVulnerabilityButton))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, InjectionPanelLayout.createSequentialGroup()
                        .addGap(40, 40, 40)
                        .addComponent(jLabel26)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(SuccessPayloadSelectedComboBox, 0, 705, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(ApplySinglePayloadButton, javax.swing.GroupLayout.DEFAULT_SIZE, 209, Short.MAX_VALUE))
                    .addGroup(InjectionPanelLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jLabel27)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WebApplicationIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel30)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(WebApplicationPort, javax.swing.GroupLayout.PREFERRED_SIZE, 111, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 289, Short.MAX_VALUE)
                        .addComponent(jLabel34)))
                .addContainerGap())
        );
        InjectionPanelLayout.setVerticalGroup(
            InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(InjectionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel10, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(RefreshVulnerabilitiesButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(ApplySingleVulnerabilityButton)
                    .addComponent(VulnerabilitySelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel27)
                    .addComponent(WebApplicationIPAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel30)
                    .addComponent(WebApplicationPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel34))
                .addGap(5, 5, 5)
                .addGroup(InjectionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel26)
                    .addComponent(SuccessPayloadSelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ApplySinglePayloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane10, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("InjectionPanel.TabConstraints.tabTitle"), InjectionPanel); // NOI18N

        MySQLListenerPanel.setName("MySQLListenerPanel"); // NOI18N

        jLabel21.setText(resourceMap.getString("jLabel21.text")); // NOI18N
        jLabel21.setName("jLabel21"); // NOI18N

        MySQLListenerProxyPort.setText(resourceMap.getString("MySQLListenerProxyPort.text")); // NOI18N
        MySQLListenerProxyPort.setName("MySQLListenerProxyPort"); // NOI18N

        DeleteMySQLListenerDBDataButton.setText(resourceMap.getString("DeleteMySQLListenerDBDataButton.text")); // NOI18N
        DeleteMySQLListenerDBDataButton.setName("DeleteMySQLListenerDBDataButton"); // NOI18N
        DeleteMySQLListenerDBDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteMySQLListenerDBDataButtonActionPerformed(evt);
            }
        });

        StartMySQLListenerButton.setText(resourceMap.getString("StartMySQLListenerButton.text")); // NOI18N
        StartMySQLListenerButton.setName("StartMySQLListenerButton"); // NOI18N
        StartMySQLListenerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartMySQLListenerButtonActionPerformed(evt);
            }
        });

        StopMySQLListenerButton.setText(resourceMap.getString("StopMySQLListenerButton.text")); // NOI18N
        StopMySQLListenerButton.setName("StopMySQLListenerButton"); // NOI18N
        StopMySQLListenerButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopMySQLListenerButtonActionPerformed(evt);
            }
        });

        jScrollPane23.setName("jScrollPane23"); // NOI18N

        MySQLListenerTextArea.setColumns(20);
        MySQLListenerTextArea.setRows(5);
        MySQLListenerTextArea.setName("MySQLListenerTextArea"); // NOI18N
        jScrollPane23.setViewportView(MySQLListenerTextArea);

        ViewMySQLPacketsButton.setText(resourceMap.getString("ViewMySQLPacketsButton.text")); // NOI18N
        ViewMySQLPacketsButton.setName("ViewMySQLPacketsButton"); // NOI18N
        ViewMySQLPacketsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ViewMySQLPacketsButtonActionPerformed(evt);
            }
        });

        ModeComboBox.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "INSPECTION", "ATTACK" }));
        ModeComboBox.setName("ModeComboBox"); // NOI18N

        javax.swing.GroupLayout MySQLListenerPanelLayout = new javax.swing.GroupLayout(MySQLListenerPanel);
        MySQLListenerPanel.setLayout(MySQLListenerPanelLayout);
        MySQLListenerPanelLayout.setHorizontalGroup(
            MySQLListenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MySQLListenerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel21)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MySQLListenerProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(DeleteMySQLListenerDBDataButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ViewMySQLPacketsButton)
                .addGap(40, 40, 40)
                .addComponent(ModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 294, Short.MAX_VALUE)
                .addComponent(StartMySQLListenerButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StopMySQLListenerButton)
                .addContainerGap())
            .addGroup(MySQLListenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MySQLListenerPanelLayout.createSequentialGroup()
                    .addGap(12, 12, 12)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addGap(12, 12, 12)))
        );
        MySQLListenerPanelLayout.setVerticalGroup(
            MySQLListenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MySQLListenerPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MySQLListenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel21)
                    .addComponent(MySQLListenerProxyPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StopMySQLListenerButton)
                    .addComponent(StartMySQLListenerButton)
                    .addComponent(DeleteMySQLListenerDBDataButton)
                    .addComponent(ViewMySQLPacketsButton)
                    .addComponent(ModeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(528, Short.MAX_VALUE))
            .addGroup(MySQLListenerPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(MySQLListenerPanelLayout.createSequentialGroup()
                    .addGap(47, 47, 47)
                    .addComponent(jScrollPane23, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                    .addGap(12, 12, 12)))
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("MySQLListenerPanel.TabConstraints.tabTitle"), MySQLListenerPanel); // NOI18N

        HTTPProxyPanel.setName("HTTPProxyPanel"); // NOI18N

        jLabel8.setText(resourceMap.getString("jLabel8.text")); // NOI18N
        jLabel8.setName("jLabel8"); // NOI18N

        HTTPProxySourcePort.setText(resourceMap.getString("HTTPProxySourcePort.text")); // NOI18N
        HTTPProxySourcePort.setName("HTTPProxySourcePort"); // NOI18N

        StartHTTPProxyButton.setText(resourceMap.getString("StartHTTPProxyButton.text")); // NOI18N
        StartHTTPProxyButton.setName("StartHTTPProxyButton"); // NOI18N
        StartHTTPProxyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartHTTPProxyButtonActionPerformed(evt);
            }
        });

        StopHTTPProxyButton.setText(resourceMap.getString("StopHTTPProxyButton.text")); // NOI18N
        StopHTTPProxyButton.setName("StopHTTPProxyButton"); // NOI18N
        StopHTTPProxyButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopHTTPProxyButtonActionPerformed(evt);
            }
        });

        jScrollPane12.setName("jScrollPane12"); // NOI18N

        HTTPProxyTextArea.setColumns(20);
        HTTPProxyTextArea.setRows(5);
        HTTPProxyTextArea.setName("HTTPProxyTextArea"); // NOI18N
        jScrollPane12.setViewportView(HTTPProxyTextArea);

        DeleteHTTPProxyDBDataButton.setText(resourceMap.getString("DeleteHTTPProxyDBDataButton.text")); // NOI18N
        DeleteHTTPProxyDBDataButton.setName("DeleteHTTPProxyDBDataButton"); // NOI18N
        DeleteHTTPProxyDBDataButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeleteHTTPProxyDBDataButtonActionPerformed(evt);
            }
        });

        MySQL2HTTPButton.setText(resourceMap.getString("MySQL2HTTPButton.text")); // NOI18N
        MySQL2HTTPButton.setName("MySQL2HTTPButton"); // NOI18N
        MySQL2HTTPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MySQL2HTTPButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout HTTPProxyPanelLayout = new javax.swing.GroupLayout(HTTPProxyPanel);
        HTTPProxyPanel.setLayout(HTTPProxyPanelLayout);
        HTTPProxyPanelLayout.setHorizontalGroup(
            HTTPProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, HTTPProxyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HTTPProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane12, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addGroup(HTTPProxyPanelLayout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(HTTPProxySourcePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(DeleteHTTPProxyDBDataButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 516, Short.MAX_VALUE)
                        .addComponent(MySQL2HTTPButton)
                        .addGap(34, 34, 34)
                        .addComponent(StartHTTPProxyButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(StopHTTPProxyButton)))
                .addContainerGap())
        );
        HTTPProxyPanelLayout.setVerticalGroup(
            HTTPProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(HTTPProxyPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(HTTPProxyPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(HTTPProxySourcePort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(StartHTTPProxyButton)
                    .addComponent(StopHTTPProxyButton)
                    .addComponent(MySQL2HTTPButton)
                    .addComponent(DeleteHTTPProxyDBDataButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane12, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("HTTPProxyPanel.TabConstraints.tabTitle"), HTTPProxyPanel); // NOI18N

        PayloadPanel.setName("PayloadPanel"); // NOI18N

        jLabel9.setText(resourceMap.getString("jLabel9.text")); // NOI18N
        jLabel9.setName("jLabel9"); // NOI18N

        PayloadSelectedComboBox.setName("PayloadSelectedComboBox"); // NOI18N

        jLabel10.setText(resourceMap.getString("jLabel10.text")); // NOI18N
        jLabel10.setName("jLabel10"); // NOI18N

        SQLVariableSelectedComboBox.setName("SQLVariableSelectedComboBox"); // NOI18N

        jLabel11.setText(resourceMap.getString("jLabel11.text")); // NOI18N
        jLabel11.setName("jLabel11"); // NOI18N

        PayloadHTTPSelectedComboBox.setName("PayloadHTTPSelectedComboBox"); // NOI18N
        PayloadHTTPSelectedComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                PayloadHTTPSelectedComboBoxActionPerformed(evt);
            }
        });

        jScrollPane21.setName("jScrollPane21"); // NOI18N

        HTTPRequestTextArea.setColumns(20);
        HTTPRequestTextArea.setRows(5);
        HTTPRequestTextArea.setText(resourceMap.getString("HTTPRequestTextArea.text")); // NOI18N
        HTTPRequestTextArea.setName("HTTPRequestTextArea"); // NOI18N
        jScrollPane21.setViewportView(HTTPRequestTextArea);

        jScrollPane22.setName("jScrollPane22"); // NOI18N

        HTTPResponseTextArea.setColumns(20);
        HTTPResponseTextArea.setRows(5);
        HTTPResponseTextArea.setText(resourceMap.getString("HTTPResponseTextArea.text")); // NOI18N
        HTTPResponseTextArea.setName("HTTPResponseTextArea"); // NOI18N
        jScrollPane22.setViewportView(HTTPResponseTextArea);

        jLabel19.setText(resourceMap.getString("jLabel19.text")); // NOI18N
        jLabel19.setName("jLabel19"); // NOI18N

        jLabel20.setText(resourceMap.getString("jLabel20.text")); // NOI18N
        jLabel20.setName("jLabel20"); // NOI18N

        ApplyPayloadButton.setText(resourceMap.getString("ApplyPayloadButton.text")); // NOI18N
        ApplyPayloadButton.setName("ApplyPayloadButton"); // NOI18N
        ApplyPayloadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ApplyPayloadButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout PayloadPanelLayout = new javax.swing.GroupLayout(PayloadPanel);
        PayloadPanel.setLayout(PayloadPanelLayout);
        PayloadPanelLayout.setHorizontalGroup(
            PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, PayloadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jScrollPane21, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addComponent(jScrollPane22, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PayloadPanelLayout.createSequentialGroup()
                        .addComponent(jLabel9)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(PayloadSelectedComboBox, 0, 948, Short.MAX_VALUE))
                    .addComponent(jLabel20, javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, PayloadPanelLayout.createSequentialGroup()
                        .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel11)
                            .addComponent(jLabel19))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SQLVariableSelectedComboBox, 0, 912, Short.MAX_VALUE)
                            .addGroup(PayloadPanelLayout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(ApplyPayloadButton)
                                    .addComponent(PayloadHTTPSelectedComboBox, 0, 908, Short.MAX_VALUE))))))
                .addContainerGap())
        );
        PayloadPanelLayout.setVerticalGroup(
            PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(PayloadPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(PayloadSelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(SQLVariableSelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel11)
                    .addComponent(PayloadHTTPSelectedComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(7, 7, 7)
                .addGroup(PayloadPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(ApplyPayloadButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane21, javax.swing.GroupLayout.DEFAULT_SIZE, 134, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel20)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane22, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("PayloadPanel.TabConstraints.tabTitle"), PayloadPanel); // NOI18N

        ManualAttackPanel.setName("ManualAttackPanel"); // NOI18N

        MaxIDButton.setText(resourceMap.getString("MaxIDButton.text")); // NOI18N
        MaxIDButton.setName("MaxIDButton"); // NOI18N
        MaxIDButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                MaxIDButtonActionPerformed(evt);
            }
        });

        jScrollPane11.setName("jScrollPane11"); // NOI18N

        SQLInjectionAttackTextArea.setColumns(20);
        SQLInjectionAttackTextArea.setRows(5);
        SQLInjectionAttackTextArea.setText(resourceMap.getString("SQLInjectionAttackTextArea.text")); // NOI18N
        SQLInjectionAttackTextArea.setName("SQLInjectionAttackTextArea"); // NOI18N
        jScrollPane11.setViewportView(SQLInjectionAttackTextArea);

        jScrollPane13.setName("jScrollPane13"); // NOI18N

        SQLInjectionAttackTextArea1.setColumns(20);
        SQLInjectionAttackTextArea1.setRows(5);
        SQLInjectionAttackTextArea1.setName("SQLInjectionAttackTextArea1"); // NOI18N
        jScrollPane13.setViewportView(SQLInjectionAttackTextArea1);

        jTextField1.setText(resourceMap.getString("jTextField1.text")); // NOI18N
        jTextField1.setName("jTextField1"); // NOI18N

        ReadRequestButton.setText(resourceMap.getString("ReadRequestButton.text")); // NOI18N
        ReadRequestButton.setName("ReadRequestButton"); // NOI18N
        ReadRequestButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadRequestButtonActionPerformed(evt);
            }
        });

        jTextField2.setText(resourceMap.getString("jTextField2.text")); // NOI18N
        jTextField2.setName("jTextField2"); // NOI18N

        jScrollPane14.setName("jScrollPane14"); // NOI18N

        displayPreviewPane.setName("displayPreviewPane"); // NOI18N
        jScrollPane14.setViewportView(displayPreviewPane);

        RefreshPreviewButton.setText(resourceMap.getString("RefreshPreviewButton.text")); // NOI18N
        RefreshPreviewButton.setName("RefreshPreviewButton"); // NOI18N
        RefreshPreviewButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                RefreshPreviewButtonActionPerformed(evt);
            }
        });

        jScrollPane15.setName("jScrollPane15"); // NOI18N

        SQLInjectionAttackTextArea2.setColumns(20);
        SQLInjectionAttackTextArea2.setRows(5);
        SQLInjectionAttackTextArea2.setName("SQLInjectionAttackTextArea2"); // NOI18N
        jScrollPane15.setViewportView(SQLInjectionAttackTextArea2);

        jTextField3.setText(resourceMap.getString("jTextField3.text")); // NOI18N
        jTextField3.setName("jTextField3"); // NOI18N

        SendHTTPButton.setText(resourceMap.getString("SendHTTPButton.text")); // NOI18N
        SendHTTPButton.setName("SendHTTPButton"); // NOI18N
        SendHTTPButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendHTTPButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ManualAttackPanelLayout = new javax.swing.GroupLayout(ManualAttackPanel);
        ManualAttackPanel.setLayout(ManualAttackPanelLayout);
        ManualAttackPanelLayout.setHorizontalGroup(
            ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane14)
                    .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                        .addGroup(ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                                .addComponent(MaxIDButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(ReadRequestButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane11, javax.swing.GroupLayout.PREFERRED_SIZE, 413, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                            .addComponent(jScrollPane15, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 659, Short.MAX_VALUE)
                            .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 418, Short.MAX_VALUE)
                                .addComponent(SendHTTPButton)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(RefreshPreviewButton)))))
                .addContainerGap())
        );
        ManualAttackPanelLayout.setVerticalGroup(
            ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(MaxIDButton)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(ReadRequestButton)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RefreshPreviewButton)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SendHTTPButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ManualAttackPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ManualAttackPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane15, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane13, javax.swing.GroupLayout.DEFAULT_SIZE, 150, Short.MAX_VALUE))
                    .addComponent(jScrollPane11, javax.swing.GroupLayout.DEFAULT_SIZE, 243, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane14, javax.swing.GroupLayout.DEFAULT_SIZE, 261, Short.MAX_VALUE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("ManualAttackPanel.TabConstraints.tabTitle"), ManualAttackPanel); // NOI18N

        MiniBrowserPanel.setName("MiniBrowserPanel"); // NOI18N

        backButton.setText(resourceMap.getString("backButton.text")); // NOI18N
        backButton.setName("backButton"); // NOI18N
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        forwardButton.setText(resourceMap.getString("forwardButton.text")); // NOI18N
        forwardButton.setName("forwardButton"); // NOI18N
        forwardButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                forwardButtonActionPerformed(evt);
            }
        });

        locationTextField.setText(resourceMap.getString("locationTextField.text")); // NOI18N
        locationTextField.setName("locationTextField"); // NOI18N

        jScrollPane24.setName("jScrollPane24"); // NOI18N

        displayEditorPane.setName("displayEditorPane"); // NOI18N
        jScrollPane24.setViewportView(displayEditorPane);

        goButton.setText(resourceMap.getString("goButton.text")); // NOI18N
        goButton.setName("goButton"); // NOI18N
        goButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                goButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout MiniBrowserPanelLayout = new javax.swing.GroupLayout(MiniBrowserPanel);
        MiniBrowserPanel.setLayout(MiniBrowserPanelLayout);
        MiniBrowserPanelLayout.setHorizontalGroup(
            MiniBrowserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MiniBrowserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MiniBrowserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane24)
                    .addGroup(MiniBrowserPanelLayout.createSequentialGroup()
                        .addComponent(backButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(forwardButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(locationTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 893, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(goButton)))
                .addContainerGap())
        );
        MiniBrowserPanelLayout.setVerticalGroup(
            MiniBrowserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(MiniBrowserPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(MiniBrowserPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backButton)
                    .addComponent(forwardButton)
                    .addComponent(goButton)
                    .addComponent(locationTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane24, javax.swing.GroupLayout.DEFAULT_SIZE, 510, Short.MAX_VALUE)
                .addContainerGap())
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("MiniBrowserPanel.TabConstraints.tabTitle"), MiniBrowserPanel); // NOI18N

        IDSPanel.setName("IDSPanel"); // NOI18N

        jScrollPane28.setName("jScrollPane28"); // NOI18N

        jTPFile.setName("jTPFile"); // NOI18N
        jScrollPane28.setViewportView(jTPFile);

        jPanel11.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Status", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma", 1, 11))); // NOI18N
        jPanel11.setName("jPanel11"); // NOI18N

        jLDBSniffer.setFont(resourceMap.getFont("jLDBSniffer.font")); // NOI18N
        jLDBSniffer.setText(resourceMap.getString("jLDBSniffer.text")); // NOI18N
        jLDBSniffer.setName("jLDBSniffer"); // NOI18N

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLDBSniffer, javax.swing.GroupLayout.PREFERRED_SIZE, 175, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(111, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addComponent(jLDBSniffer)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        jButton1.setFont(resourceMap.getFont("jButton1.font")); // NOI18N
        jButton1.setMnemonic('o');
        jButton1.setText(resourceMap.getString("jButton1.text")); // NOI18N
        jButton1.setName("jButton1"); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel36.setFont(resourceMap.getFont("jLabel36.font")); // NOI18N
        jLabel36.setText(resourceMap.getString("jLabel36.text")); // NOI18N
        jLabel36.setName("jLabel36"); // NOI18N

        jPath.setFont(resourceMap.getFont("jPath.font")); // NOI18N
        jPath.setText(resourceMap.getString("jPath.text")); // NOI18N
        jPath.setName("jPath"); // NOI18N
        jPath.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPathActionPerformed(evt);
            }
        });

        IDSResultsButton.setText(resourceMap.getString("IDSResultsButton.text")); // NOI18N
        IDSResultsButton.setName("IDSResultsButton"); // NOI18N
        IDSResultsButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                IDSResultsButtonActionPerformed(evt);
            }
        });

        jPanel12.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "IDS", javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Tahoma 11", 1, 12))); // NOI18N
        jPanel12.setName("jPanel12"); // NOI18N

        StartIDSButton.setFont(resourceMap.getFont("StartIDSButton.font")); // NOI18N
        StartIDSButton.setMnemonic('d');
        StartIDSButton.setText(resourceMap.getString("StartIDSButton.text")); // NOI18N
        StartIDSButton.setName("StartIDSButton"); // NOI18N
        StartIDSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StartIDSButtonActionPerformed(evt);
            }
        });

        StopIDSButton.setFont(resourceMap.getFont("StopIDSButton.font")); // NOI18N
        StopIDSButton.setMnemonic('o');
        StopIDSButton.setText(resourceMap.getString("StopIDSButton.text")); // NOI18N
        StopIDSButton.setName("StopIDSButton"); // NOI18N
        StopIDSButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                StopIDSButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(StartIDSButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(StopIDSButton))
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel12Layout.createSequentialGroup()
                .addGroup(jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(StartIDSButton)
                    .addComponent(StopIDSButton))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout IDSPanelLayout = new javax.swing.GroupLayout(IDSPanel);
        IDSPanel.setLayout(IDSPanelLayout);
        IDSPanelLayout.setHorizontalGroup(
            IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IDSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 1078, Short.MAX_VALUE)
                    .addGroup(IDSPanelLayout.createSequentialGroup()
                        .addComponent(jPanel12, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel11, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(IDSResultsButton))
                    .addGroup(IDSPanelLayout.createSequentialGroup()
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel36)
                        .addGap(9, 9, 9)
                        .addComponent(jPath, javax.swing.GroupLayout.DEFAULT_SIZE, 887, Short.MAX_VALUE)))
                .addContainerGap())
        );
        IDSPanelLayout.setVerticalGroup(
            IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(IDSPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jLabel36)
                    .addComponent(jPath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, IDSPanelLayout.createSequentialGroup()
                        .addComponent(IDSResultsButton)
                        .addGap(19, 19, 19))
                    .addGroup(IDSPanelLayout.createSequentialGroup()
                        .addGroup(IDSPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPanel12, javax.swing.GroupLayout.DEFAULT_SIZE, 59, Short.MAX_VALUE)
                            .addComponent(jPanel11, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                .addComponent(jScrollPane28, javax.swing.GroupLayout.DEFAULT_SIZE, 459, Short.MAX_VALUE))
        );

        AttackInjectorTabbedPane.addTab(resourceMap.getString("IDSPanel.TabConstraints.tabTitle"), IDSPanel); // NOI18N

        javax.swing.GroupLayout mainPanelLayout = new javax.swing.GroupLayout(mainPanel);
        mainPanel.setLayout(mainPanelLayout);
        mainPanelLayout.setHorizontalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AttackInjectorTabbedPane)
                .addContainerGap())
        );
        mainPanelLayout.setVerticalGroup(
            mainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, mainPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(AttackInjectorTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 600, Short.MAX_VALUE))
        );

        menuBar.setName("menuBar"); // NOI18N

        fileMenu.setText(resourceMap.getString("fileMenu.text")); // NOI18N
        fileMenu.setName("fileMenu"); // NOI18N

        exitMenuItem.setAction(actionMap.get("quit")); // NOI18N
        exitMenuItem.setName("exitMenuItem"); // NOI18N
        fileMenu.add(exitMenuItem);

        menuBar.add(fileMenu);

        utilMenu.setText(resourceMap.getString("utilMenu.text")); // NOI18N
        utilMenu.setName("utilMenu"); // NOI18N

        Encode_DecodeMenuItem.setAction(actionMap.get("showEncode_DecodeBox")); // NOI18N
        Encode_DecodeMenuItem.setText(resourceMap.getString("Encode_DecodeMenuItem.text")); // NOI18N
        Encode_DecodeMenuItem.setName("Encode_DecodeMenuItem"); // NOI18N
        utilMenu.add(Encode_DecodeMenuItem);

        RegexMenuItem.setAction(actionMap.get("showRegexBox")); // NOI18N
        RegexMenuItem.setText(resourceMap.getString("RegexMenuItem.text")); // NOI18N
        RegexMenuItem.setName("RegexMenuItem"); // NOI18N
        utilMenu.add(RegexMenuItem);

        hackersMenuItem.setAction(actionMap.get("showha_ckers_orgBox")); // NOI18N
        hackersMenuItem.setText(resourceMap.getString("hackersMenuItem.text")); // NOI18N
        hackersMenuItem.setName("hackersMenuItem"); // NOI18N
        utilMenu.add(hackersMenuItem);

        SQLMenuItem.setAction(actionMap.get("showJavaDBSQL")); // NOI18N
        SQLMenuItem.setText(resourceMap.getString("SQLMenuItem.text")); // NOI18N
        SQLMenuItem.setName("SQLMenuItem"); // NOI18N
        utilMenu.add(SQLMenuItem);

        NotesMenuItem.setAction(actionMap.get("showNotesBox")); // NOI18N
        NotesMenuItem.setText(resourceMap.getString("NotesMenuItem.text")); // NOI18N
        NotesMenuItem.setName("NotesMenuItem"); // NOI18N
        utilMenu.add(NotesMenuItem);

        menuBar.add(utilMenu);

        helpMenu.setText(resourceMap.getString("helpMenu.text")); // NOI18N
        helpMenu.setName("helpMenu"); // NOI18N

        aboutMenuItem.setAction(actionMap.get("showAboutBox")); // NOI18N
        aboutMenuItem.setName("aboutMenuItem"); // NOI18N
        helpMenu.add(aboutMenuItem);

        menuBar.add(helpMenu);

        statusPanel.setName("statusPanel"); // NOI18N

        statusPanelSeparator.setName("statusPanelSeparator"); // NOI18N

        statusMessageLabel.setName("statusMessageLabel"); // NOI18N

        statusAnimationLabel.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        statusAnimationLabel.setName("statusAnimationLabel"); // NOI18N

        progressBar.setName("progressBar"); // NOI18N

        javax.swing.GroupLayout statusPanelLayout = new javax.swing.GroupLayout(statusPanel);
        statusPanel.setLayout(statusPanelLayout);
        statusPanelLayout.setHorizontalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(statusPanelLayout.createSequentialGroup()
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(statusMessageLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 1085, Short.MAX_VALUE))
                            .addGroup(statusPanelLayout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                        .addComponent(statusAnimationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(statusPanelSeparator, javax.swing.GroupLayout.DEFAULT_SIZE, 1118, Short.MAX_VALUE))
                .addContainerGap())
        );
        statusPanelLayout.setVerticalGroup(
            statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, statusPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(statusPanelSeparator, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(statusPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(statusAnimationLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                        .addComponent(statusMessageLabel)
                        .addGap(15, 15, 15))
                    .addGroup(statusPanelLayout.createSequentialGroup()
                        .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap())))
        );

        NotesBox.setTitle(resourceMap.getString("NotesBox.title")); // NOI18N
        NotesBox.setModal(true);
        NotesBox.setName("NotesBox"); // NOI18N
        NotesBox.setResizable(false);

        closeNotesBoxButton.setMnemonic('C');
        closeNotesBoxButton.setText(resourceMap.getString("closeNotesBoxButton.text")); // NOI18N
        closeNotesBoxButton.setName("closeNotesBoxButton"); // NOI18N
        closeNotesBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeNotesBoxButtonActionPerformed(evt);
            }
        });

        jScrollPane17.setName("jScrollPane17"); // NOI18N

        jTextArea2.setColumns(20);
        jTextArea2.setLineWrap(true);
        jTextArea2.setRows(5);
        jTextArea2.setText(resourceMap.getString("jTextArea2.text")); // NOI18N
        jTextArea2.setWrapStyleWord(true);
        jTextArea2.setName("jTextArea2"); // NOI18N
        jScrollPane17.setViewportView(jTextArea2);

        jLabel32.setText(resourceMap.getString("jLabel32.text")); // NOI18N
        jLabel32.setName("jLabel32"); // NOI18N

        jScrollPane20.setName("jScrollPane20"); // NOI18N

        jTextArea3.setColumns(20);
        jTextArea3.setLineWrap(true);
        jTextArea3.setRows(5);
        jTextArea3.setText(resourceMap.getString("jTextArea3.text")); // NOI18N
        jTextArea3.setWrapStyleWord(true);
        jTextArea3.setName("jTextArea3"); // NOI18N
        jScrollPane20.setViewportView(jTextArea3);

        jLabel33.setText(resourceMap.getString("jLabel33.text")); // NOI18N
        jLabel33.setName("jLabel33"); // NOI18N

        javax.swing.GroupLayout NotesBoxLayout = new javax.swing.GroupLayout(NotesBox.getContentPane());
        NotesBox.getContentPane().setLayout(NotesBoxLayout);
        NotesBoxLayout.setHorizontalGroup(
            NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, NotesBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(closeNotesBoxButton)
                    .addGroup(NotesBoxLayout.createSequentialGroup()
                        .addComponent(jScrollPane17, javax.swing.GroupLayout.DEFAULT_SIZE, 458, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel33)
                            .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 442, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addContainerGap())
            .addGroup(NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NotesBoxLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel32)
                    .addContainerGap(882, Short.MAX_VALUE)))
        );
        NotesBoxLayout.setVerticalGroup(
            NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(NotesBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel33)
                .addGap(1, 1, 1)
                .addGroup(NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane17, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(NotesBoxLayout.createSequentialGroup()
                        .addComponent(jScrollPane20, javax.swing.GroupLayout.PREFERRED_SIZE, 451, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(closeNotesBoxButton)))
                .addContainerGap())
            .addGroup(NotesBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(NotesBoxLayout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(jLabel32)
                    .addContainerGap(499, Short.MAX_VALUE)))
        );

        ha_ckers_orgBox.setTitle(resourceMap.getString("ha_ckers_orgBox.title")); // NOI18N
        ha_ckers_orgBox.setName("ha_ckers_orgBox"); // NOI18N

        OpenVulnerabilityXMLButton.setText(resourceMap.getString("OpenVulnerabilityXMLButton.text")); // NOI18N
        OpenVulnerabilityXMLButton.setName("OpenVulnerabilityXMLButton"); // NOI18N
        OpenVulnerabilityXMLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                OpenVulnerabilityXMLButtonActionPerformed(evt);
            }
        });

        XMLFileName.setText(resourceMap.getString("XMLFileName.text")); // NOI18N
        XMLFileName.setName("XMLFileName"); // NOI18N

        ProcessVulnerabilityXMLButton.setText(resourceMap.getString("ProcessVulnerabilityXMLButton.text")); // NOI18N
        ProcessVulnerabilityXMLButton.setName("ProcessVulnerabilityXMLButton"); // NOI18N
        ProcessVulnerabilityXMLButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ProcessVulnerabilityXMLButtonActionPerformed(evt);
            }
        });

        jLabel7.setText(resourceMap.getString("jLabel7.text")); // NOI18N
        jLabel7.setName("jLabel7"); // NOI18N
        jLabel7.setPreferredSize(new java.awt.Dimension(37, 17));

        jLabel14.setText(resourceMap.getString("jLabel14.text")); // NOI18N
        jLabel14.setName("jLabel14"); // NOI18N

        XSSAttackName.setName("XSSAttackName"); // NOI18N

        XSSAttackLabel.setName("XSSAttackLabel"); // NOI18N

        jLabel16.setText(resourceMap.getString("jLabel16.text")); // NOI18N
        jLabel16.setName("jLabel16"); // NOI18N

        jLabel15.setText(resourceMap.getString("jLabel15.text")); // NOI18N
        jLabel15.setName("jLabel15"); // NOI18N

        jLabel17.setText(resourceMap.getString("jLabel17.text")); // NOI18N
        jLabel17.setName("jLabel17"); // NOI18N

        jLabel18.setText(resourceMap.getString("jLabel18.text")); // NOI18N
        jLabel18.setName("jLabel18"); // NOI18N

        jScrollPane2.setName("jScrollPane2"); // NOI18N

        XSSAttackBrowser.setColumns(20);
        XSSAttackBrowser.setLineWrap(true);
        XSSAttackBrowser.setRows(5);
        XSSAttackBrowser.setName("XSSAttackBrowser"); // NOI18N
        jScrollPane2.setViewportView(XSSAttackBrowser);

        jScrollPane9.setHorizontalScrollBarPolicy(javax.swing.ScrollPaneConstants.HORIZONTAL_SCROLLBAR_ALWAYS);
        jScrollPane9.setName("jScrollPane9"); // NOI18N

        XSSAttackCode.setColumns(20);
        XSSAttackCode.setRows(5);
        XSSAttackCode.setName("XSSAttackCode"); // NOI18N
        jScrollPane9.setViewportView(XSSAttackCode);

        jScrollPane8.setName("jScrollPane8"); // NOI18N

        XSSAttackNames.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        XSSAttackNames.setName("XSSAttackNames"); // NOI18N
        XSSAttackNames.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                XSSAttackNamesValueChanged(evt);
            }
        });
        jScrollPane8.setViewportView(XSSAttackNames);

        jScrollPane7.setName("jScrollPane7"); // NOI18N

        XSSAttackDesc.setColumns(20);
        XSSAttackDesc.setLineWrap(true);
        XSSAttackDesc.setRows(5);
        XSSAttackDesc.setName("XSSAttackDesc"); // NOI18N
        jScrollPane7.setViewportView(XSSAttackDesc);

        closeHa_ckers_orgBoxButton.setMnemonic('C');
        closeHa_ckers_orgBoxButton.setText(resourceMap.getString("closeHa_ckers_orgBoxButton.text")); // NOI18N
        closeHa_ckers_orgBoxButton.setName("closeHa_ckers_orgBoxButton"); // NOI18N
        closeHa_ckers_orgBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeHa_ckers_orgBoxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout ha_ckers_orgBoxLayout = new javax.swing.GroupLayout(ha_ckers_orgBox.getContentPane());
        ha_ckers_orgBox.getContentPane().setLayout(ha_ckers_orgBoxLayout);
        ha_ckers_orgBoxLayout.setHorizontalGroup(
            ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane9, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addComponent(jScrollPane8, javax.swing.GroupLayout.DEFAULT_SIZE, 555, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, ha_ckers_orgBoxLayout.createSequentialGroup()
                                .addComponent(jLabel18)
                                .addGap(323, 323, 323)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel17)
                            .addComponent(jLabel15)
                            .addComponent(jLabel16)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(XSSAttackName, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                            .addComponent(XSSAttackLabel, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, ha_ckers_orgBoxLayout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)
                                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 310, Short.MAX_VALUE)))))
                    .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(OpenVulnerabilityXMLButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(ProcessVulnerabilityXMLButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)
                            .addComponent(XMLFileName, javax.swing.GroupLayout.DEFAULT_SIZE, 736, Short.MAX_VALUE)))
                    .addComponent(closeHa_ckers_orgBoxButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        ha_ckers_orgBoxLayout.setVerticalGroup(
            ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(OpenVulnerabilityXMLButton)
                    .addComponent(XMLFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ProcessVulnerabilityXMLButton)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(XSSAttackName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(XSSAttackLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel16))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel15)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(ha_ckers_orgBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane7, javax.swing.GroupLayout.DEFAULT_SIZE, 171, Short.MAX_VALUE)
                            .addComponent(jLabel17)))
                    .addGroup(ha_ckers_orgBoxLayout.createSequentialGroup()
                        .addComponent(jScrollPane8, javax.swing.GroupLayout.PREFERRED_SIZE, 179, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jLabel18)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane9, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeHa_ckers_orgBoxButton)
                .addGap(12, 12, 12))
        );

        RegexBox.setTitle(resourceMap.getString("RegexBox.title")); // NOI18N
        RegexBox.setName("RegexBox"); // NOI18N

        jLabel31.setText(resourceMap.getString("jLabel31.text")); // NOI18N
        jLabel31.setName("jLabel31"); // NOI18N

        RegularExpression.setText(resourceMap.getString("RegularExpression.text")); // NOI18N
        RegularExpression.setName("RegularExpression"); // NOI18N

        jScrollPane16.setName("jScrollPane16"); // NOI18N

        RegexSubjectString.setColumns(20);
        RegexSubjectString.setRows(5);
        RegexSubjectString.setText(resourceMap.getString("RegexSubjectString.text")); // NOI18N
        RegexSubjectString.setName("RegexSubjectString"); // NOI18N
        jScrollPane16.setViewportView(RegexSubjectString);

        TestRegexMatchButton.setText(resourceMap.getString("TestRegexMatchButton.text")); // NOI18N
        TestRegexMatchButton.setName("TestRegexMatchButton"); // NOI18N
        TestRegexMatchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                TestRegexMatchButtonActionPerformed(evt);
            }
        });

        jLabel35.setText(resourceMap.getString("jLabel35.text")); // NOI18N
        jLabel35.setName("jLabel35"); // NOI18N

        RegexMatchTrueFalse.setEditable(false);
        RegexMatchTrueFalse.setName("RegexMatchTrueFalse"); // NOI18N

        CaseSensitiveCB.setText(resourceMap.getString("CaseSensitiveCB.text")); // NOI18N
        CaseSensitiveCB.setName("CaseSensitiveCB"); // NOI18N

        ReadFileRegexButton.setText(resourceMap.getString("ReadFileRegexButton.text")); // NOI18N
        ReadFileRegexButton.setName("ReadFileRegexButton"); // NOI18N
        ReadFileRegexButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ReadFileRegexButtonActionPerformed(evt);
            }
        });

        RegexFilePath.setText(resourceMap.getString("RegexFilePath.text")); // NOI18N
        RegexFilePath.setName("RegexFilePath"); // NOI18N

        RegexFileName.setText(resourceMap.getString("RegexFileName.text")); // NOI18N
        RegexFileName.setName("RegexFileName"); // NOI18N

        jScrollPane18.setName("jScrollPane18"); // NOI18N

        RegexResultTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        RegexResultTable.setName("RegexResultTable"); // NOI18N
        RegexResultTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                RegexResultTableMouseClicked(evt);
            }
        });
        jScrollPane18.setViewportView(RegexResultTable);

        closeRegexBoxButton.setMnemonic('C');
        closeRegexBoxButton.setText(resourceMap.getString("closeRegexBoxButton.text")); // NOI18N
        closeRegexBoxButton.setName("closeRegexBoxButton"); // NOI18N
        closeRegexBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeRegexBoxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout RegexBoxLayout = new javax.swing.GroupLayout(RegexBox.getContentPane());
        RegexBox.getContentPane().setLayout(RegexBoxLayout);
        RegexBoxLayout.setHorizontalGroup(
            RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegexBoxLayout.createSequentialGroup()
                .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane16, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                    .addGroup(RegexBoxLayout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel31)
                            .addComponent(ReadFileRegexButton))
                        .addGap(12, 12, 12)
                        .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(RegularExpression, javax.swing.GroupLayout.DEFAULT_SIZE, 794, Short.MAX_VALUE)
                            .addGroup(RegexBoxLayout.createSequentialGroup()
                                .addComponent(RegexFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, 407, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 187, Short.MAX_VALUE)
                                .addComponent(RegexFileName, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(RegexBoxLayout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(CaseSensitiveCB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(TestRegexMatchButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel35)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(RegexMatchTrueFalse, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane18, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 930, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, RegexBoxLayout.createSequentialGroup()
                        .addContainerGap(883, Short.MAX_VALUE)
                        .addComponent(closeRegexBoxButton)))
                .addContainerGap())
        );
        RegexBoxLayout.setVerticalGroup(
            RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(RegexBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel31)
                    .addComponent(RegularExpression, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(ReadFileRegexButton)
                    .addComponent(RegexFilePath, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(RegexFileName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane16, javax.swing.GroupLayout.DEFAULT_SIZE, 120, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(RegexBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(TestRegexMatchButton)
                    .addComponent(jLabel35)
                    .addComponent(RegexMatchTrueFalse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CaseSensitiveCB))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane18, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(closeRegexBoxButton)
                .addContainerGap())
        );

        Encode_DecodeBox.setTitle(resourceMap.getString("Encode_DecodeBox.title")); // NOI18N
        Encode_DecodeBox.setName("Encode_DecodeBox"); // NOI18N

        jLabel12.setText(resourceMap.getString("jLabel12.text")); // NOI18N
        jLabel12.setName("jLabel12"); // NOI18N

        jLabel29.setText(resourceMap.getString("jLabel29.text")); // NOI18N
        jLabel29.setName("jLabel29"); // NOI18N

        jLabel28.setText(resourceMap.getString("jLabel28.text")); // NOI18N
        jLabel28.setName("jLabel28"); // NOI18N

        Delimiter.setName("Delimiter"); // NOI18N

        jLabel13.setText(resourceMap.getString("jLabel13.text")); // NOI18N
        jLabel13.setName("jLabel13"); // NOI18N

        EncodeButton.setText(resourceMap.getString("EncodeButton.text")); // NOI18N
        EncodeButton.setName("EncodeButton"); // NOI18N
        EncodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                EncodeButtonActionPerformed(evt);
            }
        });

        DecodeButton.setText(resourceMap.getString("DecodeButton.text")); // NOI18N
        DecodeButton.setName("DecodeButton"); // NOI18N
        DecodeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DecodeButtonActionPerformed(evt);
            }
        });

        RadioButtonText.setSelected(true);
        RadioButtonText.setText(resourceMap.getString("RadioButtonText.text")); // NOI18N
        RadioButtonText.setName("RadioButtonText"); // NOI18N

        jRadioButtonHex.setText(resourceMap.getString("jRadioButtonHex.text")); // NOI18N
        jRadioButtonHex.setName("jRadioButtonHex"); // NOI18N

        MessageText.setEditable(false);
        MessageText.setFocusable(false);
        MessageText.setName("MessageText"); // NOI18N

        jScrollPane4.setName("jScrollPane4"); // NOI18N

        PlainText.setColumns(20);
        PlainText.setRows(5);
        PlainText.setName("PlainText"); // NOI18N
        jScrollPane4.setViewportView(PlainText);

        jScrollPane5.setName("jScrollPane5"); // NOI18N

        EncodedText.setColumns(20);
        EncodedText.setRows(5);
        EncodedText.setName("EncodedText"); // NOI18N
        jScrollPane5.setViewportView(EncodedText);

        jScrollPane6.setName("jScrollPane6"); // NOI18N

        EncodeMethod.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Base 64", "Hex", "HTTP", "HTTP (full)", "Unicode", "HTML (simple)", "MD5", "SHA1" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        EncodeMethod.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        EncodeMethod.setName("EncodeMethod"); // NOI18N
        jScrollPane6.setViewportView(EncodeMethod);

        closeEncode_DecodeBoxButton.setMnemonic('C');
        closeEncode_DecodeBoxButton.setText(resourceMap.getString("closeEncode_DecodeBoxButton.text")); // NOI18N
        closeEncode_DecodeBoxButton.setName("closeEncode_DecodeBoxButton"); // NOI18N
        closeEncode_DecodeBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeEncode_DecodeBoxButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout Encode_DecodeBoxLayout = new javax.swing.GroupLayout(Encode_DecodeBox.getContentPane());
        Encode_DecodeBox.getContentPane().setLayout(Encode_DecodeBoxLayout);
        Encode_DecodeBoxLayout.setHorizontalGroup(
            Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                        .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                                    .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                                            .addComponent(jLabel13)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                            .addComponent(Delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addComponent(RadioButtonText))
                                    .addGap(12, 12, 12))
                                .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                                    .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel12)
                                        .addComponent(jRadioButtonHex)
                                        .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                                            .addComponent(EncodeButton)
                                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                            .addComponent(DecodeButton)))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)))
                            .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 160, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)
                            .addComponent(jLabel28)
                            .addComponent(jLabel29)
                            .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 841, Short.MAX_VALUE)))
                    .addComponent(MessageText, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 1007, Short.MAX_VALUE)
                    .addComponent(closeEncode_DecodeBoxButton, javax.swing.GroupLayout.Alignment.TRAILING))
                .addContainerGap())
        );
        Encode_DecodeBoxLayout.setVerticalGroup(
            Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel12)
                    .addComponent(jLabel29))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane6)
                    .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 181, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel28)
                .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(Encode_DecodeBoxLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, Encode_DecodeBoxLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(Delimiter, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(Encode_DecodeBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(EncodeButton)
                            .addComponent(DecodeButton))
                        .addGap(9, 9, 9)
                        .addComponent(RadioButtonText)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonHex)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(MessageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(closeEncode_DecodeBoxButton))
        );

        JavaDBSQLBox.setTitle(resourceMap.getString("JavaDBSQLBox.title")); // NOI18N
        JavaDBSQLBox.setModal(true);
        JavaDBSQLBox.setName("JavaDBSQLBox"); // NOI18N
        JavaDBSQLBox.setResizable(false);

        closeJavaDBSQLBoxButton.setMnemonic('C');
        closeJavaDBSQLBoxButton.setText(resourceMap.getString("closeJavaDBSQLBoxButton.text")); // NOI18N
        closeJavaDBSQLBoxButton.setName("closeJavaDBSQLBoxButton"); // NOI18N
        closeJavaDBSQLBoxButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeJavaDBSQLBoxButtonActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel1.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel1.border.titleFont"))); // NOI18N
        jPanel1.setName("jPanel1"); // NOI18N

        jScrollPane3.setName("jScrollPane3"); // NOI18N

        JavaDBSQLResult.setColumns(20);
        JavaDBSQLResult.setRows(5);
        JavaDBSQLResult.setName("JavaDBSQLResult"); // NOI18N
        jScrollPane3.setViewportView(JavaDBSQLResult);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 885, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(null, resourceMap.getString("jPanel2.border.title"), javax.swing.border.TitledBorder.DEFAULT_JUSTIFICATION, javax.swing.border.TitledBorder.DEFAULT_POSITION, resourceMap.getFont("jPanel2.border.titleFont"))); // NOI18N
        jPanel2.setName("jPanel2"); // NOI18N

        jScrollPane19.setName("jScrollPane19"); // NOI18N

        JavaDBSQLCommand.setColumns(20);
        JavaDBSQLCommand.setRows(5);
        JavaDBSQLCommand.setName("JavaDBSQLCommand"); // NOI18N
        jScrollPane19.setViewportView(JavaDBSQLCommand);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 885, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jScrollPane19, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        ExecuteJavaDBSQLCommandButton.setText(resourceMap.getString("ExecuteJavaDBSQLCommandButton.text")); // NOI18N
        ExecuteJavaDBSQLCommandButton.setName("ExecuteJavaDBSQLCommandButton"); // NOI18N
        ExecuteJavaDBSQLCommandButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExecuteJavaDBSQLCommandButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout JavaDBSQLBoxLayout = new javax.swing.GroupLayout(JavaDBSQLBox.getContentPane());
        JavaDBSQLBox.getContentPane().setLayout(JavaDBSQLBoxLayout);
        JavaDBSQLBoxLayout.setHorizontalGroup(
            JavaDBSQLBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JavaDBSQLBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(JavaDBSQLBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(closeJavaDBSQLBoxButton)
                    .addComponent(ExecuteJavaDBSQLCommandButton, javax.swing.GroupLayout.Alignment.LEADING))
                .addContainerGap())
        );
        JavaDBSQLBoxLayout.setVerticalGroup(
            JavaDBSQLBoxLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, JavaDBSQLBoxLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(ExecuteJavaDBSQLCommandButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeJavaDBSQLBoxButton)
                .addContainerGap())
        );

        setComponent(mainPanel);
        setMenuBar(menuBar);
        setStatusBar(statusPanel);
    }// </editor-fold>//GEN-END:initComponents

    /**
     * An example action method showing how to create asynchronous tasks
     * (running on background) and how to show their progress.
     */
    @Action
    public Task StartDatabase() {
        return new StartDatabaseTask(getApplication());
    }

    public class StartDatabaseTask extends Task {

        StartDatabaseTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected Void doInBackground() {
            try {
                setProgress(0, 0, 4);
                setMessage("Starting...");

                JavaDBAccess.StartDatabase();
                System.out.println("Loaded the appropriate driver.");
                setProgress(4, 0, 4);
                setMessage("Loaded the appropriate driver.");
            } catch (Throwable e) {
                System.out.println("exception thrown:");
                setProgress(4, 0, 4);
                setMessage(e.toString());

                if (e instanceof SQLException) {
                    JavaDBAccess.printSQLError((SQLException) e);
                } else {
                    e.printStackTrace();
                }
            }
            return null;
        }

        @Override
        protected void finished() {
            setMessage("Done Starting Up the Database.");
//            setSaveNeeded(false);
        }
    }

    /**
     * An example action method showing how to create asynchronous tasks
     * (running on background) and how to show their progress.
     */
    @Action
    public Task StopDatabase() {
        return new StopDatabaseTask(getApplication());
    }

    private class StopDatabaseTask extends Task {

        StopDatabaseTask(org.jdesktop.application.Application app) {
            super(app);
        }

        @SuppressWarnings("unchecked")
        @Override
        protected Void doInBackground() {
            try {
                setProgress(0, 0, 4);
                setMessage("Starting...");

                boolean gotSQLExc = false;
                gotSQLExc = JavaDBAccess.StopDatabase();
                if (!gotSQLExc) {
                    setMessage("Database did not shut down normally");
                    System.out.println("Database did not shut down normally");
                } else {
                    setMessage("Database shut down normally");
                    System.out.println("Database shut down normally");
                }

                setProgress(4, 0, 4);

            } catch (Throwable e) {
                System.out.println("exception thrown:");

                if (e instanceof SQLException) {
                    JavaDBAccess.printSQLError((SQLException) e);
                } else {
                    e.printStackTrace();
                }
            }
            return null;
        }

        @Override
        protected void finished() {
            setMessage("Done Shutting Down the Databaase.");
//            setSaveNeeded(false);
        }
    }

    @Action
    public void showNotesBox() {
        if (NotesBox == null) {
            NotesBox = new JDialog(new JFrame());
//            NotesBox.setLocationRelativeTo(mainFrame);
        }
        NotesBox.pack();
        NotesBox.setLocationRelativeTo(null); //to be centered on the screen

        NotesBox.setVisible(true);
//        VulnerabilityInjectorApp.getApplication().show(NotesBox);
    }

    @Action
    public void showha_ckers_orgBox() {
        if (ha_ckers_orgBox == null) {
            ha_ckers_orgBox = new JDialog(new JFrame());
//            ha_ckers_orgBox.setLocationRelativeTo(mainFrame); //to be centered on the Application
        }
        ha_ckers_orgBox.pack();
        ha_ckers_orgBox.setLocationRelativeTo(null); //to be centered on the screen

        ha_ckers_orgBox.setVisible(true);
//        VulnerabilityInjectorApp.getApplication().show(ha_ckers_orgBox);
    }

    @Action
    public void showRegexBox() {
        if (RegexBox == null) {
            RegexBox = new JDialog(new JFrame());
//            RegexBox.setLocationRelativeTo(mainFrame);
        }
        RegexBox.pack();
        RegexBox.setLocationRelativeTo(null); //to be centered on the screen

        RegexBox.setVisible(true);
//        VulnerabilityInjectorApp.getApplication().show(RegexBox);
    }

    @Action
    public void showEncode_DecodeBox() {
        if (Encode_DecodeBox == null) {
            Encode_DecodeBox = new JDialog(new JFrame());
//            Encode_DecodeBox.setLocationRelativeTo(mainFrame);
        }
        Encode_DecodeBox.pack();
        Encode_DecodeBox.setLocationRelativeTo(null); //to be centered on the screen

        Encode_DecodeBox.setVisible(true);
//        VulnerabilityInjectorApp.getApplication().show(Encode_DecodeBox);
    }

    @Action
    public void showJavaDBSQL() {
        if (JavaDBSQLBox == null) {
            JavaDBSQLBox = new JDialog(new JFrame());
//            JavaDBSQLBox.setLocationRelativeTo(mainFrame);
        }
        JavaDBSQLBox.pack();
        JavaDBSQLBox.setLocationRelativeTo(null); //to be centered on the screen

        JavaDBSQLBox.setVisible(true);
//        VulnerabilityInjectorApp.getApplication().show(NotesBox);
    }
    // Exit this program.

    @Action
    public void actionExit() {
        int n;

        n = JOptionPane.showConfirmDialog(new JFrame(), "Are you sure you want to exit?", "Attention!", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
        if (n == 0) {
            System.exit(0);
        }
    }

private void CreateDatabaseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDatabaseButtonActionPerformed
    JavaDBAccess.CreateDatabase();
    try {
        TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));
    } catch (Throwable e) {
    }
}//GEN-LAST:event_CreateDatabaseButtonActionPerformed

private void AddPHPFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddPHPFileButtonActionPerformed

    PHPFile.AddPHPFileToDatabase(JavaDBAccess, WebApplicationHOST.getText(), WebApplicationURL.getText(), Integer.parseInt(WebApplicationPORT.getText()), WebApplicationFileURL.getText());
    TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));
}//GEN-LAST:event_AddPHPFileButtonActionPerformed

private void DeletePHPFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletePHPFileButtonActionPerformed
    PHPFile.DeletePHPFileFromDatabase(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
    TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));
}//GEN-LAST:event_DeletePHPFileButtonActionPerformed

private void ViewPHPFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewPHPFileButtonActionPerformed
    PHPFileTextArea.setText(PHPFile.ViewPHPFileFromDatabase(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString()));
}//GEN-LAST:event_ViewPHPFileButtonActionPerformed

private void AnalyzePHPFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzePHPFileButtonActionPerformed
    PHPFile.AnalyzePHPFile(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
}//GEN-LAST:event_AnalyzePHPFileButtonActionPerformed

private void VulnerabilityInjectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_VulnerabilityInjectionButtonActionPerformed
    PHPFileTextArea.setText(VulnInject.VulnerabilityInjection(JavaDBAccess, PHPFile, TargetPHPFileSelectedComboBox.getSelectedItem().toString(),AffectSQLStaticCk.isSelected(),AffectSQLDynamicCk.isSelected()));
}//GEN-LAST:event_VulnerabilityInjectionButtonActionPerformed

private void ViewResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewResultsButtonActionPerformed
    VulnerabilityInjectionTextArea.setText(JavaDBAccess.ExecuteQuery("SELECT RESULTS.* FROM RESULTS,TARGET_PHP_FILES WHERE RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH='" + TargetPHPFileSelectedComboBox.getSelectedItem().toString() + "'"));
}//GEN-LAST:event_ViewResultsButtonActionPerformed

private void DeleteResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteResultsButtonActionPerformed
    JavaDBAccess.DeleteResults(TargetPHPFileSelectedComboBox.getSelectedItem().toString());
}//GEN-LAST:event_DeleteResultsButtonActionPerformed

private void CreateDiffFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateDiffFilesButtonActionPerformed
    PHPFileTextArea.setText(VulnInject.CreateDiffFiles(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString()));
}//GEN-LAST:event_CreateDiffFilesButtonActionPerformed

private void DeleteDiffButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteDiffButtonActionPerformed
    VulnInject.DeleteDiffFiles(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
}//GEN-LAST:event_DeleteDiffButtonActionPerformed

private void CreateVulnerabilityFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CreateVulnerabilityFilesButtonActionPerformed
    VulnInject.CreateVulnerabilityFiles(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
}//GEN-LAST:event_CreateVulnerabilityFilesButtonActionPerformed

private void DeleteVulnerabilityFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteVulnerabilityFilesButtonActionPerformed
    VulnInject.DeleteVulnerabilityFiles(JavaDBAccess, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
}//GEN-LAST:event_DeleteVulnerabilityFilesButtonActionPerformed

//------------------------------------------------------------------------------
//Start ToolEncodeDecode Operations
//------------------------------------------------------------------------------
private void EncodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_EncodeButtonActionPerformed
        String EncodeMethodText;
        ToolEncodeDecode encodeDecode = new ToolEncodeDecode();

        EncodeMethodText = EncodeMethod.getSelectedValue().toString();
        EncodedText.setText(encodeDecode.Encode(PlainText.getText(), false, "", EncodeMethodText));
}//GEN-LAST:event_EncodeButtonActionPerformed

private void DecodeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DecodeButtonActionPerformed
    String DecodeMethodText;
    ToolEncodeDecode encodeDecode = new ToolEncodeDecode();

    DecodeMethodText = EncodeMethod.getSelectedValue().toString();
    PlainText.setText(encodeDecode.Decode(EncodedText.getText(), false, "", DecodeMethodText));
}//GEN-LAST:event_DecodeButtonActionPerformed

private void closeEncode_DecodeBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeEncode_DecodeBoxButtonActionPerformed
    Encode_DecodeBox.setVisible(false);
}//GEN-LAST:event_closeEncode_DecodeBoxButtonActionPerformed

//------------------------------------------------------------------------------
//End ToolEncodeDecode Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start ToolRegex Operations
//------------------------------------------------------------------------------
private void ReadFileRegexButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadFileRegexButtonActionPerformed
        Regex.ReadFile(RegexFilePath, RegexFileName, RegexSubjectString);
}//GEN-LAST:event_ReadFileRegexButtonActionPerformed

private void TestRegexMatchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_TestRegexMatchButtonActionPerformed
    Regex.TestRegexMatch(RegularExpression, CaseSensitiveCB, RegexMatchTrueFalse, RegexSubjectString);
}//GEN-LAST:event_TestRegexMatchButtonActionPerformed

private void RegexResultTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_RegexResultTableMouseClicked
    Regex.RegexResult(RegexResultTable, RegexSubjectString);
}//GEN-LAST:event_RegexResultTableMouseClicked

private void closeRegexBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeRegexBoxButtonActionPerformed
    RegexBox.setVisible(false);
}//GEN-LAST:event_closeRegexBoxButtonActionPerformed

//------------------------------------------------------------------------------
//End ToolRegex Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start ToolHackersOrg Operations
//------------------------------------------------------------------------------
private void OpenVulnerabilityXMLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_OpenVulnerabilityXMLButtonActionPerformed
        HackersOrg.OpenVulnerabilityXML(XMLFileName);

}//GEN-LAST:event_OpenVulnerabilityXMLButtonActionPerformed

    private void ProcessVulnerabilityXMLButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ProcessVulnerabilityXMLButtonActionPerformed
        HackersOrg.ProcessVulnerabilityXML(XMLFileName, XSSAttackName, XSSAttackCode, XSSAttackDesc, XSSAttackLabel, XSSAttackBrowser, XSSAttackNames);
}//GEN-LAST:event_ProcessVulnerabilityXMLButtonActionPerformed

private void XSSAttackNamesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_XSSAttackNamesValueChanged
    HackersOrg.XSSAttackNamesValueChanged(XMLFileName, XSSAttackName, XSSAttackCode, XSSAttackDesc, XSSAttackLabel, XSSAttackBrowser, XSSAttackNames);
}//GEN-LAST:event_XSSAttackNamesValueChanged

private void closeHa_ckers_orgBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeHa_ckers_orgBoxButtonActionPerformed
    ha_ckers_orgBox.setVisible(false);
}//GEN-LAST:event_closeHa_ckers_orgBoxButtonActionPerformed

//------------------------------------------------------------------------------
//End ToolHackersOrg Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start ToolJavaDBSQL Operations
//------------------------------------------------------------------------------
private void closeJavaDBSQLBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeJavaDBSQLBoxButtonActionPerformed
        JavaDBSQLBox.setVisible(false);
}//GEN-LAST:event_closeJavaDBSQLBoxButtonActionPerformed

private void ExecuteJavaDBSQLCommandButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExecuteJavaDBSQLCommandButtonActionPerformed
    JavaDBSQLResult.setText(JavaDBAccess.ExecuteQuery(JavaDBSQLCommand.getText()));
}//GEN-LAST:event_ExecuteJavaDBSQLCommandButtonActionPerformed

//------------------------------------------------------------------------------
//End ToolJavaDBSQL Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start ToolNotes Operations
//------------------------------------------------------------------------------
private void closeNotesBoxButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeNotesBoxButtonActionPerformed
        NotesBox.setVisible(false);
}//GEN-LAST:event_closeNotesBoxButtonActionPerformed
//------------------------------------------------------------------------------
//End ToolNotes Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start MySQL Listener Operations
//------------------------------------------------------------------------------
private void DeleteMySQLListenerDBDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMySQLListenerDBDataButtonActionPerformed
        MySQLPacket.DeleteMySQLListenerDBData(JavaDBAccess);
}//GEN-LAST:event_DeleteMySQLListenerDBDataButtonActionPerformed

private void ViewMySQLPacketsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ViewMySQLPacketsButtonActionPerformed
    MySQLListenerTextArea.setText(MySQLPacket.ViewMySQLPackets(JavaDBAccess));
}//GEN-LAST:event_ViewMySQLPacketsButtonActionPerformed

private void StartMySQLListenerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartMySQLListenerButtonActionPerformed
    StartMySQLListener(ModeComboBox.getSelectedItem().toString());
}//GEN-LAST:event_StartMySQLListenerButtonActionPerformed

    private void StartMySQLListener(String MODE) {
        int port = -1;
        MySQLListener MySQLList;

        try {
            // get the command-line parameters
            port = Integer.parseInt(MySQLListenerProxyPort.getText());
        } catch (NumberFormatException e) {
            port = -1;
        }
        if (port < 0 | port > 63335) {
            port = 18000;
        }
        if (usingMySQLListener == false) {
            try {
                MySQLListenerResult = new java.util.Vector();
                // create and start the jProxy thread, using a 20 second timeout
                // value to keep the threads from piling up too much
                System.err.println("  **  Starting jProxy on port " + port + ". Press CTRL-C to end.  **\n");
                MySQLListenerResult.addElement(MySQLList = new MySQLListener(port, DBprops, MODE));
                MySQLList.start();
                usingMySQLListener = true;
            } catch (Exception e) {
                usingMySQLListener = false;
                System.err.println(e.getMessage());
                System.exit(1);
            }
        }
    }

private void StopMySQLListenerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopMySQLListenerButtonActionPerformed
    StopMySQLListener();
}//GEN-LAST:event_StopMySQLListenerButtonActionPerformed

    private void StopMySQLListener() {
        Thread t = null;

//    System.out.println(HTTPProxyResult.capacity());
//    System.out.println(HTTPProxyResult.size());
//
        if (usingMySQLListener == true) {
            while (!MySQLListenerResult.isEmpty()) {
                t = (Thread) MySQLListenerResult.get(0);
                t.interrupt();
                MySQLListenerResult.remove(0);
            }
            usingMySQLListener = false;
            MySQLPacket.AnalyzeMySQLPackets(JavaDBAccess);
        }
//    System.out.println(HTTPProxyResult.size());
//    System.out.println(HTTPProxyResult.capacity());

    }

//------------------------------------------------------------------------------
//End MySQL Listener Operations
//------------------------------------------------------------------------------

//------------------------------------------------------------------------------
//Start Proxy Operations
//------------------------------------------------------------------------------
private void StartHTTPProxyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartHTTPProxyButtonActionPerformed
        StartHTTPProxy(ModeComboBox.getSelectedItem().toString());
}//GEN-LAST:event_StartHTTPProxyButtonActionPerformed

    private void StartHTTPProxy(String MODE) {
        int port = -1;
        String fwdProxyServer = "";
        int fwdProxyPort = 0;
        jProxy jp;

        try {
            // get the command-line parameters
            port = Integer.parseInt(HTTPProxySourcePort.getText());
        } catch (NumberFormatException e) {
            port = -1;
        }
        if (port < 0 | port > 63335) {
            port = 8080;
        }
        if (usingProxy == false) {
            try {
                HTTPProxyResult = new java.util.Vector();
                // create and start the jProxy thread, using a 20 second timeout
                // value to keep the threads from piling up too much
                System.err.println("  **  Starting jProxy on port " + port + ". Press CTRL-C to end.  **\n");
                HTTPProxyResult.addElement(jp = new jProxy(port, fwdProxyServer, fwdProxyPort, 20, DBprops, MODE));
                jp.setDebug(1, System.out);		// or set the debug level to 2 for tons of output

                jp.start();
                usingProxy = true;
            } catch (Exception e) {
                usingProxy = false;
                System.err.println(e.getMessage());
                System.exit(1);
            }
        }
    }

private void StopHTTPProxyButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopHTTPProxyButtonActionPerformed
    StopHTTPProxy();
}//GEN-LAST:event_StopHTTPProxyButtonActionPerformed

    private void StopHTTPProxy() {
        Thread t = null;

//    System.out.println(HTTPProxyResult.capacity());
//    System.out.println(HTTPProxyResult.size());
//
        if (usingProxy == true) {
            while (!HTTPProxyResult.isEmpty()) {
                t = (Thread) HTTPProxyResult.get(0);
                t.interrupt();
                HTTPProxyResult.remove(0);
            }
            usingProxy = false;
        }
//    System.out.println(HTTPProxyResult.size());
//    System.out.println(HTTPProxyResult.capacity());
    }

private void DeleteHTTPProxyDBDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteHTTPProxyDBDataButtonActionPerformed
    Connection conn = null;
    PreparedStatement ps = null;
    MySQLPacket.DeleteMySQLListenerDBData(JavaDBAccess);
    try {
        if ((conn = this.JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
        ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES");
        ps.executeUpdate();
        ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS");
        ps.executeUpdate();
        ps.close();
        conn.commit();
        conn.close();
    } catch (Throwable e) {
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_DeleteHTTPProxyDBDataButtonActionPerformed
//------------------------------------------------------------------------------
//End Proxy Operations
//------------------------------------------------------------------------------
//------------------------------------------------------------------------------
//Start Attack Operations
//------------------------------------------------------------------------------
private void MaxIDButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MaxIDButtonActionPerformed
        jTextField1.setText(String.valueOf(Attack.getMaxID(JavaDBAccess)));
}//GEN-LAST:event_MaxIDButtonActionPerformed

private void ReadRequestButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ReadRequestButtonActionPerformed
    SQLInjectionAttackTextArea.setText(Attack.getRequestText(JavaDBAccess, Integer.parseInt(jTextField1.getText())));
    jTextField2.setText(Attack.getRequestHost(JavaDBAccess, Integer.parseInt(jTextField1.getText())));
}//GEN-LAST:event_ReadRequestButtonActionPerformed

private void RefreshPreviewButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshPreviewButtonActionPerformed
    try {
        displayPreviewPane.setContentType("text/html");
        displayPreviewPane.setEditable(false);
        Document doc = (Document) displayPreviewPane.getDocument();
        doc.putProperty("IgnoreCharsetDirective", new Boolean(true));
        displayPreviewPane.setText(SQLInjectionAttackTextArea1.getText());
    } catch (Exception e) {
        System.out.println("exception thrown:" + e);
    }

}//GEN-LAST:event_RefreshPreviewButtonActionPerformed

private void SendHTTPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendHTTPButtonActionPerformed
    String output = "";
    String header = "";
    String html = "";
    int pos = -1;

    try {
        output = Attack.issueRequest(SQLInjectionAttackTextArea.getText(), jTextField2.getText(), Integer.parseInt(jTextField3.getText()));
    } catch (Exception e) {
        output = e.toString();
    }
    if (!output.equals("")) {
        pos = output.indexOf("\r\n\r\n");
        if (pos > 0) {
            html = output.substring(pos + 4);
            header = output.substring(0, pos + 4);
        }
    }
    SQLInjectionAttackTextArea2.setText(header);
    SQLInjectionAttackTextArea1.setText(html);
    try {
        displayPreviewPane.setContentType("text/html");
        displayPreviewPane.setEditable(false);
//    displayPreviewPane.setPage("http://192.168.1.90/html/phd-mysql/index.php");
        Document doc = (Document) displayPreviewPane.getDocument();
        doc.putProperty("IgnoreCharsetDirective", new Boolean(true));
        displayPreviewPane.setText(html);
    } catch (Exception e) {
        System.out.println("exception thrown:" + e);
    }
}//GEN-LAST:event_SendHTTPButtonActionPerformed

private void PayloadHTTPSelectedComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_PayloadHTTPSelectedComboBoxActionPerformed
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    try {
        if ((conn = this.JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
        ps = conn.prepareStatement("SELECT HTTP_REQUEST_HEADER||HTTP_REQUEST_POST,HTTP_REQUEST_HOST,HTTP_RESPONSE_HEADER||HTTP_RESPONSE_CONTENT FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE ID=?");
        ps.setInt(1, Integer.parseInt(PayloadHTTPSelectedComboBox.getSelectedItem().toString()));
        rs = ps.executeQuery(); // get the HTTPProxyResult

        while (rs.next()) {
            HTTPRequestTextArea.setText(rs.getString(1));
            SQLInjectionAttackTextArea.setText(rs.getString(1));
            jTextField2.setText(rs.getString(2));
            HTTPResponseTextArea.setText(rs.getString(3));
        }
        rs.close();
        ps.close();
        conn.commit();
        conn.close();
    } catch (Throwable e) {
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_PayloadHTTPSelectedComboBoxActionPerformed

private void ApplyPayloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplyPayloadButtonActionPerformed
    int InitialPosition = 0, FinalPosition = 0, FinalPosition1 = 0, FinalPosition2 = 0;
    String TargetVariable = "", TargetHTTPRequest = "", EncodedPayload = "";
    ToolEncodeDecode encodeDecode = new ToolEncodeDecode();

    TargetVariable = SQLVariableSelectedComboBox.getSelectedItem().toString().substring(1);//Remove the $ at the begining of the variable name

    EncodedPayload = PayloadSelectedComboBox.getSelectedItem().toString();

    EncodedPayload = encodeDecode.Encode(EncodedPayload, false, "", "HTTP");


    InitialPosition = HTTPRequestTextArea.getText().indexOf(TargetVariable);
    FinalPosition1 = HTTPRequestTextArea.getText().indexOf(" ", InitialPosition);
    FinalPosition2 = HTTPRequestTextArea.getText().indexOf("&", InitialPosition);
    if (FinalPosition1 > FinalPosition2) {
        FinalPosition = FinalPosition2;
    } else {
        FinalPosition = FinalPosition1;
    }
    if (FinalPosition < 0) {//it is the last POST variable

        TargetHTTPRequest = HTTPRequestTextArea.getText() + EncodedPayload;
    } else {
        TargetHTTPRequest = HTTPRequestTextArea.getText().substring(0, FinalPosition) + EncodedPayload + HTTPRequestTextArea.getText().substring(FinalPosition);
    }
    HTTPRequestTextArea.setText(TargetHTTPRequest);
    SQLInjectionAttackTextArea.setText(TargetHTTPRequest);
}//GEN-LAST:event_ApplyPayloadButtonActionPerformed

private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
// Go back to the page viewed before the current page.
    URL currentUrl = displayEditorPane.getPage();
    int pageIndex = pageList.indexOf(currentUrl.toString());
    try {
        showPage(new URL((String) pageList.get(pageIndex - 1)), false);
    } catch (Exception e) {
    }
}//GEN-LAST:event_backButtonActionPerformed

private void forwardButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_forwardButtonActionPerformed
    URL currentUrl = displayEditorPane.getPage();
    int pageIndex = pageList.indexOf(currentUrl.toString());
    try {
        showPage(new URL((String) pageList.get(pageIndex + 1)), false);
    } catch (Exception e) {
    }
}//GEN-LAST:event_forwardButtonActionPerformed

private void goButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_goButtonActionPerformed
// Load and show the page specified in the location packet field.
    URL verifiedUrl = verifyUrl(locationTextField.getText());
    if (verifiedUrl != null) {
        showPage(verifiedUrl, true);
    } else {
        showError("Invalid URL");
    }
}//GEN-LAST:event_goButtonActionPerformed

private void MySQL2HTTPButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_MySQL2HTTPButtonActionPerformed
    MySQL2HTTP();
}//GEN-LAST:event_MySQL2HTTPButtonActionPerformed

    private void MySQL2HTTP() {
        Connection conn = null;
        Statement s = null;
        PreparedStatement ps_select = null, ps_update = null;
        ResultSet rs_select = null;
        int MYSQL_PROXY_PACKETS_ID = 0, SERVER = 0, TARGET_PHP_FILES_RUNS_FUNCTION = 0, TARGET_PHP_FILES_RUNS_FUNCTION_OLD = 0;
        int counter = 1;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            s = conn.createStatement();
            //Updates the TARGET_PHP_FILES_RUNS_FUNCTION field of the MYSQL_PROXY_PACKETS table, except for the last TARGET_PHP_FILES_RUNS_FUNCTIONS
//            s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M SET TARGET_PHP_FILES_RUNS_FUNCTION=(SELECT P.ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS P WHERE M.PACKET_TIMESTAMP IN ( SELECT PACKET_TIMESTAMP FROM MYSQL_PROXY_PACKETS WHERE PACKET_TIMESTAMP > P.HTTP_REQUEST_TIMESTAMP AND PACKET_TIMESTAMP < ( SELECT MIN(HTTP_REQUEST_TIMESTAMP) FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE HTTP_REQUEST_TIMESTAMP>P.HTTP_REQUEST_TIMESTAMP)))");
            s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M SET TARGET_PHP_FILES_RUNS_FUNCTION=(SELECT P.ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS P WHERE M.PACKET_TIMESTAMP > P.HTTP_REQUEST_TIMESTAMP AND M.PACKET_TIMESTAMP < (SELECT MIN(HTTP_REQUEST_TIMESTAMP) FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE HTTP_REQUEST_TIMESTAMP>P.HTTP_REQUEST_TIMESTAMP)) WHERE TARGET_PHP_FILES_RUNS_FUNCTION IS NULL");
            conn.commit();
            //Updates the TARGET_PHP_FILES_RUNS_FUNCTION field of the MYSQL_PROXY_PACKETS table, just for the case of the last TARGET_PHP_FILES_RUNS_FUNCTIONS
            s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M SET TARGET_PHP_FILES_RUNS_FUNCTION=(SELECT P.ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS P WHERE M.PACKET_TIMESTAMP IN ( SELECT PACKET_TIMESTAMP FROM MYSQL_PROXY_PACKETS WHERE PACKET_TIMESTAMP > P.HTTP_REQUEST_TIMESTAMP AND P.HTTP_REQUEST_TIMESTAMP = ( SELECT MAX(HTTP_REQUEST_TIMESTAMP) FROM TARGET_PHP_FILES_RUNS_FUNCTIONS))) WHERE TARGET_PHP_FILES_RUNS_FUNCTION IS NULL");
            conn.commit();
            s.close();


            ps_select = conn.prepareStatement("SELECT ID,SERVER,TARGET_PHP_FILES_RUNS_FUNCTION FROM MYSQL_PROXY_PACKETS WHERE CLIENT_SERVER='C' ORDER BY TARGET_PHP_FILES_RUNS_FUNCTION,THIS_THREAD_ID");
            rs_select = ps_select.executeQuery();

            counter = 1;
            while (rs_select.next()) {
                MYSQL_PROXY_PACKETS_ID = rs_select.getInt(1);
                SERVER = rs_select.getInt(2);
                TARGET_PHP_FILES_RUNS_FUNCTION = rs_select.getInt(3);
                if (TARGET_PHP_FILES_RUNS_FUNCTION_OLD != TARGET_PHP_FILES_RUNS_FUNCTION) {
                    counter = 1;
                }
                ps_update = conn.prepareStatement("UPDATE MYSQL_PROXY_PACKETS SET HTTP_PACKET_SEQUENCE=? WHERE ID=?");
                ps_update.setInt(1, counter);
                ps_update.setInt(2, MYSQL_PROXY_PACKETS_ID);
                ps_update.executeUpdate();
                counter++;
                ps_update = conn.prepareStatement("UPDATE MYSQL_PROXY_PACKETS SET HTTP_PACKET_SEQUENCE=? WHERE ID=?");
                ps_update.setInt(1, counter);
                ps_update.setInt(2, SERVER);
                ps_update.executeUpdate();
                counter++;

                TARGET_PHP_FILES_RUNS_FUNCTION_OLD = TARGET_PHP_FILES_RUNS_FUNCTION;
            }
            ps_update.close();
            rs_select.close();
            ps_select.close();
            conn.commit();

            conn.close();

        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

private void HostPathButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HostPathButtonActionPerformed
    JFileChooser fc = new JFileChooser();
    if (HostPath.getText().isEmpty()) {
        fc.setCurrentDirectory(new java.io.File("."));
    } else {
        fc.setCurrentDirectory(new java.io.File(HostPath.getText()));
    }
    fc.setDialogTitle("Open the PATH of the HTTP HOST to get its location");
    fc.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
    // disable the "All files" option.
    fc.setAcceptAllFileFilterUsed(false);

    // Show open dialog; this method does not return until the dialog is closed
    if (fc.showOpenDialog(new JFrame()) == JFileChooser.APPROVE_OPTION) {
        HostPath.setText(fc.getSelectedFile().getAbsolutePath().toString());
    }
}//GEN-LAST:event_HostPathButtonActionPerformed

    private void VulnerabilityInjectionAll(Boolean AffectSQLStatic, Boolean AffectSQLDynamic) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        DatabaseAccess JavaDBAccess2 = null;

        try {
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            ps = conn.prepareStatement("SELECT PATH FROM TARGET_PHP_FILES");
            rs = ps.executeQuery();
            while (rs.next()) {
                JavaDBAccess2 = new DatabaseAccess(DBprops);
                VulnInject.VulnerabilityInjection(JavaDBAccess2, PHPFile, rs.getString("PATH"), AffectSQLStatic, AffectSQLDynamic);
                JavaDBAccess2 = null;
            }
            ps.close();
            conn.commit();
            conn.close();
        } catch (Throwable e) {
            InspectionTextArea.setText("Errors deleting DB data!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

private void StaticAnalysisButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StaticAnalysisButtonActionPerformed
    //Performing Static Analyzis of the files used in the HTTP packets
    InspectionTextArea.setText(InspectionTextArea.getText() + "Performing Static Analyzis of the files used in the HTTP packets\n");
    HTTP2WebApplication(HostPath.getText(), "INSPECTION");
    //Performing Vulnerability Injection
    InspectionTextArea.setText(InspectionTextArea.getText() + "Performing Vulnerability Injection\n");
    VulnerabilityInjectionAll(AffectSQLStaticCk.isSelected(), AffectSQLDynamicCk.isSelected());

    //Updating the 'Target PHP File Selected' Combo Box
    InspectionTextArea.setText(InspectionTextArea.getText() + "Updating the 'Target PHP File Selected' Combo Box\n");
    TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));

    InspectionTextArea.setText(InspectionTextArea.getText() + "Processing Complete!\n");
}//GEN-LAST:event_StaticAnalysisButtonActionPerformed

private void DeleteStaticDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteStaticDataButtonActionPerformed
    DeleteStaticData();
}//GEN-LAST:event_DeleteStaticDataButtonActionPerformed

    private void DeleteStaticData() {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            //First we need to delete the Attack data
            DeleteAttackData();

            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            //Reset the link to the HTTP data
            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES SET TARGET_PHP_FILES_VARIABLE=NULL");
            ps.executeUpdate();
            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_RUNS_FUNCTIONS SET TARGET_PHP_FILE=NULL");
            ps.executeUpdate();

            //Delete the values of the Static data
            ps = conn.prepareStatement("DELETE FROM VULNERABILITY_INJECTION_RESULTS");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM VARIABLES_SQL_VARIABLES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_SQL_VARIABLES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_FUNCTIONS");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_VARIABLES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_INCLUDES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_WEB_APPLICATIONS");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();

            //Updating the 'Target PHP File Selected' Combo Box
            TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));

            InspectionTextArea.setText("Static data deleted!");
        } catch (Throwable e) {
            InspectionTextArea.setText("Errors deleting Static data!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

private void DeleteAttackDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAttackDataButtonActionPerformed
    DeleteAttackData();
}//GEN-LAST:event_DeleteAttackDataButtonActionPerformed

private void DeleteHTTPDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteHTTPDataButtonActionPerformed
    DeleteHTTPData();
}//GEN-LAST:event_DeleteHTTPDataButtonActionPerformed

private void DeleteMySQLDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteMySQLDataButtonActionPerformed
    DeleteMySQLData();
}//GEN-LAST:event_DeleteMySQLDataButtonActionPerformed

private void DeleteAllDBDataButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeleteAllDBDataButtonActionPerformed
    DeleteAttackData();
}//GEN-LAST:event_DeleteAllDBDataButtonActionPerformed

private void AnalyzeMySQLPacketsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AnalyzeMySQLPacketsButtonActionPerformed
    MySQLPacket.AnalyzeMySQLPackets(JavaDBAccess);
}//GEN-LAST:event_AnalyzeMySQLPacketsButtonActionPerformed

private void ParsePHPFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ParsePHPFileButtonActionPerformed
    PreparedStatement ps = null;
    ResultSet rs = null;
    Connection conn = null;
    int TARGET_PHP_FILES_ID = 0;

    try {
        if ((conn = JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        ps = conn.prepareStatement("SELECT ID,TEXT FROM TARGET_PHP_FILES");
        rs = ps.executeQuery();

        while (rs.next()) {
            TARGET_PHP_FILES_ID = rs.getInt(1);
            JavaDBAccess.CleanPHPFile(TARGET_PHP_FILES_ID, JavaDBAccess);
        }
        rs.close();
        ps.close();
        conn.commit();
        conn.close();

    } catch (Throwable e) {
        System.out.println("Errors in ParsePHPFile!");
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_ParsePHPFileButtonActionPerformed

private void StartInspectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartInspectionButtonActionPerformed
    String Message = "";
    int n = 0;
    if (!StartedInspection) {
        Message = "The MySQL Proxy must be running before clicking on the Start Inspection button (runMySQLProxy.sh)!\n";
        Message += "The Web Browser must have the proxy server parameter configurated\n";
        Message += "\nAre you sure you want to START the Inspection Stage?";
        n = JOptionPane.showConfirmDialog(new JFrame(), Message, "Attention!", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {//Start Inspection

            StartedInspection = true;
            InspectionLabel.setText("An Inspection is beeing performed");
            System.out.println("An Inspection is beeing performed");
            InspectionLabel.setForeground(Color.RED);
            //Start the MySQL Listener
            InspectionTextArea.setText("Starting MySQL Listener\n");
            System.out.println("Starting MySQL Listener");
            StartMySQLListener("INSPECTION");
            //Start the HTTP Proxy
            InspectionTextArea.setText(InspectionTextArea.getText() + "Starting HTTP Proxy\n");
            System.out.println("Starting HTTP Proxy");
            StartHTTPProxy("INSPECTION");
            InspectionTextArea.setText(InspectionTextArea.getText() + "You may start interacting with the web application\n...\n");
        } else {
            InspectionTextArea.setText(InspectionTextArea.getText() + "Start Inspection Aborted by user\n");
        }
    }
}//GEN-LAST:event_StartInspectionButtonActionPerformed

private void StopInspectionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopInspectionButtonActionPerformed
    int n = 0;
    if (StartedInspection) {
        n = JOptionPane.showConfirmDialog(new JFrame(), "Are you sure you want to STOP the Inspection Stage?", "Attention!", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
        if (n == JOptionPane.YES_OPTION) {//Stop Inspection

            StartedInspection = false;
            InspectionLabel.setText("No Inspection is beeing performed");
            System.out.println("No Inspection is beeing performed");
            InspectionLabel.setForeground(Color.BLACK);
            //Stop the MySQL Listener
            InspectionTextArea.setText(InspectionTextArea.getText() + "Stopping MySQL Listener\n");
            System.out.println("Stopping MySQL Listener");
            StopMySQLListener();
            //Stop the HTTP Proxy
            InspectionTextArea.setText(InspectionTextArea.getText() + "Stopping HTTP Proxy\n");
            System.out.println("Stopping HTTP Proxy");
            StopHTTPProxy();
            //Updates the MYSQL_PROXY_PACKETS with the correct HTTP packets
            InspectionTextArea.setText(InspectionTextArea.getText() + "Updating the MYSQL_PROXY_PACKETS with the correct HTTP packets\n");
            System.out.println("Updating the MYSQL_PROXY_PACKETS with the correct HTTP packets");
            MySQL2HTTP();
            //Matching HTTP variables with SQL Queries and SQL variables
            InspectionTextArea.setText(InspectionTextArea.getText() + "Matching HTTP variables with SQL Queries and SQL variables\n");
            System.out.println("Matching HTTP variables with SQL Queries and SQL variables");
            HTTPVariables2SQLQueries();
            //Performing Static Analyzis of the files used in the HTTP packets
            InspectionTextArea.setText(InspectionTextArea.getText() + "Performing Static Analyzis of the files used in the HTTP packets\n");
            System.out.println("Performing Static Analyzis of the files used in the HTTP packets");
            HTTP2WebApplication(HostPath.getText(), "INSPECTION");
            //Performing Vulnerability Injection
            InspectionTextArea.setText(InspectionTextArea.getText() + "Performing Vulnerability Injection\n");
            System.out.println("Performing Vulnerability Injection");
            VulnerabilityInjectionAll(AffectSQLStaticCk.isSelected(), AffectSQLDynamicCk.isSelected());

            //Updating the 'Target PHP File Selected' Combo Box
            InspectionTextArea.setText(InspectionTextArea.getText() + "Updating the 'Target PHP File Selected' Combo Box\n");
            System.out.println("Updating the 'Target PHP File Selected' Combo Box");
            TargetPHPFileSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadTargetPHPFileData()));

            InspectionTextArea.setText(InspectionTextArea.getText() + "Processing Complete!\n");
            System.out.println("Processing Complete!");
        } else {
            InspectionTextArea.setText(InspectionTextArea.getText() + "Stop Inspection Aborted by user\n");
            System.out.println("Stop Inspection Aborted by user");
        }
    }
}//GEN-LAST:event_StopInspectionButtonActionPerformed

private void GenerateAttackPayloadsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_GenerateAttackPayloadsButtonActionPerformed
    PreparedStatement ps = null, ps_attack = null;
    ResultSet rs = null;
    Connection conn = null;
    String HTTPRequest = "", ParameterName = "", ParameterValue = "", ParameterEncodedValue = "", HTTPRequestHeader = "", HTTPRequestGET = "", NewHTTPRequestGET = "", HTTPRequestPOST = "", Type = "";
    int ATTACK_PAYLOADS_ID = 0;
    int posStart = -1, posEnd = -1, ContentLength = 0, count = 0;
    ToolEncodeDecode encodeDecode = new ToolEncodeDecode();

    try {
        if ((conn = JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        ps = conn.prepareStatement("DELETE FROM ATTACK_PAYLOADS");
        ps.executeUpdate();
        //Inserting the Foreign Keys in the ATTACK_PAYLOADS table
        //Although there is a DISTINCT clause in the following query, there it does not work because of a annoying "bug"/"feature" of the JavaDB.
        //This error can be seen if executing the query directely in a JAvaDB console
        //I corrected the error by using a GROUP BY instead of the DISTINCT!!!!!!!!
        ps = conn.prepareStatement("INSERT INTO ATTACK_PAYLOADS (VULNERABILITY_INJECTION_RESULT,TARGET_PHP_FILES_RUNS_FUNCTION,TARGET_PHP_FILES_VARIABLE,PAYLOAD,TYPE) (SELECT VULNERABILITY_INJECTION_RESULTS.ID,TARGET_PHP_FILES_RUNS_FUNCTIONS.ID,VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILES_VARIABLE,PAYLOADS.ID,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TYPE FROM VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES_VARIABLES,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES,TARGET_PHP_FILES_RUNS_FUNCTIONS,PAYLOADS WHERE TARGET_PHP_FILES_VARIABLES.ID=VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILES_VARIABLE AND TARGET_PHP_FILES_VARIABLES.ID=TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_VARIABLE AND TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTION=TARGET_PHP_FILES_RUNS_FUNCTIONS.ID AND TARGET_PHP_FILES_RUNS_FUNCTIONS.MODE='INSPECTION')");
        ps.executeUpdate();
        ps.close();

        ps = conn.prepareStatement("SELECT ATTACK_PAYLOADS.ID,ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TYPE,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.NAME,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.VALUE,PAYLOADS.PAYLOAD,TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_HEADER,TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_GET,TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_POST FROM ATTACK_PAYLOADS,TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES,PAYLOADS,TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_VARIABLE=ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE AND PAYLOADS.ID=ATTACK_PAYLOADS.PAYLOAD AND TARGET_PHP_FILES_RUNS_FUNCTIONS.ID=ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION AND TARGET_PHP_FILES_RUNS_FUNCTIONS.ID=TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTION AND ATTACK_PAYLOADS.TYPE=TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TYPE");
        rs = ps.executeQuery();
        while (rs.next()) {
            count++;
            ATTACK_PAYLOADS_ID = rs.getInt("ID");
            HTTPRequestHeader = rs.getString("HTTP_REQUEST_HEADER");
            HTTPRequestGET = rs.getString("HTTP_REQUEST_GET");
            HTTPRequestPOST = rs.getString("HTTP_REQUEST_POST");
            Type = rs.getString("TYPE");
            ParameterName = rs.getString("NAME");

            //Apply the Payload
            ParameterValue = rs.getString("VALUE") + " " + rs.getString("PAYLOAD");
            ParameterEncodedValue = encodeDecode.Encode(ParameterValue, false, "", "HTTP");

            if (Type.contentEquals("GET")) {
                posStart = HTTPRequestGET.lastIndexOf(ParameterName);
                posEnd = HTTPRequestGET.indexOf("&", posStart);
                if (posEnd == -1) {
                    NewHTTPRequestGET = HTTPRequestGET.substring(0, posStart) + ParameterName + "=" + ParameterEncodedValue;
                } else {
                    NewHTTPRequestGET = HTTPRequestGET.substring(0, posStart) + ParameterName + "=" + ParameterEncodedValue + HTTPRequestGET.substring(posEnd);
                }
                posStart = HTTPRequestHeader.indexOf(HTTPRequestGET);
                posEnd = posStart + HTTPRequestGET.length();
                HTTPRequestGET = NewHTTPRequestGET;
                HTTPRequestHeader = HTTPRequestHeader.substring(0, posStart) + HTTPRequestGET + HTTPRequestHeader.substring(posEnd);
            } else if (Type.contentEquals("POST")) {
                posStart = HTTPRequestPOST.lastIndexOf(ParameterName);
                posEnd = HTTPRequestPOST.indexOf("&", posStart);
                if (posEnd == -1) {
                    HTTPRequestPOST = HTTPRequestPOST.substring(0, posStart) + ParameterName + "=" + ParameterEncodedValue;
                } else {
                    HTTPRequestPOST = HTTPRequestPOST.substring(0, posStart) + ParameterName + "=" + ParameterEncodedValue + HTTPRequestPOST.substring(posEnd);
                }
            }
            posStart = HTTPRequestHeader.indexOf("Content-Length: ");
            if (posStart > 0) {
                posEnd = HTTPRequestHeader.indexOf("\r\n", posStart);
                ContentLength = HTTPRequestPOST.length();
                HTTPRequestHeader = HTTPRequestHeader.substring(0, posStart + 16) + ContentLength + HTTPRequestHeader.substring(posEnd);
            }
            HTTPRequest = HTTPRequestHeader + HTTPRequestPOST;

            ps_attack = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET ATTACK_INPUT=?, ATTACK_EXPECTED_OUTPUT=?, HTTP_REQUEST=? WHERE ID=?");
            ps_attack.setString(1, ParameterName + "=" + ParameterEncodedValue);
            ps_attack.setString(2, ParameterValue);
            ps_attack.setString(3, HTTPRequest);
            ps_attack.setInt(4, ATTACK_PAYLOADS_ID);
            ps_attack.executeUpdate();

        }
        ps.close();
        conn.commit();
        conn.close();
        AttackTextArea.setText(count + " Attack Payloads generated!\n");

    } catch (Throwable e) {
        System.out.println("Errors in GenerateAttackPayloadsButtonActionPerformed!");
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_GenerateAttackPayloadsButtonActionPerformed

private void StartAttackButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartAttackButtonActionPerformed
    PreparedStatement ps = null, ps_update = null;
    ResultSet rs = null;
    Connection conn = null;
    String HTTPRequest = "", output = "";
    String line = "";
    File WorkingDirectory = null;
    int count = 0, ATTACK_PAYLOADS_ID = 0;
    DatabaseAccess JavaDBAccess2 = new DatabaseAccess(DBprops);
    Timestamp StartAttackGlobal, EndAttackGlobal, StartAttack, EndAttack;


    long startTime = System.currentTimeMillis();

    try {
        StartAttackGlobal = new java.sql.Timestamp(System.currentTimeMillis());
        AttackTextArea.setText(AttackTextArea.getText() + "\nStarting the Overall Attack at: " + StartAttackGlobal + "\n");
        //Start the MySQL Listener
        AttackTextArea.setText("Starting MySQL Listener\n");
        System.out.println("Starting MySQL Listener");
        StartMySQLListener("ATTACK");
        //Start the HTTP Proxy
        AttackTextArea.setText(AttackTextArea.getText() + "Starting HTTP Proxy\n");
        System.out.println("Starting HTTP Proxy");
        StartHTTPProxy("ATTACK");

        if ((conn = JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

//        ps = conn.prepareStatement("SELECT ATTACK_PAYLOADS.HTTP_REQUEST,TARGET_PHP_FILES.ID TARGET_PHP_FILES_ID,TARGET_PHP_FILES.TEXT,VULNERABILITY_INJECTION_RESULTS.ID VULNERABILITY_INJECTION_RESULTS_ID FROM ATTACK_PAYLOADS,VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES WHERE ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=VULNERABILITY_INJECTION_RESULTS.ID AND VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND ATTACK_PAYLOADS.ID=8080");
        ps = conn.prepareStatement("SELECT ATTACK_PAYLOADS.ID ATTACK_PAYLOADS_ID,ATTACK_PAYLOADS.HTTP_REQUEST,RTRIM(CHAR(ATTACK_PAYLOADS.ID))||' - '||RTRIM(CHAR(ATTACK_PAYLOADS.PAYLOAD))||' - '||ATTACK_PAYLOADS.ATTACK_INPUT PAYLOAD,TARGET_PHP_FILES.ID TARGET_PHP_FILES_ID,TARGET_PHP_FILES.PATH TARGET_PHP_FILES_PATH,VULNERABILITY_INJECTION_RESULTS.ID VULNERABILITY_INJECTION_RESULTS_ID FROM ATTACK_PAYLOADS,VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES WHERE ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=VULNERABILITY_INJECTION_RESULTS.ID AND VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID");
        rs = ps.executeQuery();
        while (rs.next()) {
//        rs.next();
            if (UseIDSRadioButton.isSelected()) {
                //Start the IDS
                AttackTextArea.setText(AttackTextArea.getText() + "Starting the IDS\n");
                System.out.println("Starting the IDS");
//                jTPFile.setText("");

                jTPFile.setText("");
                try {
                    line = selFile.getAbsolutePath();
                    WorkingDirectory = selFile.getParentFile();
                    ExecuteAssincronousCommand(line + " -c config.cfg -m detector", WorkingDirectory);
                } catch (Exception err) {
                }

                jLDBSniffer.setText("Detector Started");
                Thread.sleep(1000);
            }

            ATTACK_PAYLOADS_ID = rs.getInt("ATTACK_PAYLOADS_ID");
            AttackTextArea.setText(AttackTextArea.getText() + "\nAttack #: " + rs.getRow() + "\n");
            System.out.println("Attack #: " + rs.getRow());
            StartAttack = new java.sql.Timestamp(System.currentTimeMillis());
            AttackTextArea.setText(AttackTextArea.getText() + "\nStarting the Attack at: " + StartAttack + "\n");
            System.out.println("Starting the Attack at: " + StartAttack);
            ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET START_ATTACK_TIMESTAMP=? WHERE ID=?");
            ps_update.setTimestamp(1, StartAttack);
            ps_update.setInt(2, ATTACK_PAYLOADS_ID);
            ps_update.executeUpdate();

            //Apply the Vulnerable PHP File
            AttackTextArea.setText(AttackTextArea.getText() + "Apply the Vulnerable PHP File: " + rs.getString("TARGET_PHP_FILES_PATH") + "\n");
            System.out.println("Apply the Vulnerable PHP File: " + rs.getString("TARGET_PHP_FILES_PATH"));
            VulnInject.ApplyVulnerablePHPFile(JavaDBAccess2, rs.getInt("VULNERABILITY_INJECTION_RESULTS_ID"));

            //Execute Attack
            AttackTextArea.setText(AttackTextArea.getText() + "Execute Attack: " + rs.getString("PAYLOAD") + "\n");
            System.out.println("Execute Attack: " + rs.getString("PAYLOAD"));
            HTTPRequest = rs.getString("HTTP_REQUEST");
            try {
                //Execute the attack through the HTTP proxy
                output = Attack.issueRequest(HTTPRequest, "localhost", Integer.parseInt(HTTPProxySourcePort.getText()));
            } catch (Exception e) {
                output = e.toString();
            }

            if (UseIDSRadioButton.isSelected()) {
                //Stop the IDS
                AttackTextArea.setText(AttackTextArea.getText() + "Stopping the IDS\n");
                Thread.sleep(1000);
                System.out.println("Stopping the IDS");
                ExitAssincronousCommand();
//                Thread.sleep(1000);

                ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET IDS_RESULT=?,IDS_COMMAND_DETECTION_RESULT='UNDEFINED',IDS_TRANSACTION_DETECTION_RESULT='UNDEFINED' WHERE ID=?");
                ps_update.setString(1, jTPFile.getText());
                ps_update.setInt(2, ATTACK_PAYLOADS_ID);
                ps_update.executeUpdate();

            }

            //Restore the original PHP file
            AttackTextArea.setText(AttackTextArea.getText() + "Restore the original PHP file: " + rs.getString("TARGET_PHP_FILES_PATH") + "\n");
            System.out.println("Restore the original PHP file: " + rs.getString("TARGET_PHP_FILES_PATH"));
            VulnInject.RestoreOriginalPHPFile(JavaDBAccess2, rs.getInt("TARGET_PHP_FILES_ID"));

            //Restore the DB data
            AttackTextArea.setText(AttackTextArea.getText() + "Restore the DB data\n");
            System.out.println("Restore the DB data");
            line = WebApplicationDatabaseRestoreCommand.getText();
            ResultList.clear();
            WorkingDirectory = new File(line.substring(0, line.lastIndexOf(File.separator)));
            ExecuteCommand(line, WorkingDirectory);
            while (done == false) {
            }
            for (count = 0; count < ResultList.size(); count++) {
                AttackTextArea.setText(AttackTextArea.getText() + ResultList.get(count).toString() + "\n");
                System.out.println(ResultList.get(count).toString());
            }
            done = false;

            EndAttack = new java.sql.Timestamp(System.currentTimeMillis());
            AttackTextArea.setText(AttackTextArea.getText() + "\nEnding the Attack at: " + EndAttack + "\n");
            System.out.println("Ending the Attack at: " + EndAttack);
            ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET END_ATTACK_TIMESTAMP=?, ATTACK_RESULT='UNDEFINED' WHERE ID=?");
            ps_update.setTimestamp(1, EndAttack);
            ps_update.setInt(2, ATTACK_PAYLOADS_ID);
            ps_update.executeUpdate();

            //the next commit may originate the following error:
            //XJ073
            //The data in this BLOB or CLOB is no longer available. The BLOB/CLOB's transaction may be committed, or its connection is closed.
            conn.commit();
        }
        rs.close();
        ps.close();

        //Stop the MySQL Listener
        AttackTextArea.setText(AttackTextArea.getText() + "Correlating the ATTACK_PAYLOADS table with the TARGET_PHP_FILES_RUNS_FUNCTIONS table\n");
        System.out.println("Correlating the ATTACK_PAYLOADS table with the TARGET_PHP_FILES_RUNS_FUNCTIONS table");
        ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET ATTACK_TARGET_PHP_FILES_RUNS_FUNCTION=(SELECT TARGET_PHP_FILES_RUNS_FUNCTIONS.ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_TIMESTAMP > ATTACK_PAYLOADS.START_ATTACK_TIMESTAMP AND TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_TIMESTAMP < ATTACK_PAYLOADS.END_ATTACK_TIMESTAMP) WHERE ATTACK_TARGET_PHP_FILES_RUNS_FUNCTION IS NULL");
        ps_update.executeUpdate();
        ps_update.close();

        conn.commit();
        conn.close();

        JavaDBAccess2 = null;


        //Stop the MySQL Listener
        AttackTextArea.setText(AttackTextArea.getText() + "Stopping MySQL Listener\n");
        System.out.println("Stopping MySQL Listener");
        StopMySQLListener();
        //Stop the HTTP Proxy
        AttackTextArea.setText(AttackTextArea.getText() + "Stopping HTTP Proxy\n");
        System.out.println("Stopping HTTP Proxy");
        StopHTTPProxy();
        //Updates the MYSQL_PROXY_PACKETS with the correct HTTP packets
        AttackTextArea.setText(AttackTextArea.getText() + "Updating the MYSQL_PROXY_PACKETS with the correct HTTP packets\n");
        System.out.println("Updating the MYSQL_PROXY_PACKETS with the correct HTTP packets");
        MySQL2HTTP();
        //Matching HTTP variables with SQL Queries and SQL variables
        AttackTextArea.setText(AttackTextArea.getText() + "Matching HTTP variables with SQL Queries and SQL variables\n");
        System.out.println("Matching HTTP variables with SQL Queries and SQL variables");
        HTTPVariables2SQLQueries();

        EndAttackGlobal = new java.sql.Timestamp(System.currentTimeMillis());
        AttackTextArea.setText(AttackTextArea.getText() + "\nStarted the Overall Attack at: " + StartAttackGlobal + "\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Ending the Overall Attack at:  " + EndAttackGlobal + "\n");
        long stopTime = System.currentTimeMillis();
        long elapsedTime = stopTime - startTime;
        System.out.println(elapsedTime);
        AttackTextArea.setText(AttackTextArea.getText() + "\nElapsed time : " + elapsedTime + "(ms)\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Elapsed time : " + elapsedTime / 1000 / 60 + "(m)\n");


    } catch (Throwable e) {
        System.out.println("Errors in StartAttackButtonActionPerformed!");
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }

}//GEN-LAST:event_StartAttackButtonActionPerformed

private void RestoreMySQLDBButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestoreMySQLDBButtonActionPerformed

    String line = "";
    File WorkingDirectory = null;
    int count = 0;

    line = WebApplicationDatabaseRestoreCommand.getText();
    ResultList.clear();
    WorkingDirectory = new File(line.substring(0, line.lastIndexOf(File.separator)));
    ExecuteCommand(line, WorkingDirectory);
    while (done == false) {
    }
    for (count = 0; count < ResultList.size(); count++) {
        AttackTextArea.setText(ResultList.get(count).toString());
    }
    done = false;
}//GEN-LAST:event_RestoreMySQLDBButtonActionPerformed

private void RestorePHPFilesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RestorePHPFilesButtonActionPerformed
    String line = "";
    File WorkingDirectory = null;
    int count = 0;

    line = WebApplicationPHPFilesRestoreCommand.getText();
    ResultList.clear();
    WorkingDirectory = new File(line.substring(0, line.lastIndexOf(File.separator)));
    ExecuteCommand(line, WorkingDirectory);
    while (done == false) {
    }
    for (count = 0; count < ResultList.size(); count++) {
        AttackTextArea.setText(ResultList.get(count).toString());
    }
    done = false;
}//GEN-LAST:event_RestorePHPFilesButtonActionPerformed

private void CalculateAttackSuccessButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculateAttackSuccessButtonActionPerformed
    PreparedStatement ps_update = null;
    Connection conn = null;

    try {
        if ((conn = JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET ATTACK_RESULT='SUCCESSFUL' WHERE EXISTS (SELECT 1 FROM MYSQL_QUERIES Q1,MYSQL_PROXY_PACKETS P1,MYSQL_QUERIES Q2,MYSQL_PROXY_PACKETS P2 WHERE Q1.MYSQL_PROXY_PACKET_CLIENT=P1.ID AND P1.TARGET_PHP_FILES_RUNS_FUNCTION=ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION AND Q2.MYSQL_PROXY_PACKET_CLIENT=P2.ID AND P2.TARGET_PHP_FILES_RUNS_FUNCTION=ATTACK_PAYLOADS.ATTACK_TARGET_PHP_FILES_RUNS_FUNCTION AND P1.HTTP_PACKET_SEQUENCE=P2.HTTP_PACKET_SEQUENCE AND Q1.MYSQL_QUERY_SEQUENCE=Q2.MYSQL_QUERY_SEQUENCE AND Q1.SQL_COMMAND_STRUCTURE <> Q2.SQL_COMMAND_STRUCTURE) AND ATTACK_RESULT='UNDEFINED'");
        ps_update.executeUpdate();
        conn.commit();
        ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET ATTACK_RESULT='NOT SUCCESSFUL' WHERE EXISTS (SELECT 1 FROM MYSQL_QUERIES Q1,MYSQL_PROXY_PACKETS P1,MYSQL_QUERIES Q2,MYSQL_PROXY_PACKETS P2 WHERE Q1.MYSQL_PROXY_PACKET_CLIENT=P1.ID AND P1.TARGET_PHP_FILES_RUNS_FUNCTION=ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION AND Q2.MYSQL_PROXY_PACKET_CLIENT=P2.ID AND P2.TARGET_PHP_FILES_RUNS_FUNCTION=ATTACK_PAYLOADS.ATTACK_TARGET_PHP_FILES_RUNS_FUNCTION AND P1.HTTP_PACKET_SEQUENCE=P2.HTTP_PACKET_SEQUENCE AND Q1.MYSQL_QUERY_SEQUENCE=Q2.MYSQL_QUERY_SEQUENCE AND Q1.SQL_COMMAND_STRUCTURE = Q2.SQL_COMMAND_STRUCTURE) AND ATTACK_RESULT='UNDEFINED'");
        ps_update.executeUpdate();
        ps_update.close();
        conn.commit();
        ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET IDS_COMMAND_DETECTION_RESULT='NOT SUCCESSFUL' WHERE IDS_COMMAND_DETECTION_RESULT='UNDEFINED'");
        ps_update.executeUpdate();
        ps_update.close();
        conn.commit();
        if (UseIDSRadioButton.isSelected()) {
            ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET IDS_COMMAND_DETECTION_RESULT='SUCCESSFUL' WHERE UPPER(IDS_RESULT) LIKE '%MALICIOUS_COMMAND%'");
            ps_update.executeUpdate();
            ps_update.close();
            conn.commit();
            ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET IDS_TRANSACTION_DETECTION_RESULT='NOT SUCCESSFUL' WHERE IDS_TRANSACTION_DETECTION_RESULT='UNDEFINED'");
            ps_update.executeUpdate();
            ps_update.close();
            conn.commit();
            ps_update = conn.prepareStatement("UPDATE ATTACK_PAYLOADS SET IDS_TRANSACTION_DETECTION_RESULT='SUCCESSFUL' WHERE UPPER(IDS_RESULT) LIKE '%MALICIOUS_TRANSACTION%'");
            ps_update.executeUpdate();
            ps_update.close();
            conn.commit();
        }
        conn.close();

    } catch (Throwable e) {
        System.out.println("Errors in ParsePHPFile!");
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_CalculateAttackSuccessButtonActionPerformed

private void ShowAttackResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ShowAttackResultsButtonActionPerformed
    PreparedStatement ps = null;
    ResultSet rs = null;
    Connection conn = null;
    int i;

    try {
        if ((conn = JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        AttackTextArea.setText("");
        ps = conn.prepareStatement("SELECT COUNT(*) FROM ATTACK_PAYLOADS WHERE ATTACK_RESULT ='NOT SUCCESSFUL'");
        rs = ps.executeQuery();
        rs.next();
        AttackTextArea.setText(AttackTextArea.getText() + "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Attacks not Successful: " + rs.getString(1) + "\n");
        ps = conn.prepareStatement("SELECT COUNT(*) FROM ATTACK_PAYLOADS WHERE ATTACK_RESULT ='UNDEFINED'");
        rs = ps.executeQuery();
        rs.next();
        AttackTextArea.setText(AttackTextArea.getText() + "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Attacks not Successful (undefined): " + rs.getString(1) + "\n");
        ps = conn.prepareStatement("SELECT COUNT(*) FROM ATTACK_PAYLOADS WHERE ATTACK_RESULT ='SUCCESSFUL'");
        rs = ps.executeQuery();
        rs.next();
        AttackTextArea.setText(AttackTextArea.getText() + "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Attacks Successful: " + rs.getString(1) + "\n");
        ps = conn.prepareStatement("SELECT 1 FROM ATTACK_PAYLOADS,VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES,TARGET_PHP_FILES_VARIABLES WHERE ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=VULNERABILITY_INJECTION_RESULTS.ID AND VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE=TARGET_PHP_FILES_VARIABLES.ID AND ATTACK_PAYLOADS.ATTACK_RESULT ='SUCCESSFUL' GROUP BY ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION,TARGET_PHP_FILES.NAME,ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE,TARGET_PHP_FILES_VARIABLES.NAME,VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT");
        rs = ps.executeQuery();
        i = 0;
        while (rs.next()) {
            i++;
        }
        AttackTextArea.setText(AttackTextArea.getText() + "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
        AttackTextArea.setText(AttackTextArea.getText() + "Vulnerabilities that could be Attacked: " + i + "\n");

        ps = conn.prepareStatement("SELECT ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION,TARGET_PHP_FILES.NAME,ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE,TARGET_PHP_FILES_VARIABLES.NAME,VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT FROM ATTACK_PAYLOADS,VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES,TARGET_PHP_FILES_VARIABLES WHERE ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=VULNERABILITY_INJECTION_RESULTS.ID AND VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE=TARGET_PHP_FILES_VARIABLES.ID AND ATTACK_PAYLOADS.ATTACK_RESULT ='SUCCESSFUL' GROUP BY ATTACK_PAYLOADS.TARGET_PHP_FILES_RUNS_FUNCTION,TARGET_PHP_FILES.NAME,ATTACK_PAYLOADS.TARGET_PHP_FILES_VARIABLE,TARGET_PHP_FILES_VARIABLES.NAME,VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT");
        rs = ps.executeQuery();
        while (rs.next()) {
            AttackTextArea.setText(AttackTextArea.getText() + "--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n");
            AttackTextArea.setText(AttackTextArea.getText() + rs.getInt(1) + "\t" + rs.getString(2) + "\t" + rs.getInt(3) + "\t" + rs.getString(4) + "\n" + rs.getString(5) + "\n");
        }
        rs.close();
        ps.close();
        conn.commit();
        conn.close();

    } catch (Throwable e) {
        System.out.println("Errors in ParsePHPFile!");
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_ShowAttackResultsButtonActionPerformed

private void RefreshVulnerabilitiesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_RefreshVulnerabilitiesButtonActionPerformed
    try {
        VulnerabilitySelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(JavaDBAccess.ReadVulnerabilityData(TargetPHPFileSelectedComboBox.getSelectedItem().toString())));
    } catch (Throwable e) {
    }
}//GEN-LAST:event_RefreshVulnerabilitiesButtonActionPerformed

private void ApplySingleVulnerabilityButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySingleVulnerabilityButtonActionPerformed
    String[] VulnerabilityData = null;

    int count = 0;
    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    int VULNERABILITY_INJECTION_RESULTS_ID;

    // Adapted from http://developers.sun.com/docs/javadb/10.2.2/ref/rrefclob.html
    try {
        if ((conn = this.JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + this.JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + this.JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        // Test to see if the Target PHP file is already in the DB
        ps = conn.prepareStatement("SELECT VULNERABILITY_INJECTION_RESULTS.ID FROM VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES WHERE VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH=? AND VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT=?"); // get the result

        ps.setString(1, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
        ps.setString(2, VulnerabilitySelectedComboBox.getSelectedItem().toString());
        rs = ps.executeQuery(); // get the result

        rs.next();
        // Open matches log file.
        VULNERABILITY_INJECTION_RESULTS_ID = rs.getInt(1);
        rs.close();
        ps.close();
        conn.commit();

        // Test to see if the Target PHP file is already in the DB
        ps = conn.prepareStatement("SELECT COUNT(*) FROM ATTACK_PAYLOADS,PAYLOADS WHERE ATTACK_PAYLOADS.PAYLOAD=PAYLOADS.ID AND ATTACK_PAYLOADS.ATTACK_RESULT='SUCCESSFUL' AND ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=?"); // get the result

        ps.setInt(1, VULNERABILITY_INJECTION_RESULTS_ID);
        rs = ps.executeQuery(); // get the result

        rs.next();
        count = rs.getInt(1);
        rs.close();
        ps.close();

        VulnerabilityData = new String[count + 1];
        VulnerabilityData[0] = "null";

        // Test to see if the Target PHP file is already in the DB
        ps = conn.prepareStatement("SELECT PAYLOADS.PAYLOAD FROM ATTACK_PAYLOADS,PAYLOADS WHERE ATTACK_PAYLOADS.PAYLOAD=PAYLOADS.ID AND ATTACK_PAYLOADS.ATTACK_RESULT='SUCCESSFUL' AND ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=?"); // get the result

        ps.setInt(1, VULNERABILITY_INJECTION_RESULTS_ID);
        rs = ps.executeQuery(); // get the result

        while (rs.next()) {
            // Open matches log file.
            VulnerabilityData[rs.getRow()] = rs.getString(1);
        }
        rs.close();
        ps.close();
        conn.commit();
        conn.close();
        SuccessPayloadSelectedComboBox.setModel(new javax.swing.DefaultComboBoxModel(VulnerabilityData));

        //Apply the Vulnerable PHP File
        VulnInject.ApplyVulnerablePHPFile(JavaDBAccess, VULNERABILITY_INJECTION_RESULTS_ID);

    } catch (Throwable e) {
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
}//GEN-LAST:event_ApplySingleVulnerabilityButtonActionPerformed

private void ApplySinglePayloadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ApplySinglePayloadButtonActionPerformed
    String HTTPRequest = "", output = "";

    Connection conn = null;
    PreparedStatement ps = null;
    ResultSet rs = null;
    int VULNERABILITY_INJECTION_RESULTS_ID;

    // Adapted from http://developers.sun.com/docs/javadb/10.2.2/ref/rrefclob.html
    try {
        if ((conn = this.JavaDBAccess.setConn()) != null) {
            System.out.println("Connected to database " + this.JavaDBAccess.getDatabaseName());
        } else {
            throw new Exception("Not connected to database " + this.JavaDBAccess.getDatabaseName());
        }

        conn.setAutoCommit(false);

        // Test to see if the Target PHP file is already in the DB
        ps = conn.prepareStatement("SELECT VULNERABILITY_INJECTION_RESULTS.ID FROM VULNERABILITY_INJECTION_RESULTS,TARGET_PHP_FILES WHERE VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH=? AND VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT=?"); // get the result

        ps.setString(1, TargetPHPFileSelectedComboBox.getSelectedItem().toString());
        ps.setString(2, VulnerabilitySelectedComboBox.getSelectedItem().toString());
        rs = ps.executeQuery(); // get the result

        rs.next();
        // Open matches log file.
        VULNERABILITY_INJECTION_RESULTS_ID = rs.getInt(1);

        // Test to see if the Target PHP file is already in the DB
        ps = conn.prepareStatement("SELECT ATTACK_PAYLOADS.HTTP_REQUEST FROM ATTACK_PAYLOADS,PAYLOADS WHERE ATTACK_PAYLOADS.PAYLOAD=PAYLOADS.ID AND ATTACK_PAYLOADS.ATTACK_RESULT='SUCCESSFUL' AND ATTACK_PAYLOADS.VULNERABILITY_INJECTION_RESULT=?"); // get the result

        ps.setInt(1, VULNERABILITY_INJECTION_RESULTS_ID);
        rs = ps.executeQuery(); // get the result

        rs.next();
        HTTPRequest = rs.getString("HTTP_REQUEST");
        rs.close();
        ps.close();
        conn.commit();
        conn.close();

    } catch (Throwable e) {
        System.out.println("exception thrown:");

        if (e instanceof SQLException) {
            JavaDBAccess.printSQLError((SQLException) e);
        } else {
            e.printStackTrace();
        }
    }
    try {
        //Execute the attack through the HTTP proxy
        output = Attack.issueRequest(HTTPRequest, WebApplicationIPAddress.getText(), Integer.parseInt(WebApplicationPort.getText()));
    } catch (Exception e) {
        output = e.toString();
    }
    VulnerabilityInjectionTextArea.setText("Payload Applyed");
}//GEN-LAST:event_ApplySinglePayloadButtonActionPerformed

private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
    String filename = "." + File.separator;
    if (!jPath.getText().isEmpty()) {
        filename = (jPath.getText());
    }
    JFileChooser fc = new JFileChooser(new File(filename));
    fc.setDialogTitle("Open DBSniffer program to get its location");
    // Show open dialog; this method does not return until the dialog is closed
    int returnVal = fc.showOpenDialog(new JFrame());
    if (returnVal == JFileChooser.APPROVE_OPTION) {
        selFile = fc.getSelectedFile();
//            System.out.println("You chose to open this file: " + fc.getSelectedFile().getName());
        jPath.setText(fc.getSelectedFile().getParent() + File.separator);
    } else {
//            System.out.println("You chose not to open file");
        }

// TODO add your handling code here:
}//GEN-LAST:event_jButton1ActionPerformed

private void jPathActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPathActionPerformed
// TODO add your handling code here:
}//GEN-LAST:event_jPathActionPerformed

private void IDSResultsButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_IDSResultsButtonActionPerformed
    int count;
    String Message, Message_MALICIOUS_COMMAND = "", Message_MALICIOUS_TRANSACTION = "";

    count = 0;
    while (jTPFile.getText().toUpperCase().indexOf("MALICIOUS_COMMAND") != -1) {
        count++;
    }
    if (count > 0) {
        Message_MALICIOUS_COMMAND = "The IDS detected " + count + " Malicious Commands\n";
    }
    count = 0;
    while (jTPFile.getText().toUpperCase().indexOf("MALICIOUS_TRANSACTION") != -1) {
        count++;
    }
    if (count > 0) {
        Message_MALICIOUS_TRANSACTION = "The IDS detected " + count + " Malicious Transactions\n";
    }
    Message = Message_MALICIOUS_COMMAND + Message_MALICIOUS_TRANSACTION;
    if (Message.contentEquals("")) {
        Message = "Nothing unusual was detected by the IDS";
    }
    JOptionPane.showMessageDialog(new JFrame(), Message, "IDS results", JOptionPane.INFORMATION_MESSAGE);
}//GEN-LAST:event_IDSResultsButtonActionPerformed

private void StartIDSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StartIDSButtonActionPerformed
    jTPFile.setText("");
    File WorkingDirectory = null;
    String line = null;

    try {
        line = selFile.getAbsolutePath();
        WorkingDirectory = selFile.getParentFile();
        ExecuteAssincronousCommand(line + " -c config.cfg -m detector", WorkingDirectory);
    } catch (Exception err) {
    }
}//GEN-LAST:event_StartIDSButtonActionPerformed

private void StopIDSButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_StopIDSButtonActionPerformed
    ExitAssincronousCommand();
}//GEN-LAST:event_StopIDSButtonActionPerformed

private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
    int i = 0;
//    i = PHPFile.SearchEndChar(jTextField4.getText(), 1, ')');
    i = PHPFile.SearchLevelChar(jTextField4.getText(), 1, ',');
    InspectionTextArea.setText(i + " " + jTextField4.getText().substring(0, i + 1));
}//GEN-LAST:event_jButton2ActionPerformed

private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
    VulnerabilityInjectionAll(AffectSQLStaticCk.isSelected(), AffectSQLDynamicCk.isSelected());
}//GEN-LAST:event_jButton3ActionPerformed

private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
    int VariableLocationInsideString;
    VariableLocationInsideString = PHPFile.TextInsidePHPString(InspectionTextArea.getText(), Integer.parseInt(jTextField5.getText()));
    jTextField6.setText("" + VariableLocationInsideString);
}//GEN-LAST:event_jButton4ActionPerformed

    private static void ExecuteCommand(String CommandText, File WorkingDirectory) {
        final Process p;     // Process tracks one external native process

        BufferedReader pis;  // reader for output of process


        String pline = "";
        try {
            p = Runtime.getRuntime().exec(CommandText, null, WorkingDirectory);

            // Optional: start a thread to wait for the process to terminate.
            // Don't just wait in main line, but here set a "done" flag and
            // use that to control the main reading loop below.
            Thread waiter = new Thread() {

                public void run() {
                    try {
                        p.waitFor();
                    } catch (InterruptedException ex) {
                        // OK, just quit.
                        return;
                    }
//                    System.out.println("Program terminated!");
                    ResultList.add("Program terminated!");
                    done = true;
                }
            };
            waiter.start();

            // getInputStream gives an Input stream connected to
            // the process p's standard output (and vice versa). We use
            // that to construct a BufferedReader so we can readLine() it.
            pis = new BufferedReader(new InputStreamReader(p.getInputStream()));

            while (!done && ((pline = pis.readLine()) != null)) {
//                System.out.println(pline);
                ResultList.add(pline);
            }

        } catch (IOException e) {

            System.err.println("Error1!");
        } catch (Exception err) {

            System.err.println("Error2!");
            err.printStackTrace();
        }
    }

    private void ExecuteAssincronousCommand(String CommandText, File WorkingDirectory) {

        try {
            done = false;
            ExternalProcessResultList.clear();
            jLDBSniffer.setText("Detector Started");
            ExternalProcess = Runtime.getRuntime().exec(CommandText, null, WorkingDirectory);
            jTPFile.setText("");
            // Optional: start a thread to wait for the process to terminate.
            // Don't just wait in main line, but here set a "done" flag and
            // use that to control the main reading loop below.
            processThread = new Thread() {

                public void run() {
                    try {
                        System.out.println("processThread Started");
                        ExternalProcess.waitFor();
                    } catch (InterruptedException ex) {
                        // OK, just quit.
                    }
//                    System.out.println("Program terminated!");
                    ExternalProcessResultList.add("Program terminated!");
                    jLDBSniffer.setText("DBSniffer Stopped");
                    done = true;
                    System.out.println("processThread Stopped");
                }
            };

            inReadThread = new Thread() {

                public void run() {
                    BufferedReader pis;  // reader for output of process

                    String pline = "";
                    int offset = 0;
                    String output = "";

                    try {
                        System.out.println("inReadThread Started");
                        // getInputStream gives an Input stream connected to
                        // the process p's standard output (and vice versa). We use
                        // that to construct a BufferedReader so we can readLine() it.
                        pis = new BufferedReader(new InputStreamReader(ExternalProcess.getInputStream()));

                        while (!done && ((pline = pis.readLine()) != null) && !isInterrupted()) {
//                System.out.println(pline);
                            ExternalProcessResultList.add(pline);

                            offset = jTPFile.getDocument().getLength() - 10240;
                            if (offset > 0) {
                                try {
                                    output = jTPFile.getText(offset, 10240) + "\n" + pline;
                                } catch (Exception err) {
                                }
                            } else {
                                output = jTPFile.getText() + "\n" + pline;
                            }
                            jTPFile.setText(output);
                            //to go to the end of the TextPane
                            jTPFile.setCaretPosition(jTPFile.getDocument().getLength());

                        }
                    } catch (IOException ex) {
                        ex.printStackTrace();
                    }
                    System.out.println("inReadThread Stopped: " + done + " - " + pline + " - " + isInterrupted());
                }
            };

            processThread.start();
            inReadThread.start();


        } catch (Exception err) {

            System.err.println("Error2!");
            err.printStackTrace();
        }
    }

    private void ExitAssincronousCommand() {
        if (ExternalProcess != null) {
            done = true;
            ExternalProcess.destroy();
            processThread.interrupt();
            while (processThread.isAlive()) {
            }
            processThread = null;
            System.out.println("processThread Should Already be Stopped");
            inReadThread.interrupt();
            while (inReadThread.isAlive()) {
            }
            inReadThread = null;
            System.out.println("inReadThread Should Already be Stopped");
            ExternalProcess = null;
            ExternalProcessResultList.add("Program terminated!");
            jLDBSniffer.setText("DBSniffer Stopped");
            done = false;
        }
    }

    private void DeleteMySQLData() {
        Connection conn = null;


        PreparedStatement ps = null;
        try {
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println(
                        "Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception(
                        "Not connected to database " + JavaDBAccess.getDatabaseName());
            }


            conn.setAutoCommit(false);

            ps =
                    conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_VARIABLES");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_QUERIES");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement("DELETE FROM MYSQL_QUERIES_VARIABLES");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement(
                    "DELETE FROM MYSQL_QUERIES");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement(
                    "DELETE FROM MYSQL_PACKETS");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement(
                    "DELETE FROM MYSQL_PROXY_PACKETS");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();
            InspectionTextArea.setText("DB data deleted!");
        } catch (Throwable e) {
            InspectionTextArea.setText("Errors deleting DB data!");
            System.out.println(
                    "exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }

        } finally {
            try {
                conn.close();
            } catch (Throwable e) {
            }
        }
    }

    private void DeleteHTTPData() {
        Connection conn = null;


        PreparedStatement ps = null;
        try {
            DeleteMySQLData();
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println(
                        "Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception(
                        "Not connected to database " + JavaDBAccess.getDatabaseName());
            }


            conn.setAutoCommit(false);

            ps =
                    conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS");
            ps.executeUpdate();
            ps =
                    conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();
            InspectionTextArea.setText("HTTP data deleted!");
        } catch (Throwable e) {
            InspectionTextArea.setText("Errors deleting HTTP data!");
            System.out.println(
                    "exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }

        }
    }

    private void DeleteAttackData() {
        Connection conn = null;


        PreparedStatement ps = null;
        try {
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }


            conn.setAutoCommit(false);

            ps = conn.prepareStatement("DELETE FROM ATTACK_PAYLOADS");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_QUERIES WHERE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MODE='ATTACK')");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_VARIABLES WHERE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MODE='ATTACK')");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MODE='ATTACK'");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES_VARIABLES WHERE MYSQL_QUERY IN(SELECT MYSQL_QUERIES.ID FROM MYSQL_QUERIES,MYSQL_PROXY_PACKETS WHERE MYSQL_QUERIES.MYSQL_PROXY_PACKET_CLIENT=MYSQL_PROXY_PACKETS.ID AND MYSQL_PROXY_PACKETS.MODE='ATTACK')");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES WHERE MYSQL_PROXY_PACKET_CLIENT IN (SELECT ID FROM MYSQL_PROXY_PACKETS WHERE MODE='ATTACK')");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_PACKETS WHERE MYSQL_PROXY_PACKET IN (SELECT ID FROM MYSQL_PROXY_PACKETS WHERE MODE='ATTACK')");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_PROXY_PACKETS WHERE MODE='ATTACK'");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE MODE='ATTACK'");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();
            InspectionTextArea.setText("Attack data deleted!");
        } catch (Throwable e) {
            InspectionTextArea.setText("Errors deleting Attack data!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }

        }
    }

    private void HTTPVariables2SQLQueries() {
        Connection conn = null;
        Statement s = null;

        try {
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }


            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            s = conn.createStatement();
            s.executeUpdate("DELETE FROM HTTP_VARIABLES_SQL_VARIABLES");
            s.executeUpdate("INSERT INTO HTTP_VARIABLES_SQL_VARIABLES (MYSQL_QUERIES_VARIABLE, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE, COUNT) (SELECT MYSQL_QUERIES_VARIABLES.ID ID1, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.ID ID2, COUNT(*) FROM MYSQL_QUERIES_VARIABLES, MYSQL_QUERIES, MYSQL_PROXY_PACKETS, TARGET_PHP_FILES_RUNS_FUNCTIONS, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MYSQL_QUERIES_VARIABLES.MYSQL_QUERY = MYSQL_QUERIES.ID AND MYSQL_QUERIES.MYSQL_PROXY_PACKET_CLIENT = MYSQL_PROXY_PACKETS.ID AND MYSQL_PROXY_PACKETS.TARGET_PHP_FILES_RUNS_FUNCTION = TARGET_PHP_FILES_RUNS_FUNCTIONS.ID AND TARGET_PHP_FILES_RUNS_FUNCTIONS.ID = TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTION AND MYSQL_QUERIES_VARIABLES.VALUE LIKE '%'||TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.DECODED_VALUE||'%' GROUP BY MYSQL_QUERIES_VARIABLES.ID, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.ID)");
            s.executeUpdate("DELETE FROM HTTP_VARIABLES_SQL_QUERIES");
            s.executeUpdate("INSERT INTO HTTP_VARIABLES_SQL_QUERIES (MYSQL_QUERY, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE, COUNT_STRUCTURE) (SELECT MYSQL_QUERIES.ID AS ID1, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.ID AS ID2, COUNT(*) FROM MYSQL_QUERIES, MYSQL_PROXY_PACKETS, TARGET_PHP_FILES_RUNS_FUNCTIONS, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MYSQL_QUERIES.MYSQL_PROXY_PACKET_CLIENT = MYSQL_PROXY_PACKETS.ID AND MYSQL_PROXY_PACKETS.TARGET_PHP_FILES_RUNS_FUNCTION = TARGET_PHP_FILES_RUNS_FUNCTIONS.ID AND TARGET_PHP_FILES_RUNS_FUNCTIONS.ID = TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTION AND MYSQL_QUERIES.SQL_COMMAND LIKE '%'||TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.DECODED_VALUE||'%' GROUP BY MYSQL_QUERIES.ID, TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.ID)");
            s.executeUpdate("UPDATE HTTP_VARIABLES_SQL_QUERIES SET COUNT_VARIABLES=(SELECT SUM(COUNT) FROM HTTP_VARIABLES_SQL_VARIABLES, MYSQL_QUERIES_VARIABLES WHERE HTTP_VARIABLES_SQL_VARIABLES.MYSQL_QUERIES_VARIABLE=MYSQL_QUERIES_VARIABLES.ID AND HTTP_VARIABLES_SQL_QUERIES.TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE=HTTP_VARIABLES_SQL_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE AND MYSQL_QUERIES_VARIABLES.MYSQL_QUERY=HTTP_VARIABLES_SQL_QUERIES.MYSQL_QUERY)");
            s.executeUpdate("UPDATE HTTP_VARIABLES_SQL_QUERIES SET COUNT_VARIABLES=0 WHERE COUNT_VARIABLES IS NULL");
            s.executeUpdate("UPDATE HTTP_VARIABLES_SQL_QUERIES SET COUNT_STRUCTURE=COUNT_STRUCTURE-COUNT_VARIABLES");
            s.close();

        } catch (Throwable e) {
            InspectionTextArea.setText("Errors in HTTP2SQLVariables executed!");
            System.out.println(
                    "exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }

        } finally {
            try {
                conn.commit();
                conn.close();
            } catch (Throwable e) {
            }
        }
    }

    private void HTTP2WebApplication(String HostPath, String MODE) {
        Connection conn = null;

        PreparedStatement ps_http = null;

        PreparedStatement ps =
                null;
        Statement s = null;
        ResultSet rs = null;

        String HTTP_REQUEST_HOST = "", HTTP_REQUEST_PATH = "", HTTP_REQUEST_FILE = "";


        int TARGET_PHP_FILES_ID = 0;
        File f;

        DatabaseAccess JavaDBAccess2 = null;

        try {
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println(
                        "Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception(
                        "Not connected to database " + JavaDBAccess.getDatabaseName());
            }


            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            ps_http = conn.prepareStatement("SELECT DISTINCT HTTP_REQUEST_HOST, HTTP_REQUEST_PATH, HTTP_REQUEST_FILE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS WHERE MODE=?");
            ps_http.setString(1, MODE);
            rs = ps_http.executeQuery();
            while (rs.next()) {
                HTTP_REQUEST_HOST = rs.getString("HTTP_REQUEST_HOST");
                HTTP_REQUEST_PATH = rs.getString("HTTP_REQUEST_PATH");
                HTTP_REQUEST_FILE = rs.getString("HTTP_REQUEST_FILE");
                f = new File(HostPath + HTTP_REQUEST_PATH + HTTP_REQUEST_FILE);
                if ((TARGET_PHP_FILES_ID = JavaDBAccess.ReadFile2DB(f, HTTP_REQUEST_HOST, HostPath, HTTP_REQUEST_PATH, JavaDBAccess, false)) > 0) {
                    ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_RUNS_FUNCTIONS SET TARGET_PHP_FILE=? WHERE HTTP_REQUEST_HOST=? AND HTTP_REQUEST_PATH=? AND HTTP_REQUEST_FILE=? AND TARGET_PHP_FILE IS NULL");
                    ps.setInt(1, TARGET_PHP_FILES_ID);
                    ps.setString(2, HTTP_REQUEST_HOST);
                    ps.setString(3, HTTP_REQUEST_PATH);
                    ps.setString(4, HTTP_REQUEST_FILE);
                    ps.executeUpdate();
                    ps.close();
                    JavaDBAccess2 = new DatabaseAccess(DBprops);
                    PHPFile.AnalyzePHPFile(JavaDBAccess2, f.getAbsolutePath());
                    JavaDBAccess2 = null;
                    //Process the PHP files that are included in the PHP file
                    JavaDBAccess.PHPFileIncludes(TARGET_PHP_FILES_ID, JavaDBAccess, PHPFile);
                }
            }
            rs.close();
            ps_http.close();
            s = conn.createStatement();
            //Update the TARGET_PHP_FILES_VARIABLE of the TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES
            s.executeUpdate("UPDATE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES SET TARGET_PHP_FILES_VARIABLE=(SELECT TARGET_PHP_FILES_VARIABLES.ID FROM TARGET_PHP_FILES_RUNS_FUNCTIONS, TARGET_PHP_FILES, TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_RUNS_FUNCTION=TARGET_PHP_FILES_RUNS_FUNCTIONS.ID AND TARGET_PHP_FILES_RUNS_FUNCTIONS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES_VARIABLES.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND '$'||TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.NAME=TARGET_PHP_FILES_VARIABLES.NAME AND TARGET_PHP_FILES.PATH LIKE '%'||TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_PATH||TARGET_PHP_FILES_RUNS_FUNCTIONS.HTTP_REQUEST_FILE) WHERE TARGET_PHP_FILES_VARIABLE IS NULL");
            //Update the AFFECT_SQL_DYNAMIC of the TARGET_PHP_FILES_VARIABLES
            s.executeUpdate("UPDATE TARGET_PHP_FILES_VARIABLES SET AFFECT_SQL_DYNAMIC='N' WHERE AFFECT_SQL_DYNAMIC='U'");
            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_VARIABLES SET AFFECT_SQL_DYNAMIC='Y' WHERE ID IN (SELECT TARGET_PHP_FILES_VARIABLE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES,HTTP_VARIABLES_SQL_QUERIES WHERE ID=TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLE AND MODE=?)");
            ps.setString(1, MODE);
            ps.executeUpdate();
            //Update the INPUT_VARIABLE of the TARGET_PHP_FILES_VARIABLES
            s.executeUpdate("UPDATE TARGET_PHP_FILES_VARIABLES SET INPUT_VARIABLE='N' WHERE INPUT_VARIABLE='U'");
            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_VARIABLES SET INPUT_VARIABLE='Y' WHERE ID IN (SELECT TARGET_PHP_FILES_VARIABLE FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE MODE=?)");
            ps.setString(1, MODE);
            ps.executeUpdate();
            //Update the DATA_TYPE according to the values existing in the HTTP data
            //DATA_TYPE CHAR is used in the cases where both NUMERIC and CHAR values are used in the variable
            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_VARIABLES SET DATA_TYPE=(SELECT MIN(DATA_TYPE) FROM TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES WHERE TARGET_PHP_FILES_VARIABLES.ID=TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES.TARGET_PHP_FILES_VARIABLE AND MODE=?)");
            ps.setString(1, MODE);
            ps.executeUpdate();
            ps.close();
            s.close();

            conn.commit();
            conn.close();


        } catch (Throwable e) {
            InspectionTextArea.setText("Errors in HTTP2WebApplication executed!");
            System.out.println(
                    "exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }

        }
    }

// Show dialog box with error message.
    private void showError(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage,
                "Error", JOptionPane.ERROR_MESSAGE);
    }
// Verify URL format.

    private URL verifyUrl(String url) {
// Only allow HTTP URLs.
        if (!url.toLowerCase().startsWith("http://")) {
            return null;
// Verify format of URL.



        }
        URL verifiedUrl = null;
        try {
            verifiedUrl = new URL(url);
        } catch (Exception e) {






            return null;
        }

        return verifiedUrl;
    }
    /* Show the specified page and add it to
    the page list if specified. */

    private void showPage(URL pageUrl, boolean addToList) {
        try {
// Get URL of page currently being displayed.
            URL currentUrl = displayEditorPane.getPage();
// Load and display specified page.
            displayEditorPane.setPage(pageUrl);
            //displayEditorPane.setPage("http://192.168.1.90/html/phd-mysql/index.php");
// Get URL of new page being displayed.
            URL newUrl = displayEditorPane.getPage();
// Add page to list if specified.
            if (addToList) {
                int listSize = pageList.size();
                if (listSize > 0) {
                    int pageIndex = pageList.indexOf(currentUrl.toString());

                    if (pageIndex < listSize - 1) {
                        for (int i = listSize - 1; i >
                                pageIndex; i--) {
                            pageList.remove(i);
                        }

                    }
                }
                pageList.add(newUrl.toString());
            }
// Update location packet field with URL of current page.
            locationTextField.setText(newUrl.toString());
// Update buttons based on the page being displayed.
            updateButtons();

        } catch (Exception e) {
// Show error message.





            showError(
                    "Unable to load page");
        } finally {
        }
    }
    /* Update Back and Forward buttons based on
    the page being displayed. */

    private void updateButtons() {
        if (pageList.size() < 2) {

            backButton.setEnabled(false);


            forwardButton.setEnabled(
                    false);
        } else {
            URL currentUrl = displayEditorPane.getPage();
            int pageIndex = pageList.indexOf(currentUrl.toString());
            backButton.setEnabled(pageIndex > 0);
            forwardButton.setEnabled(
                    pageIndex <
                    (pageList.size() - 1));
        }

    }
    // Handle hyperlinks being clicked.

    public void hyperlinkUpdate(HyperlinkEvent event) {
        HyperlinkEvent.EventType eventType = event.getEventType();
        if (eventType == HyperlinkEvent.EventType.ACTIVATED) {
            if (event instanceof HTMLFrameHyperlinkEvent) {
                HTMLFrameHyperlinkEvent linkEvent = (HTMLFrameHyperlinkEvent) event;
                HTMLDocument document = (HTMLDocument) displayEditorPane.getDocument();
                document.processHTMLFrameHyperlinkEvent(linkEvent);
            } else {




                showPage(event.getURL(), true);
            }

        }
    }
//------------------------------------------------------------------------------
//End Attack Operations
//------------------------------------------------------------------------------
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AddPHPFileButton;
    private javax.swing.JCheckBox AffectSQLDynamicCk;
    private javax.swing.JCheckBox AffectSQLStaticCk;
    private javax.swing.JButton AnalyzeMySQLPacketsButton;
    private javax.swing.JButton AnalyzePHPFileButton;
    private javax.swing.JButton ApplyPayloadButton;
    private javax.swing.JButton ApplySinglePayloadButton;
    private javax.swing.JButton ApplySingleVulnerabilityButton;
    private javax.swing.JTabbedPane AttackInjectorTabbedPane;
    private javax.swing.JPanel AttackPanel;
    private javax.swing.JTextArea AttackTextArea;
    private javax.swing.JButton CalculateAttackSuccessButton;
    private javax.swing.JCheckBox CaseSensitiveCB;
    private javax.swing.JRadioButton ClientServerRadioButton;
    private javax.swing.JButton CreateDatabaseButton;
    private javax.swing.JButton CreateDiffFilesButton;
    private javax.swing.JButton CreateVulnerabilityFilesButton;
    private javax.swing.JPanel DatabasePanel;
    private javax.swing.JLabel DatabaseStatusLabel;
    private javax.swing.JButton DecodeButton;
    private javax.swing.JButton DeleteAllDBDataButton;
    private javax.swing.JButton DeleteAttackDataButton;
    private javax.swing.JButton DeleteDiffButton;
    private javax.swing.JButton DeleteHTTPDataButton;
    private javax.swing.JButton DeleteHTTPProxyDBDataButton;
    private javax.swing.JButton DeleteMySQLDataButton;
    private javax.swing.JButton DeleteMySQLListenerDBDataButton;
    private javax.swing.JButton DeletePHPFileButton;
    private javax.swing.JButton DeleteResultsButton;
    private javax.swing.JButton DeleteStaticDataButton;
    private javax.swing.JButton DeleteVulnerabilityFilesButton;
    private javax.swing.JTextField Delimiter;
    private javax.swing.JRadioButton DoNotUseIDSRadioButton;
    private javax.swing.JRadioButton EmbeddedRadioButton;
    private javax.swing.JButton EncodeButton;
    private javax.swing.JList EncodeMethod;
    private javax.swing.JDialog Encode_DecodeBox;
    private javax.swing.JMenuItem Encode_DecodeMenuItem;
    private javax.swing.JTextArea EncodedText;
    private javax.swing.JButton ExecuteJavaDBSQLCommandButton;
    private javax.swing.JButton GenerateAttackPayloadsButton;
    private javax.swing.JPanel HTTPProxyPanel;
    private javax.swing.JTextField HTTPProxySourcePort;
    private javax.swing.JTextArea HTTPProxyTextArea;
    private javax.swing.JTextArea HTTPRequestTextArea;
    private javax.swing.JTextArea HTTPResponseTextArea;
    private javax.swing.JTextField HostPath;
    private javax.swing.JButton HostPathButton;
    private javax.swing.JPanel IDSPanel;
    private javax.swing.JButton IDSResultsButton;
    private javax.swing.JPanel InjectionPanel;
    private javax.swing.JPanel Inspection;
    private javax.swing.JLabel InspectionLabel;
    private javax.swing.JTextArea InspectionTextArea;
    private javax.swing.JDialog JavaDBSQLBox;
    private javax.swing.JTextArea JavaDBSQLCommand;
    private javax.swing.JTextArea JavaDBSQLResult;
    private javax.swing.JPanel ManualAttackPanel;
    private javax.swing.JButton MaxIDButton;
    private javax.swing.JTextField MessageText;
    private javax.swing.JPanel MiniBrowserPanel;
    private javax.swing.JComboBox ModeComboBox;
    private javax.swing.JButton MySQL2HTTPButton;
    private javax.swing.JPanel MySQLListenerPanel;
    private javax.swing.JTextField MySQLListenerProxyPort;
    private javax.swing.JTextArea MySQLListenerTextArea;
    private javax.swing.JDialog NotesBox;
    private javax.swing.JMenuItem NotesMenuItem;
    private javax.swing.JButton OpenVulnerabilityXMLButton;
    private javax.swing.JTextArea PHPFileTextArea;
    private javax.swing.JButton ParsePHPFileButton;
    private javax.swing.JComboBox PayloadHTTPSelectedComboBox;
    private javax.swing.JPanel PayloadPanel;
    private javax.swing.JComboBox PayloadSelectedComboBox;
    private javax.swing.JTextArea PlainText;
    private javax.swing.JButton ProcessVulnerabilityXMLButton;
    private javax.swing.JRadioButton RadioButtonText;
    private javax.swing.JButton ReadFileRegexButton;
    private javax.swing.JButton ReadRequestButton;
    private javax.swing.JButton RefreshPreviewButton;
    private javax.swing.JButton RefreshVulnerabilitiesButton;
    private javax.swing.JDialog RegexBox;
    private javax.swing.JTextField RegexFileName;
    private javax.swing.JTextField RegexFilePath;
    private javax.swing.JTextField RegexMatchTrueFalse;
    private javax.swing.JMenuItem RegexMenuItem;
    private javax.swing.JTable RegexResultTable;
    private javax.swing.JTextArea RegexSubjectString;
    private javax.swing.JTextField RegularExpression;
    private javax.swing.JButton RestoreMySQLDBButton;
    private javax.swing.JButton RestorePHPFilesButton;
    private javax.swing.JTextArea SQLInjectionAttackTextArea;
    private javax.swing.JTextArea SQLInjectionAttackTextArea1;
    private javax.swing.JTextArea SQLInjectionAttackTextArea2;
    private javax.swing.JMenuItem SQLMenuItem;
    private javax.swing.JComboBox SQLVariableSelectedComboBox;
    private javax.swing.JButton SendHTTPButton;
    private javax.swing.ButtonGroup ServerTypebuttonGroup;
    private javax.swing.JButton ShowAttackResultsButton;
    private javax.swing.JButton StartAttackButton;
    private javax.swing.JButton StartEmbeddedDatabaseButton;
    private javax.swing.JButton StartHTTPProxyButton;
    private javax.swing.JButton StartIDSButton;
    private javax.swing.JButton StartInspectionButton;
    private javax.swing.JButton StartMySQLListenerButton;
    private javax.swing.JButton StaticAnalysisButton;
    private javax.swing.JButton StopEmbeddedDatabaseButton;
    private javax.swing.JButton StopHTTPProxyButton;
    private javax.swing.JButton StopIDSButton;
    private javax.swing.JButton StopInspectionButton;
    private javax.swing.JButton StopMySQLListenerButton;
    private javax.swing.JComboBox SuccessPayloadSelectedComboBox;
    private javax.swing.JComboBox TargetPHPFileSelectedComboBox;
    private javax.swing.JPanel TargetPanel;
    private javax.swing.JButton TestRegexMatchButton;
    private javax.swing.JRadioButton UseIDSRadioButton;
    private javax.swing.ButtonGroup UseIDSbuttonGroup;
    private javax.swing.JButton ViewMySQLPacketsButton;
    private javax.swing.JButton ViewPHPFileButton;
    private javax.swing.JButton ViewResultsButton;
    private javax.swing.JButton VulnerabilityInjectionButton;
    private javax.swing.JTextArea VulnerabilityInjectionTextArea;
    private javax.swing.JComboBox VulnerabilitySelectedComboBox;
    private javax.swing.JTextField WebApplicationDatabaseRestoreCommand;
    private javax.swing.JTextField WebApplicationFileURL;
    private javax.swing.JTextField WebApplicationHOST;
    private javax.swing.JTextField WebApplicationIPAddress;
    private javax.swing.JTextField WebApplicationPHPFilesRestoreCommand;
    private javax.swing.JTextField WebApplicationPORT;
    private javax.swing.JTextField WebApplicationPort;
    private javax.swing.JTextField WebApplicationURL;
    private javax.swing.JTextField XMLFileName;
    private javax.swing.JTextArea XSSAttackBrowser;
    private javax.swing.JTextArea XSSAttackCode;
    private javax.swing.JTextArea XSSAttackDesc;
    private javax.swing.JTextField XSSAttackLabel;
    private javax.swing.JTextField XSSAttackName;
    private javax.swing.JList XSSAttackNames;
    private javax.swing.JButton backButton;
    private javax.swing.JButton closeEncode_DecodeBoxButton;
    private javax.swing.JButton closeHa_ckers_orgBoxButton;
    private javax.swing.JButton closeJavaDBSQLBoxButton;
    private javax.swing.JButton closeNotesBoxButton;
    private javax.swing.JButton closeRegexBoxButton;
    private javax.swing.JEditorPane displayEditorPane;
    private javax.swing.JEditorPane displayPreviewPane;
    private javax.swing.JButton forwardButton;
    private javax.swing.JButton goButton;
    private javax.swing.JDialog ha_ckers_orgBox;
    private javax.swing.JMenuItem hackersMenuItem;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JLabel jLDBSniffer;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel26;
    private javax.swing.JLabel jLabel27;
    private javax.swing.JLabel jLabel28;
    private javax.swing.JLabel jLabel29;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel30;
    private javax.swing.JLabel jLabel31;
    private javax.swing.JLabel jLabel32;
    private javax.swing.JLabel jLabel33;
    private javax.swing.JLabel jLabel34;
    private javax.swing.JLabel jLabel35;
    private javax.swing.JLabel jLabel36;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jPath;
    private javax.swing.JRadioButton jRadioButtonHex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane10;
    private javax.swing.JScrollPane jScrollPane11;
    private javax.swing.JScrollPane jScrollPane12;
    private javax.swing.JScrollPane jScrollPane13;
    private javax.swing.JScrollPane jScrollPane14;
    private javax.swing.JScrollPane jScrollPane15;
    private javax.swing.JScrollPane jScrollPane16;
    private javax.swing.JScrollPane jScrollPane17;
    private javax.swing.JScrollPane jScrollPane18;
    private javax.swing.JScrollPane jScrollPane19;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane20;
    private javax.swing.JScrollPane jScrollPane21;
    private javax.swing.JScrollPane jScrollPane22;
    private javax.swing.JScrollPane jScrollPane23;
    private javax.swing.JScrollPane jScrollPane24;
    private javax.swing.JScrollPane jScrollPane25;
    private javax.swing.JScrollPane jScrollPane26;
    private javax.swing.JScrollPane jScrollPane27;
    private javax.swing.JScrollPane jScrollPane28;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JScrollPane jScrollPane8;
    private javax.swing.JScrollPane jScrollPane9;
    private javax.swing.JTextPane jTPFile;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextArea jTextArea2;
    private javax.swing.JTextArea jTextArea3;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField locationTextField;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JMenuBar menuBar;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JLabel statusAnimationLabel;
    private javax.swing.JLabel statusMessageLabel;
    private javax.swing.JPanel statusPanel;
    private javax.swing.JMenu utilMenu;
    // End of variables declaration//GEN-END:variables
    private final Timer messageTimer;
    private final Timer busyIconTimer;
    private final Icon idleIcon;
    private final Icon[] busyIcons = new Icon[15];
    private int busyIconIndex = 0;
    private JDialog aboutBox;
}

