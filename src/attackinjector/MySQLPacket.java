/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.sql.*;
import java.util.Properties;
import java.util.regex.*;
import javax.sql.rowset.serial.SerialBlob;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author ze
 */
public class MySQLPacket {

    public String ViewMySQLPackets(DatabaseAccess JavaDBAccess) {
        Connection conn = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        String MySQLPackets = "";

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            ps = conn.prepareStatement("SELECT ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,PACKET_TIMESTAMP FROM MYSQL_PROXY_PACKETS");
            rs = ps.executeQuery();

            while (rs.next()) {
                Blob Packet = rs.getBlob("PROXY_PACKET");
                byte[] b;
                char ch;
                b = Packet.getBytes(1, (int) Packet.length());
                ch = (char) b[1];
                for (int i = 1; i <= Packet.length(); i++) {
                    MySQLPackets = MySQLPackets + i + " <-> " + Integer.toHexString(Packet.getBytes(i, 1)[0] & 0xff).toUpperCase() + "\r\n"; // & 0xff is to convert byte to unsigned int
                }
                MySQLPackets = MySQLPackets + "\r\n";
//                System.out.println(MySQLPackets);
            }
            rs.close();
            ps.close();
            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        return MySQLPackets;
    }

    public void AnalyzeMySQLPackets(DatabaseAccess JavaDBAccess) {
        AnalyzeMySQLPackets(JavaDBAccess, 0);
    }

    public void AnalyzeMySQLPackets(DatabaseAccess JavaDBAccess, int SERVER) {
        Connection conn = null;
        PreparedStatement ps = null;
        PreparedStatement ps_mysql_packets = null;
        PreparedStatement ps_mysql_queries = null;
        PreparedStatement ps_mysql_queries_variables = null;
        Statement s = null;
        ResultSet rs = null;
        ResultSet rs_client_packet = null;
        ResultSet rs_server_packet = null;
        ResultSet rs_client_server_packet = null;
        ResultSet rs_MySQL_queries = null;
        PreparedStatement ps_client_packet = null;
        PreparedStatement ps_server_packet = null;
        PreparedStatement ps_client_server_packet = null;
        Blob[] MySQLPackets = null;
        Properties MySQLPacketProps = new Properties();
        String Client_Server = "";
        int MYSQL_SEQUENCE = 0, LAST_MYSQL_SEQUENCE = 0, MYSQL_PACKETS_ID = 0, CLIENT_MYSQL_PACKET_NUMBER = 0, SERVER_MYSQL_PACKET_NUMBER = 0, ROW_COUNT = 0, MYSQL_QUERIES_ID = 0;
        int MYSQL_PROXY_PACKET_CLIENT, MYSQL_QUERY_SEQUENCE, MYSQL_QUERY_FIELD_COUNT, MYSQL_QUERY_ROW_COUNT, LAST_SERVER_MYSQL_PACKET_TYPE;
        String MYSQL_SEQUENCE_NAME, SQL_COMMAND, SQL_COMMAND_STRUCTURE;
        String[] SQL_COMMAND_STRUCTURE_VARIABLES = null;
        Timestamp MYSQL_QUERY_TIMESTAMP, MYSQL_RESPONSE_TIMESTAMP;
        String NAME = "", VALUE = "", DATA_TYPE = "";
        int count = 0;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            s = conn.createStatement();
            s.executeQuery("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE CLIENT_SERVER='C' AND SERVER IS NULL FOR UPDATE");
            s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M1 SET M1.SERVER=(SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=M1.THIS_THREAD_ID AND ID NOT IN (SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL)) WHERE M1.THIS_THREAD_ID<M1.PEER_THREAD_ID AND M1.SERVER IS NULL");
            conn.commit();

            if (SERVER == 0) {//All the records are subject to analyzis
                ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_QUERIES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_VARIABLES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES_VARIABLES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_PACKETS");
                ps.executeUpdate();

                ps = conn.prepareStatement("SELECT ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,PACKET_TIMESTAMP,CLIENT_SERVER FROM MYSQL_PROXY_PACKETS");
                rs = ps.executeQuery();
            } else {//When this is called from the MySQLListener Thread only the relevant records are selected
                ps = conn.prepareStatement("SELECT ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,PACKET_TIMESTAMP,CLIENT_SERVER FROM MYSQL_PROXY_PACKETS WHERE ID=? OR SERVER=?");
                ps.setInt(1, SERVER);
                ps.setInt(2, SERVER);
                rs = ps.executeQuery();
            }

            while (rs.next()) {

                Blob Packet = rs.getBlob("PROXY_PACKET");
                MySQLPackets = getMySQLPackets(JavaDBAccess, Packet);// Obtains the individual MySQL packets contained in every proxy packet
                for (int PACKET_SEQUENCE = 1; PACKET_SEQUENCE < MySQLPackets.length; PACKET_SEQUENCE++) {
                    if (MySQLPackets[PACKET_SEQUENCE] != null) {
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "");
                        MySQLPacketProps.put("MYSQL_PACKET_NUMBER", "");
                        MySQLPacketProps.put("IN_TRANSACTION", "0");
                        MySQLPacketProps.put("AUTO_COMMIT", "0");
                        MySQLPacketProps.put("USERNAME", "");
                        MySQLPacketProps.put("DATABASENAME", "");
                        MySQLPacketProps.put("SQL_COMMAND", "");
                        MySQLPacketProps.put("AFFECTED_ROWS", "0");
                        MySQLPacketProps.put("WARNING_COUNT", "0");
                        MySQLPacketProps.put("SERVER_STATUS", "0");
                        MySQLPacketProps.put("ERRNO", "0");
                        MySQLPacketProps.put("MESSAGE", "");
                        MySQLPacketProps.put("FIELD_COUNT", "0");

                        DiscoverMySQLPacket(rs.getString("CLIENT_SERVER"), PACKET_SEQUENCE, MySQLPackets[PACKET_SEQUENCE], MySQLPacketProps);
                        ps = conn.prepareStatement("INSERT INTO MYSQL_PACKETS (ID,MYSQL_PROXY_PACKET,PACKET_SEQUENCE,MYSQL_PACKET,MYSQL_PACKET_TIMESTAMP,MYSQL_PACKET_NUMBER,MYSQL_PACKET_TYPE,USERNAME,DATABASENAME,SQL_COMMAND,FIELD_COUNT,IN_TRANSACTION,AUTO_COMMIT,SERVER_STATUS,CLIENT_SERVER) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                        ps.setString(1, rs.getString("ID"));
                        ps.setInt(2, PACKET_SEQUENCE);
                        ps.setBlob(3, new SerialBlob(MySQLPackets[PACKET_SEQUENCE]));
                        ps.setTimestamp(4, rs.getTimestamp("PACKET_TIMESTAMP"));
                        ps.setInt(5, Integer.parseInt(MySQLPacketProps.getProperty("MYSQL_PACKET_NUMBER")));
                        ps.setInt(6, Integer.parseInt(MySQLPacketProps.getProperty("MYSQL_PACKET_TYPE")));
                        ps.setString(7, MySQLPacketProps.getProperty("USERNAME"));
                        ps.setString(8, MySQLPacketProps.getProperty("DATABASENAME"));
                        ps.setString(9, MySQLPacketProps.getProperty("SQL_COMMAND"));
                        ps.setInt(10, Integer.parseInt(MySQLPacketProps.getProperty("FIELD_COUNT")));
                        ps.setInt(11, Integer.parseInt(MySQLPacketProps.getProperty("IN_TRANSACTION")));
                        ps.setInt(12, Integer.parseInt(MySQLPacketProps.getProperty("AUTO_COMMIT")));
                        ps.setInt(13, Integer.parseInt(MySQLPacketProps.getProperty("SERVER_STATUS")));
                        ps.setString(14, rs.getString("CLIENT_SERVER"));
                        ps.executeUpdate();
                        ps.close();
                    }
                }
            }
            rs.close();
            ps.close();
            conn.commit();

            //Order MySQL_Packets
            if (SERVER == 0) {//All the records are subject to analyzis
                s = conn.createStatement();
                rs = s.executeQuery("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE ID IN (SELECT MYSQL_PROXY_PACKET FROM MYSQL_PACKETS WHERE MYSQL_SEQUENCE IS NULL) AND SERVER IS NOT NULL ORDER BY ID");
            } else {//When this is called from the MySQLListener Thread only the relevant records are selected
                ps = conn.prepareStatement("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER =? OR (ID=? AND SERVER IS NOT NULL)");
                ps.setInt(1, SERVER);
                ps.setInt(2, SERVER);
                rs = ps.executeQuery();
            }
            while (rs.next()) {
                ps_server_packet = conn.prepareStatement("SELECT ID, PACKET_SEQUENCE, MYSQL_PACKET_NUMBER, MYSQL_PACKET_TYPE, SQL_COMMAND, FIELD_COUNT, MYSQL_PACKET_TIMESTAMP FROM MYSQL_PACKETS WHERE MYSQL_PROXY_PACKET=? ORDER BY PACKET_SEQUENCE");
                ps_server_packet.setInt(1, rs.getInt("SERVER"));
                rs_server_packet = ps_server_packet.executeQuery();
                rs_server_packet.next();

                ps_client_packet = conn.prepareStatement("SELECT ID, PACKET_SEQUENCE, MYSQL_PACKET_NUMBER, MYSQL_PACKET_TYPE, SQL_COMMAND, FIELD_COUNT, MYSQL_PACKET_TIMESTAMP FROM MYSQL_PACKETS WHERE MYSQL_PROXY_PACKET=? ORDER BY PACKET_SEQUENCE");
                ps_client_packet.setInt(1, rs.getInt("ID"));
                rs_client_packet = ps_client_packet.executeQuery();
                rs_client_packet.next();

                LAST_MYSQL_SEQUENCE = -1;
                SERVER_MYSQL_PACKET_NUMBER = 0;
                CLIENT_MYSQL_PACKET_NUMBER = 0;
                MYSQL_SEQUENCE = 1;

                while (true) {
                    conn.commit();
                    if ((SERVER_MYSQL_PACKET_NUMBER == -1) & (CLIENT_MYSQL_PACKET_NUMBER == -1)) {
                        break;
                    }
                    if (SERVER_MYSQL_PACKET_NUMBER != -1) {
                        SERVER_MYSQL_PACKET_NUMBER = rs_server_packet.getInt("MYSQL_PACKET_NUMBER");
                    }
                    if (CLIENT_MYSQL_PACKET_NUMBER != -1) {
                        CLIENT_MYSQL_PACKET_NUMBER = rs_client_packet.getInt("MYSQL_PACKET_NUMBER");
                    }
                    if ((SERVER_MYSQL_PACKET_NUMBER == LAST_MYSQL_SEQUENCE + 1) || (SERVER_MYSQL_PACKET_NUMBER == 0 & LAST_MYSQL_SEQUENCE == 255) || (SERVER_MYSQL_PACKET_NUMBER == 0 & CLIENT_MYSQL_PACKET_NUMBER == 0)) {
                        MYSQL_PACKETS_ID = rs_server_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        LAST_MYSQL_SEQUENCE++;
                        if (!rs_server_packet.next()) {
                            SERVER_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (CLIENT_MYSQL_PACKET_NUMBER == LAST_MYSQL_SEQUENCE + 1) {
                        MYSQL_PACKETS_ID = rs_client_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        LAST_MYSQL_SEQUENCE++;
                        if (!rs_client_packet.next()) {
                            CLIENT_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (((SERVER_MYSQL_PACKET_NUMBER < CLIENT_MYSQL_PACKET_NUMBER) & (SERVER_MYSQL_PACKET_NUMBER != -1)) | ((CLIENT_MYSQL_PACKET_NUMBER == -1) & (SERVER_MYSQL_PACKET_NUMBER != -1))) {
                        MYSQL_PACKETS_ID = rs_server_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        LAST_MYSQL_SEQUENCE = SERVER_MYSQL_PACKET_NUMBER;
                        if (!rs_server_packet.next()) {
                            SERVER_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (((CLIENT_MYSQL_PACKET_NUMBER < SERVER_MYSQL_PACKET_NUMBER) & (CLIENT_MYSQL_PACKET_NUMBER != -1)) | ((SERVER_MYSQL_PACKET_NUMBER == -1) & (CLIENT_MYSQL_PACKET_NUMBER != -1))) {
                        MYSQL_PACKETS_ID = rs_client_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        LAST_MYSQL_SEQUENCE = CLIENT_MYSQL_PACKET_NUMBER;
                        if (!rs_client_packet.next()) {
                            CLIENT_MYSQL_PACKET_NUMBER = -1;
                        }
                    }
                    MYSQL_SEQUENCE++;
                }
                rs_client_packet.close();
                rs_server_packet.close();
                ps_client_packet.close();
                ps_server_packet.close();
            }
            rs.close();
            ps.close();
            conn.commit();

            //Insert into MySQL_Queries and MySQL_Queries_Variables
            if (SERVER == 0) {//All the records are subject to analyzis
                s = conn.createStatement();
                rs = s.executeQuery("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL ORDER BY ID");
            } else {//When this is called from the MySQLListener Thread only the relevant records are selected
                ps = conn.prepareStatement("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER =? OR (ID=? AND SERVER IS NOT NULL)");
                ps.setInt(1, SERVER);
                ps.setInt(2, SERVER);
                rs = ps.executeQuery();
            }
            while (rs.next()) {
                MYSQL_SEQUENCE_NAME = rs.getString("ID") + "-" + rs.getString("SERVER");
                ps_client_server_packet = conn.prepareStatement("SELECT ID, PACKET_SEQUENCE, MYSQL_PACKET_NUMBER, MYSQL_PACKET_TYPE, SQL_COMMAND, FIELD_COUNT, MYSQL_PACKET_TIMESTAMP, CLIENT_SERVER FROM MYSQL_PACKETS WHERE MYSQL_SEQUENCE_NAME=? ORDER BY MYSQL_SEQUENCE");
                ps_client_server_packet.setString(1, MYSQL_SEQUENCE_NAME);
                rs_client_server_packet = ps_client_server_packet.executeQuery();

                ROW_COUNT = -1;
                MYSQL_PROXY_PACKET_CLIENT = rs.getInt("ID");
                MYSQL_QUERY_SEQUENCE = 1;
                SQL_COMMAND = "";
                SQL_COMMAND_STRUCTURE = "";
                MYSQL_QUERY_FIELD_COUNT = 0;
                MYSQL_QUERY_ROW_COUNT = 0;
                MYSQL_QUERY_TIMESTAMP = null;
                MYSQL_RESPONSE_TIMESTAMP = null;
                LAST_SERVER_MYSQL_PACKET_TYPE = 0;

                while (rs_client_server_packet.next()) {
                    if (rs_client_server_packet.getString("CLIENT_SERVER").contentEquals("S")) {//It is a Server packet
                        LAST_SERVER_MYSQL_PACKET_TYPE = rs_client_server_packet.getInt("MYSQL_PACKET_TYPE");
                        if ((ROW_COUNT == -2) & (rs_client_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) {
                            ROW_COUNT = 0;//start looking for a packet of type 5
                        } else if ((ROW_COUNT >= 0) & (rs_client_server_packet.getInt("MYSQL_PACKET_TYPE") == 91)) {
                            ROW_COUNT++;
                        } else if (((ROW_COUNT >= 0) & (rs_client_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) | (ROW_COUNT == -3)) {

                            ps_mysql_packets = conn.prepareStatement("UPDATE MYSQL_PACKETS SET ROW_COUNT=? WHERE ID=?");
                            ps_mysql_packets.setInt(1, ROW_COUNT);
                            ps_mysql_packets.setInt(2, MYSQL_PACKETS_ID);
                            ps_mysql_packets.executeUpdate();
                            ps_mysql_packets.close();
                            MYSQL_QUERY_ROW_COUNT = ROW_COUNT;
                            MYSQL_RESPONSE_TIMESTAMP = rs_client_server_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                            ps_mysql_queries = conn.prepareStatement("INSERT INTO MYSQL_QUERIES (ID, MYSQL_PROXY_PACKET_CLIENT, MYSQL_SEQUENCE_NAME, MYSQL_QUERY_SEQUENCE, SQL_COMMAND, SQL_COMMAND_STRUCTURE, FIELD_COUNT, ROW_COUNT, MYSQL_QUERY_TIMESTAMP, MYSQL_RESPONSE_TIMESTAMP) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                            ps_mysql_queries.setInt(1, MYSQL_PROXY_PACKET_CLIENT);
                            ps_mysql_queries.setString(2, MYSQL_SEQUENCE_NAME);
                            ps_mysql_queries.setInt(3, MYSQL_QUERY_SEQUENCE);
                            ps_mysql_queries.setString(4, SQL_COMMAND);
                            ps_mysql_queries.setString(5, SQL_COMMAND_STRUCTURE);
                            ps_mysql_queries.setInt(6, MYSQL_QUERY_FIELD_COUNT);
                            ps_mysql_queries.setInt(7, MYSQL_QUERY_ROW_COUNT);
                            ps_mysql_queries.setTimestamp(8, MYSQL_QUERY_TIMESTAMP);
                            ps_mysql_queries.setTimestamp(9, MYSQL_RESPONSE_TIMESTAMP);
                            ps_mysql_queries.executeUpdate();
                            rs_MySQL_queries = ps_mysql_queries.getGeneratedKeys(); // get the auto increment column key value
                            rs_MySQL_queries.next();
                            MYSQL_QUERIES_ID = rs_MySQL_queries.getInt(1);
                            rs_MySQL_queries.close();
                            ps_mysql_queries.close();
                            MYSQL_QUERY_SEQUENCE++;
                            MYSQL_QUERY_FIELD_COUNT = 0;
                            ROW_COUNT = -1;
                            SQL_COMMAND = "";

                            NAME = "";
                            VALUE = "";
                            DATA_TYPE = "";
                            count = 0;
                            for (String Parameter : SQL_COMMAND_STRUCTURE_VARIABLES) {
                                if (count == 0) {//is the SQL_COMMAND_STRUCTURE
                                    count++;
                                    continue;
                                }
                                if (count == 1) {
                                    NAME = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 2) {
                                    VALUE = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 3) {
                                    DATA_TYPE = Parameter;
                                    count = 1;
                                    ps_mysql_queries_variables = conn.prepareStatement("INSERT INTO MYSQL_QUERIES_VARIABLES (ID,MYSQL_QUERY,NAME,VALUE,DATA_TYPE) VALUES (DEFAULT,?,?,?,?)");
                                    ps_mysql_queries_variables.setInt(1, MYSQL_QUERIES_ID);
                                    ps_mysql_queries_variables.setString(2, NAME);
                                    ps_mysql_queries_variables.setString(3, VALUE);
                                    ps_mysql_queries_variables.setString(4, DATA_TYPE);
                                    ps_mysql_queries_variables.executeUpdate();
                                    ps_mysql_queries_variables.close();
                                    NAME = "";
                                    VALUE = "";
                                    DATA_TYPE = "";
                                }
                            }
                        }
                    } else {//It is a Client packet
                        if (rs_client_server_packet.getInt("MYSQL_PACKET_TYPE") == 6) {
                            if (LAST_SERVER_MYSQL_PACKET_TYPE == 3) {//it is not a SELECT statement
                                ROW_COUNT = -3;//start looking for a packet of type 3
                            } else {//if rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 10
                                //it is a SELECT statement
                                ROW_COUNT = -2;//start looking for a packet of type 5
                            }
                            SQL_COMMAND = rs_client_server_packet.getString("SQL_COMMAND");
                            SQL_COMMAND_STRUCTURE_VARIABLES = getSQLCommandStructure(SQL_COMMAND);
                            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE_VARIABLES[0];
                            MYSQL_QUERY_TIMESTAMP = rs_client_server_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                        }
                    }
                }//end while
            }
            rs_client_server_packet.close();
            ps_client_server_packet.close();
            rs.close();
            ps.close();

            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

    public void AnalyzeMySQLPackets_old(DatabaseAccess JavaDBAccess, int SERVER) {
        Connection conn = null;
        PreparedStatement ps = null;
        Statement s = null;
        ResultSet rs = null;
        ResultSet rs_client_packet = null;
        ResultSet rs_server_packet = null;
        ResultSet rs_MySQL_queries = null;
        PreparedStatement ps_client_packet = null;
        PreparedStatement ps_server_packet = null;
        Blob[] MySQLPackets = null;
        Properties MySQLPacketProps = new Properties();
        String Client_Server = "";
        int MYSQL_SEQUENCE = 0, LAST_MYSQL_SEQUENCE = 0, MYSQL_PACKETS_ID = 0, CLIENT_MYSQL_PACKET_NUMBER = 0, SERVER_MYSQL_PACKET_NUMBER = 0, ROW_COUNT = 0, MYSQL_QUERIES_ID = 0;
        int MYSQL_PROXY_PACKET_CLIENT, MYSQL_QUERY_SEQUENCE, MYSQL_QUERY_FIELD_COUNT, MYSQL_QUERY_ROW_COUNT;
        String MYSQL_SEQUENCE_NAME, SQL_COMMAND, SQL_COMMAND_STRUCTURE;
        String[] SQL_COMMAND_STRUCTURE_VARIABLES = null;
        Timestamp MYSQL_QUERY_TIMESTAMP, MYSQL_RESPONSE_TIMESTAMP;
        String NAME = "", VALUE = "", DATA_TYPE = "";
        int count = 0;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            s = conn.createStatement();
            s.executeQuery("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE CLIENT_SERVER='C' AND SERVER IS NULL FOR UPDATE");
            s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M1 SET M1.SERVER=(SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=M1.THIS_THREAD_ID AND ID NOT IN (SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL)) WHERE M1.THIS_THREAD_ID<M1.PEER_THREAD_ID AND M1.SERVER IS NULL");
            conn.commit();

            if (SERVER == 0) {//All the records are subject to analyzis
                ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_QUERIES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM HTTP_VARIABLES_SQL_VARIABLES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES_VARIABLES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES");
                ps.executeUpdate();
                ps = conn.prepareStatement("DELETE FROM MYSQL_PACKETS");
                ps.executeUpdate();

                ps = conn.prepareStatement("SELECT ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,PACKET_TIMESTAMP,CLIENT_SERVER FROM MYSQL_PROXY_PACKETS");
                rs = ps.executeQuery();
            } else {//When this is called from the MySQLListener Thread only the relevant records are selected
                ps = conn.prepareStatement("SELECT ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,PACKET_TIMESTAMP,CLIENT_SERVER FROM MYSQL_PROXY_PACKETS WHERE ID=? OR SERVER=?");
                ps.setInt(1, SERVER);
                ps.setInt(2, SERVER);
                rs = ps.executeQuery();
            }

            while (rs.next()) {

                Blob Packet = rs.getBlob("PROXY_PACKET");
                MySQLPackets = getMySQLPackets(JavaDBAccess, Packet);// Obtains the individual MySQL packets contained in every proxy packet
                for (int PACKET_SEQUENCE = 1; PACKET_SEQUENCE < MySQLPackets.length; PACKET_SEQUENCE++) {
                    if (MySQLPackets[PACKET_SEQUENCE] != null) {
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "");
                        MySQLPacketProps.put("MYSQL_PACKET_NUMBER", "");
                        MySQLPacketProps.put("IN_TRANSACTION", "0");
                        MySQLPacketProps.put("AUTO_COMMIT", "0");
                        MySQLPacketProps.put("USERNAME", "");
                        MySQLPacketProps.put("DATABASENAME", "");
                        MySQLPacketProps.put("SQL_COMMAND", "");
                        MySQLPacketProps.put("AFFECTED_ROWS", "0");
                        MySQLPacketProps.put("WARNING_COUNT", "0");
                        MySQLPacketProps.put("SERVER_STATUS", "0");
                        MySQLPacketProps.put("ERRNO", "0");
                        MySQLPacketProps.put("MESSAGE", "");
                        MySQLPacketProps.put("FIELD_COUNT", "0");

                        DiscoverMySQLPacket(rs.getString("CLIENT_SERVER"), PACKET_SEQUENCE, MySQLPackets[PACKET_SEQUENCE], MySQLPacketProps);
                        ps = conn.prepareStatement("INSERT INTO MYSQL_PACKETS (ID,MYSQL_PROXY_PACKET,PACKET_SEQUENCE,MYSQL_PACKET,MYSQL_PACKET_TIMESTAMP,MYSQL_PACKET_NUMBER,MYSQL_PACKET_TYPE,USERNAME,DATABASENAME,SQL_COMMAND,FIELD_COUNT,IN_TRANSACTION,AUTO_COMMIT,SERVER_STATUS,CLIENT_SERVER) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                        ps.setString(1, rs.getString("ID"));
                        ps.setInt(2, PACKET_SEQUENCE);
                        ps.setBlob(3, new SerialBlob(MySQLPackets[PACKET_SEQUENCE]));
                        ps.setTimestamp(4, rs.getTimestamp("PACKET_TIMESTAMP"));
                        ps.setInt(5, Integer.parseInt(MySQLPacketProps.getProperty("MYSQL_PACKET_NUMBER")));
                        ps.setInt(6, Integer.parseInt(MySQLPacketProps.getProperty("MYSQL_PACKET_TYPE")));
                        ps.setString(7, MySQLPacketProps.getProperty("USERNAME"));
                        ps.setString(8, MySQLPacketProps.getProperty("DATABASENAME"));
                        ps.setString(9, MySQLPacketProps.getProperty("SQL_COMMAND"));
                        ps.setInt(10, Integer.parseInt(MySQLPacketProps.getProperty("FIELD_COUNT")));
                        ps.setInt(11, Integer.parseInt(MySQLPacketProps.getProperty("IN_TRANSACTION")));
                        ps.setInt(12, Integer.parseInt(MySQLPacketProps.getProperty("AUTO_COMMIT")));
                        ps.setInt(13, Integer.parseInt(MySQLPacketProps.getProperty("SERVER_STATUS")));
                        ps.setString(14, rs.getString("CLIENT_SERVER"));
                        ps.executeUpdate();
                        ps.close();
                    }
                }
            }
            rs.close();
            ps.close();
            conn.commit();

            if (SERVER == 0) {//All the records are subject to analyzis
                s = conn.createStatement();
                rs = s.executeQuery("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE ID IN (SELECT MYSQL_PROXY_PACKET FROM MYSQL_PACKETS WHERE MYSQL_SEQUENCE IS NULL) AND SERVER IS NOT NULL ORDER BY ID");
            } else {//When this is called from the MySQLListener Thread only the relevant records are selected
                ps = conn.prepareStatement("SELECT ID,SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER =? OR (ID=? AND SERVER IS NOT NULL)");
                ps.setInt(1, SERVER);
                ps.setInt(2, SERVER);
                rs = ps.executeQuery();
            }
            while (rs.next()) {
                ps_server_packet = conn.prepareStatement("SELECT ID, PACKET_SEQUENCE, MYSQL_PACKET_NUMBER, MYSQL_PACKET_TYPE, SQL_COMMAND, FIELD_COUNT, MYSQL_PACKET_TIMESTAMP FROM MYSQL_PACKETS WHERE MYSQL_PROXY_PACKET=? ORDER BY PACKET_SEQUENCE");
                ps_server_packet.setInt(1, rs.getInt("SERVER"));
                rs_server_packet = ps_server_packet.executeQuery();
                rs_server_packet.next();

                ps_client_packet = conn.prepareStatement("SELECT ID, PACKET_SEQUENCE, MYSQL_PACKET_NUMBER, MYSQL_PACKET_TYPE, SQL_COMMAND, FIELD_COUNT, MYSQL_PACKET_TIMESTAMP FROM MYSQL_PACKETS WHERE MYSQL_PROXY_PACKET=? ORDER BY PACKET_SEQUENCE");
                ps_client_packet.setInt(1, rs.getInt("ID"));
                rs_client_packet = ps_client_packet.executeQuery();
                rs_client_packet.next();

                LAST_MYSQL_SEQUENCE = -1;
                SERVER_MYSQL_PACKET_NUMBER = 0;
                CLIENT_MYSQL_PACKET_NUMBER = 0;
                MYSQL_SEQUENCE = 1;
                ROW_COUNT = -1;

                MYSQL_PROXY_PACKET_CLIENT = rs.getInt("ID");
                MYSQL_SEQUENCE_NAME = rs.getString("ID") + "-" + rs.getString("SERVER");
                MYSQL_QUERY_SEQUENCE = 1;
                SQL_COMMAND = "";
                SQL_COMMAND_STRUCTURE = "";
                MYSQL_QUERY_FIELD_COUNT = 0;
                MYSQL_QUERY_ROW_COUNT = 0;
                MYSQL_QUERY_TIMESTAMP = null;
                MYSQL_RESPONSE_TIMESTAMP = null;
                while (true) {
//                break;
                    if ((SERVER_MYSQL_PACKET_NUMBER == -1) & (CLIENT_MYSQL_PACKET_NUMBER == -1)) {
                        break;
                    }
                    if (SERVER_MYSQL_PACKET_NUMBER != -1) {
                        SERVER_MYSQL_PACKET_NUMBER = rs_server_packet.getInt("MYSQL_PACKET_NUMBER");
                        if (rs_server_packet.getInt("FIELD_COUNT") > MYSQL_QUERY_FIELD_COUNT) {
                            MYSQL_QUERY_FIELD_COUNT = rs_server_packet.getInt("FIELD_COUNT");
                        }
                    }
                    if (CLIENT_MYSQL_PACKET_NUMBER != -1) {
                        CLIENT_MYSQL_PACKET_NUMBER = rs_client_packet.getInt("MYSQL_PACKET_NUMBER");
                    }
                    if ((SERVER_MYSQL_PACKET_NUMBER == LAST_MYSQL_SEQUENCE + 1) || (SERVER_MYSQL_PACKET_NUMBER == 0 & LAST_MYSQL_SEQUENCE == 255) || (SERVER_MYSQL_PACKET_NUMBER == 0 & CLIENT_MYSQL_PACKET_NUMBER == 0)) {
                        MYSQL_PACKETS_ID = rs_server_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        if ((ROW_COUNT == -2) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) {
                            ROW_COUNT = 0;//start looking for a packet of type 5
                        } else if ((ROW_COUNT >= 0) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 91)) {
                            ROW_COUNT++;
                        } else if (((ROW_COUNT >= 0) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) | (ROW_COUNT == -3)) {
                            ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET ROW_COUNT=? WHERE ID=?");
                            ps.setInt(1, ROW_COUNT);
                            ps.setInt(2, MYSQL_PACKETS_ID);
                            ps.executeUpdate();
                            ps.close();
                            MYSQL_QUERY_ROW_COUNT = ROW_COUNT;
                            MYSQL_RESPONSE_TIMESTAMP = rs_server_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                            ps = conn.prepareStatement("INSERT INTO MYSQL_QUERIES (ID, MYSQL_PROXY_PACKET_CLIENT, MYSQL_SEQUENCE_NAME, MYSQL_QUERY_SEQUENCE, SQL_COMMAND, SQL_COMMAND_STRUCTURE, FIELD_COUNT, ROW_COUNT, MYSQL_QUERY_TIMESTAMP, MYSQL_RESPONSE_TIMESTAMP) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                            ps.setInt(1, MYSQL_PROXY_PACKET_CLIENT);
                            ps.setString(2, MYSQL_SEQUENCE_NAME);
                            ps.setInt(3, MYSQL_QUERY_SEQUENCE);
                            ps.setString(4, SQL_COMMAND);
                            ps.setString(5, SQL_COMMAND_STRUCTURE);
                            ps.setInt(6, MYSQL_QUERY_FIELD_COUNT);
                            ps.setInt(7, MYSQL_QUERY_ROW_COUNT);
                            ps.setTimestamp(8, MYSQL_QUERY_TIMESTAMP);
                            ps.setTimestamp(9, MYSQL_RESPONSE_TIMESTAMP);
                            ps.executeUpdate();
                            rs_MySQL_queries = ps.getGeneratedKeys(); // get the auto increment column key value
                            rs_MySQL_queries.next();
                            MYSQL_QUERIES_ID = rs_MySQL_queries.getInt(1);
                            rs_MySQL_queries.close();
                            ps.close();
                            MYSQL_QUERY_SEQUENCE++;
                            MYSQL_QUERY_FIELD_COUNT = 0;
                            ROW_COUNT = -1;
                            SQL_COMMAND = "";

                            NAME = "";
                            VALUE = "";
                            DATA_TYPE = "";
                            count = 0;
                            for (String Parameter : SQL_COMMAND_STRUCTURE_VARIABLES) {
                                if (count == 0) {//is the SQL_COMMAND_STRUCTURE
                                    count++;
                                    continue;
                                }
                                if (count == 1) {
                                    NAME = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 2) {
                                    VALUE = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 3) {
                                    DATA_TYPE = Parameter;
                                    count = 1;
                                    ps = conn.prepareStatement("INSERT INTO MYSQL_QUERIES_VARIABLES (ID,MYSQL_QUERY,NAME,VALUE,DATA_TYPE) VALUES (DEFAULT,?,?,?,?)");
                                    ps.setInt(1, MYSQL_QUERIES_ID);
                                    ps.setString(2, NAME);
                                    ps.setString(3, VALUE);
                                    ps.setString(4, DATA_TYPE);
                                    ps.executeUpdate();
                                    ps.close();
                                    NAME = "";
                                    VALUE = "";
                                    DATA_TYPE = "";
                                }
                            }
                        }
                        LAST_MYSQL_SEQUENCE++;
                        if (!rs_server_packet.next()) {
                            SERVER_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (CLIENT_MYSQL_PACKET_NUMBER == LAST_MYSQL_SEQUENCE + 1) {
                        MYSQL_PACKETS_ID = rs_client_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        if ((CLIENT_MYSQL_PACKET_NUMBER == 0) & (rs_client_packet.getInt("MYSQL_PACKET_TYPE") == 6)) {
                            if (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 3) {//it is not a SELECT statement
                                ROW_COUNT = -3;//start looking for a packet of type 3
                            } else {//if rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 10
                                //it is a SELECT statement
                                ROW_COUNT = -2;//start looking for a packet of type 5
                            }
                            SQL_COMMAND = rs_client_packet.getString("SQL_COMMAND");
                            SQL_COMMAND_STRUCTURE_VARIABLES = getSQLCommandStructure(SQL_COMMAND);
                            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE_VARIABLES[0];
                            MYSQL_QUERY_TIMESTAMP = rs_client_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                        }
                        LAST_MYSQL_SEQUENCE++;
                        if (!rs_client_packet.next()) {
                            CLIENT_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (((SERVER_MYSQL_PACKET_NUMBER < CLIENT_MYSQL_PACKET_NUMBER) & (SERVER_MYSQL_PACKET_NUMBER != -1)) | ((CLIENT_MYSQL_PACKET_NUMBER == -1) & (SERVER_MYSQL_PACKET_NUMBER != -1))) {
                        MYSQL_PACKETS_ID = rs_server_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        if ((ROW_COUNT == -2) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) {
                            ROW_COUNT = 0;//start looking for a packet of type 5
                        } else if ((ROW_COUNT >= 0) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 91)) {
                            ROW_COUNT++;
                        } else if (((ROW_COUNT >= 0) & (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 5)) | (ROW_COUNT == -3)) {
                            ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET ROW_COUNT=? WHERE ID=?");
                            ps.setInt(1, ROW_COUNT);
                            ps.setInt(2, MYSQL_PACKETS_ID);
                            ps.executeUpdate();
                            ps.close();
                            MYSQL_QUERY_ROW_COUNT = ROW_COUNT;
                            MYSQL_RESPONSE_TIMESTAMP = rs_server_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                            ps = conn.prepareStatement("INSERT INTO MYSQL_QUERIES (ID, MYSQL_PROXY_PACKET_CLIENT, MYSQL_SEQUENCE_NAME, MYSQL_QUERY_SEQUENCE, SQL_COMMAND, SQL_COMMAND_STRUCTURE, FIELD_COUNT, ROW_COUNT, MYSQL_QUERY_TIMESTAMP, MYSQL_RESPONSE_TIMESTAMP) VALUES (DEFAULT,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                            ps.setInt(1, MYSQL_PROXY_PACKET_CLIENT);
                            ps.setString(2, MYSQL_SEQUENCE_NAME);
                            ps.setInt(3, MYSQL_QUERY_SEQUENCE);
                            ps.setString(4, SQL_COMMAND);
                            ps.setString(5, SQL_COMMAND_STRUCTURE);
                            ps.setInt(6, MYSQL_QUERY_FIELD_COUNT);
                            ps.setInt(7, MYSQL_QUERY_ROW_COUNT);
                            ps.setTimestamp(8, MYSQL_QUERY_TIMESTAMP);
                            ps.setTimestamp(9, MYSQL_RESPONSE_TIMESTAMP);
                            ps.executeUpdate();
                            rs_MySQL_queries = ps.getGeneratedKeys(); // get the auto increment column key value
                            rs_MySQL_queries.next();
                            MYSQL_QUERIES_ID = rs_MySQL_queries.getInt(1);
                            rs_MySQL_queries.close();
                            ps.close();
                            MYSQL_QUERY_SEQUENCE++;
                            MYSQL_QUERY_FIELD_COUNT = 0;
                            ROW_COUNT = -1;
                            SQL_COMMAND = "";

                            NAME = "";
                            VALUE = "";
                            DATA_TYPE = "";
                            count = 0;
                            for (String Parameter : SQL_COMMAND_STRUCTURE_VARIABLES) {
                                if (count == 0) {//is the SQL_COMMAND_STRUCTURE
                                    count++;
                                    continue;
                                }
                                if (count == 1) {
                                    NAME = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 2) {
                                    VALUE = Parameter;
                                    count++;
                                    continue;
                                }
                                if (count == 3) {
                                    DATA_TYPE = Parameter;
                                    count = 1;
                                    ps = conn.prepareStatement("INSERT INTO MYSQL_QUERIES_VARIABLES (ID,MYSQL_QUERY,NAME,VALUE,DATA_TYPE) VALUES (DEFAULT,?,?,?,?)");
                                    ps.setInt(1, MYSQL_QUERIES_ID);
                                    ps.setString(2, NAME);
                                    ps.setString(3, VALUE);
                                    ps.setString(4, DATA_TYPE);
                                    ps.executeUpdate();
                                    ps.close();
                                    NAME = "";
                                    VALUE = "";
                                    DATA_TYPE = "";
                                }
                            }
                        }
                        LAST_MYSQL_SEQUENCE = SERVER_MYSQL_PACKET_NUMBER;
                        if (!rs_server_packet.next()) {
                            SERVER_MYSQL_PACKET_NUMBER = -1;
                        }
                    } else if (((CLIENT_MYSQL_PACKET_NUMBER < SERVER_MYSQL_PACKET_NUMBER) & (CLIENT_MYSQL_PACKET_NUMBER != -1)) | ((SERVER_MYSQL_PACKET_NUMBER == -1) & (CLIENT_MYSQL_PACKET_NUMBER != -1))) {
                        MYSQL_PACKETS_ID = rs_client_packet.getInt("ID");
                        ps = conn.prepareStatement("UPDATE MYSQL_PACKETS SET MYSQL_SEQUENCE_NAME=?, MYSQL_SEQUENCE=? WHERE ID=?");
                        ps.setString(1, rs.getString("ID") + "-" + rs.getString("SERVER"));
                        ps.setInt(2, MYSQL_SEQUENCE);
                        ps.setInt(3, MYSQL_PACKETS_ID);
                        ps.executeUpdate();
                        ps.close();
                        if ((CLIENT_MYSQL_PACKET_NUMBER == 0) & (rs_client_packet.getInt("MYSQL_PACKET_TYPE") == 6)) {
                            if (rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 3) {//it is not a SELECT statement
                                ROW_COUNT = -3;//start looking for a packet of type 3
                            } else {//if rs_server_packet.getInt("MYSQL_PACKET_TYPE") == 10
                                //it is a SELECT statement
                                ROW_COUNT = -2;//start looking for a packet of type 5
                            }
                            SQL_COMMAND = rs_client_packet.getString("SQL_COMMAND");
                            SQL_COMMAND_STRUCTURE_VARIABLES = getSQLCommandStructure(SQL_COMMAND);
                            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE_VARIABLES[0];
                            MYSQL_QUERY_TIMESTAMP = rs_client_packet.getTimestamp("MYSQL_PACKET_TIMESTAMP");
                        }
                        LAST_MYSQL_SEQUENCE = CLIENT_MYSQL_PACKET_NUMBER;
                        if (!rs_client_packet.next()) {
                            CLIENT_MYSQL_PACKET_NUMBER = -1;
                        }
                    }
                    MYSQL_SEQUENCE++;
                }
                rs_client_packet.close();
                rs_server_packet.close();
                ps_client_packet.close();
                ps_server_packet.close();
            }

            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

    public void MySQLStructre(DatabaseAccess JavaDBAccess) {
        Connection conn = null;
        PreparedStatement ps = null;
        Statement s = null;
        ResultSet rs = null;
        int MYSQL_QUERIES_ID = 0;
        String SQL_COMMAND = "", SQL_COMMAND_STRUCTURE = "";
        String[] SQL_COMMAND_STRUCTURE_VARIABLES = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            s = conn.createStatement();
            rs = s.executeQuery("SELECT ID, SQL_COMMAND FROM MYSQL_QUERIES WHERE SQL_COMMAND_STRUCTURE IS NULL");
            while (rs.next()) {
                MYSQL_QUERIES_ID = rs.getInt("ID");
                SQL_COMMAND = rs.getString("SQL_COMMAND");
                SQL_COMMAND_STRUCTURE_VARIABLES = getSQLCommandStructure(SQL_COMMAND);
                SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE_VARIABLES[0];
                ps = conn.prepareStatement("UPDATE MYSQL_QUERIES SET SQL_COMMAND_STRUCTURE=? WHERE ID=?");
                ps.setString(1, SQL_COMMAND_STRUCTURE);
                ps.setInt(2, MYSQL_QUERIES_ID);
                ps.executeUpdate();
                ps.close();
            }
            conn.commit();
            rs.close();
            s.close();
            conn.close();

        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    private String[] getSQLCommandStructure(String SQL_COMMAND) {
        String SQL_COMMAND_STRUCTURE = "", Single_Quoted_String_value, Double_Quoted_String_value, Number_value, End_char, Variable_name, Variable_value, DATA_TYPE;
        String[] SQL_COMMAND_STRUCTURE_VARIABLES = new String[1000];
        Matcher existMatch = null;
        Pattern p = null;
        int existMatchStart = 0, existMatchEnd = 0, existMatchEndOld = 0, i = 0;


        int VariableNumber, GlobalVariableNumber;

        Single_Quoted_String_value = "$SINGLE_QUOTED_STRING_";
        Double_Quoted_String_value = "$DOUBLE_QUOTED_STRING_";
        Number_value = "$NUMBER_";
        End_char = "$";

        //see http://dev.mysql.com/doc/refman/5.0/en/identifiers.html for MySQL Schema Object Names
        //see http://dev.mysql.com/doc/refman/5.0/en/string-syntax.html for MySQL Strings
        //see http://www.regular-expressions.info/examplesprogrammer.html for some util regexp

        /*
        //remove CR LF
        SQL_COMMAND = SQL_COMMAND.replaceAll("\r\n", " ");
        SQL_COMMAND = SQL_COMMAND.replaceAll("\n", " ");
        SQL_COMMAND = SQL_COMMAND.replaceAll("\r", " ");
        
        //convert to lower case
        SQL_COMMAND=SQL_COMMAND.toLowerCase();
         */

        GlobalVariableNumber = 1;
        //Convert quoted strings into $SINGLE_QUOTED_STRING_X$
        VariableNumber = 1;
        existMatchEndOld = 0;
        SQL_COMMAND_STRUCTURE = "";
        p = Pattern.compile("'[^']*(?:''*)*'", Pattern.CASE_INSENSITIVE);// look for quoted Strings in the query. Quoted strings may have a ''
        existMatch = p.matcher(SQL_COMMAND);
        while (existMatch.find()) {
            existMatchStart = existMatch.start();
            existMatchEnd = existMatch.end();
            Variable_name = Single_Quoted_String_value + VariableNumber + End_char;
            Variable_value = SQL_COMMAND.substring(existMatchStart + 1, existMatchEnd - 1);
            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld, existMatchStart) + Variable_name;
            existMatchEndOld = existMatchEnd;
            VariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_name;
            GlobalVariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_value;
            GlobalVariableNumber++;
            DATA_TYPE = "CHAR";
            try {
                float f = Float.parseFloat(Variable_value);
                DATA_TYPE = "NUMERIC";
            } catch (Throwable e) {
            }
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = DATA_TYPE;
            GlobalVariableNumber++;
        }
        SQL_COMMAND = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld);

        //Convert double quoted strings into $DOUBLE_QUOTED_STRING_X$
        VariableNumber = 1;
        existMatchEndOld = 0;
        SQL_COMMAND_STRUCTURE = "";
        p = Pattern.compile("\"[^\"]*(?:\"\"*)*'", Pattern.CASE_INSENSITIVE);// look for double quoted Strings in the query. Double quoted strings may have a ""
        existMatch = p.matcher(SQL_COMMAND);
        while (existMatch.find()) {
            existMatchStart = existMatch.start();
            existMatchEnd = existMatch.end();
            Variable_name = Double_Quoted_String_value + VariableNumber + End_char;
            Variable_value = SQL_COMMAND.substring(existMatchStart + 1, existMatchEnd - 1);
            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld, existMatchStart) + Variable_name;
            existMatchEndOld = existMatchEnd;
            VariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_name;
            GlobalVariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_value;
            GlobalVariableNumber++;
            DATA_TYPE = "CHAR";
            try {
                float f = Float.parseFloat(Variable_value);
                DATA_TYPE = "NUMERIC";
            } catch (Throwable e) {
            }
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = DATA_TYPE;
            GlobalVariableNumber++;
        }
        SQL_COMMAND = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld);

        //Convert numbers into $NUMBER_X$
        VariableNumber = 1;
        existMatchEndOld = 0;
        SQL_COMMAND_STRUCTURE = "";
        p = Pattern.compile("\\b\\d+\\b", Pattern.CASE_INSENSITIVE);// look for numbers in the query. Numbers inside strings are ommited
        existMatch = p.matcher(SQL_COMMAND);
        while (existMatch.find()) {
            existMatchStart = existMatch.start();
            existMatchEnd = existMatch.end();
            Variable_name = Number_value + VariableNumber + End_char;
            Variable_value = SQL_COMMAND.substring(existMatchStart, existMatchEnd);
            SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld, existMatchStart) + Variable_name;
            existMatchEndOld = existMatchEnd;
            VariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_name;
            GlobalVariableNumber++;
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = Variable_value;
            GlobalVariableNumber++;
            DATA_TYPE = "CHAR";
            try {
                float f = Float.parseFloat(Variable_value);
                DATA_TYPE = "NUMERIC";
            } catch (Throwable e) {
            }
            SQL_COMMAND_STRUCTURE_VARIABLES[GlobalVariableNumber] = DATA_TYPE;
            GlobalVariableNumber++;
        }
        SQL_COMMAND_STRUCTURE = SQL_COMMAND_STRUCTURE + SQL_COMMAND.substring(existMatchEndOld);
        SQL_COMMAND_STRUCTURE_VARIABLES[0] = SQL_COMMAND_STRUCTURE;

        String[] Result = new String[GlobalVariableNumber];

        i = 0;
        for (i = 0; i < GlobalVariableNumber; i++) {
            Result[i] = SQL_COMMAND_STRUCTURE_VARIABLES[i];
        }
        return Result;
    }

    public void DeleteMySQLListenerDBData(DatabaseAccess JavaDBAccess) {
        Connection conn = null;
        PreparedStatement ps = null;
        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES_VARIABLES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_QUERIES");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_PACKETS");
            ps.executeUpdate();
            ps = conn.prepareStatement("DELETE FROM MYSQL_PROXY_PACKETS");
            ps.executeUpdate();
            ps.close();
            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    private void DiscoverMySQLPacket(String Client_Server, int PACKET_SEQUENCE, Blob Packet, Properties MySQLPacketProps) {
        String MYSQL_PACKET_NUMBER = "", USERNAME = "", DATABASENAME = "", SQL_COMMAND = "", FIELD_COUNT = "";
        int PACKET_TYPE = 0, IN_TRANSACTION = 0, AUTO_COMMIT = 0, SERVER_STATUS = 0;
        int i = 0;
        try {
            byte[] b = new byte[(int) Packet.length()];
            b = Packet.getBytes(1, (int) Packet.length());
            MYSQL_PACKET_NUMBER = String.valueOf((0x000000FF & ((short) b[3])));

            MySQLPacketProps.put("MYSQL_PACKET_NUMBER", MYSQL_PACKET_NUMBER);
            PACKET_TYPE = (int) b[4];
            if (Client_Server.contentEquals("S")) {//It is a packet sent by the MySQL Server
                if (PACKET_SEQUENCE == 1) {
                    if (MYSQL_PACKET_NUMBER.contentEquals("0")) { //it is the Handshake Initialisation Packet
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "1");
                    } else {
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "91");//Unknown Server Packet
                    }
                } else if (PACKET_TYPE == 0) {
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "3");//OK Server Packet
                } else if (PACKET_TYPE == -1) {//255
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "4");//Error Server Packet
                } else if (PACKET_TYPE == -2) {//254
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "5");//EOF Server Packet
                    if ((int) Packet.length() > 5) {
                        IN_TRANSACTION = (int) (b[7] & 0x01);
                        AUTO_COMMIT = (int) ((b[7] & 0x02) >> 1);
                        SERVER_STATUS = byteArrayToInt(b, 7, 2);
                        MySQLPacketProps.put("IN_TRANSACTION", String.valueOf(IN_TRANSACTION));
                        MySQLPacketProps.put("AUTO_COMMIT", String.valueOf(AUTO_COMMIT));
                        MySQLPacketProps.put("SERVER_STATUS", String.valueOf(SERVER_STATUS));
                    }
                } else if (MYSQL_PACKET_NUMBER.contentEquals("1")) { //it is the Result Set Header Packet
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "10");//Result Set Header Packet
                    FIELD_COUNT = String.valueOf(b[4]);
                    MySQLPacketProps.put("FIELD_COUNT", FIELD_COUNT);
                } else if (MYSQL_PACKET_NUMBER.contentEquals("2")) { //it is the Field Packet
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "11");//Field Packet
                } else {
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "91");//Unknown Server Packet
                }
            } else {//It is a packet sent by the MySQL Client
                if (PACKET_SEQUENCE == 1) {
                    if (MYSQL_PACKET_NUMBER.contentEquals("1")) { //it is the Handshake Initialisation Packet
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "1");
                        i = 36;
                        USERNAME = "";
                        while (b[i] > 0) {
                            USERNAME = USERNAME + (char) b[i];
                            i++;
                        }
                        MySQLPacketProps.put("USERNAME", USERNAME);
                    } else {
                        MySQLPacketProps.put("MYSQL_PACKET_TYPE", "92");//Unknown Client Packet
                    }
                } else if (PACKET_TYPE == 2) {//Request use database
                    DATABASENAME = "";
                    for (i = 5; i < (int) Packet.length(); i++) {
                        DATABASENAME = DATABASENAME + (char) b[i];
                    }
                    MySQLPacketProps.put("DATABASENAME", DATABASENAME);
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "8");//Request use database
                } else if (PACKET_TYPE == 3) {//Command Packet
                    SQL_COMMAND = "";
                    for (i = 5; i < (int) Packet.length(); i++) {
                        SQL_COMMAND = SQL_COMMAND + (char) b[i];
                    }
                    MySQLPacketProps.put("SQL_COMMAND", SQL_COMMAND);
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "6");//Command Packet                   
                } else if (PACKET_TYPE == 1) {//Request Quit
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "9");//Request Quit
                } else if (Integer.parseInt(MYSQL_PACKET_NUMBER) > 1) {
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "92");//Unknown Client Packet
                } else if (Integer.parseInt(MYSQL_PACKET_NUMBER) == 0) {
                    MySQLPacketProps.put("MYSQL_PACKET_TYPE", "92");//Unknown Client Packet
                }
            }
        } catch (Throwable e) {
            showError("DiscoverMySQLPacket error: " + e);
        }
    }

    private Blob[] getMySQLPackets(DatabaseAccess JavaDBAccess, Blob Packet) {
        Blob[] MySQLPackets = null;
        int MySQLPacketsID = 1;
        int pos = 1, MySQLPacketLength = 0;
        long PacketLength = 0;
        byte[] b = new byte[3];
        int extra = 0;

        try {
            PacketLength = Packet.length();
            //Sometimes there is an extraneous '\0' at the start of the packet and we need to bypass it
            /*
            if (Packet.getBytes(1, 1)[0] == 0x00) {
            extra = 1;
            }
            pos = pos + extra;
             */

            //First calculate the number of MySQL packets that are in the Packet in orther to define correctly the MySQLPackets
            pos = 1;
            MySQLPacketsID = 1;
            while (pos < PacketLength) {
                //Sometimes there is an extraneous '\0' at the start of the packet and we need to bypass it
                while ((Packet.getBytes(pos, 1)[0] == 0x00) & (pos + 1 < PacketLength)) {
                    pos++;
                }
                b = Packet.getBytes(pos, 3);
                MySQLPacketLength = byteArrayToInt(b, 1, 3);
                MySQLPacketsID++;
                pos = pos + MySQLPacketLength + 4 + extra;
//                MySQLListenerTextArea.setText(MySQLListenerTextArea.getText() + "\r\n\r\n" + MySQLPacketLength);
            }
            MySQLPackets = new Blob[MySQLPacketsID];

            //Now insert into the MySQLPackets the MySQL packets
            pos = 1;
            MySQLPacketsID = 1;
            while (pos < PacketLength) {
                //Sometimes there is an extraneous '\0' at the start of the packet and we need to bypass it
                while ((Packet.getBytes(pos, 1)[0] == 0x00) & (pos + 1 < PacketLength)) {
                    pos++;
                }
                b = Packet.getBytes(pos, 3);
                MySQLPacketLength = byteArrayToInt(b, 1, 3);
                MySQLPackets[MySQLPacketsID] = new SerialBlob(Packet.getBytes(pos, MySQLPacketLength + 4));
                MySQLPacketsID++;
                pos = pos + MySQLPacketLength + 4 + extra;
//                MySQLListenerTextArea.setText(MySQLListenerTextArea.getText() + "\r\n\r\n" + MySQLPacketLength);
            }

        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        return MySQLPackets;
    }

    /**
     * Convert the byte array to an int.
     *
     * @param b The byte array
     * @return The integer
     */
    public static int byteArrayToInt(byte[] b, int start, int length) {
        int result = 0;
        for (int j = length - 1; j >= 0; j--) {
            result = (result << 8) | (b[j + start - 1] & 0xFF);
        }
        return result;
    }
    // Show dialog box with error message.

    private void showError(String errorMessage) {
        JOptionPane.showMessageDialog(new JFrame(), errorMessage,
                "Error", JOptionPane.ERROR_MESSAGE);
    }
}
