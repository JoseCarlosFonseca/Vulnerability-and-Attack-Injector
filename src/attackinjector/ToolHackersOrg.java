/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.io.*;
import java.util.ArrayList;
import javax.swing.*;
import org.w3c.dom.*;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.DocumentBuilder;
import org.xml.sax.SAXException;
import org.xml.sax.SAXParseException;

/**
 *
 * @author ze
 */
public class ToolHackersOrg {

    private ArrayList XSSAttackNameArray = new ArrayList();
    private ArrayList XSSAttackCodeArray = new ArrayList();
    private ArrayList XSSAttackDescArray = new ArrayList();
    private ArrayList XSSAttackLabelArray = new ArrayList();
    private ArrayList XSSAttackBrowserArray = new ArrayList();
    private DefaultListModel MyJListModel;

    ToolHackersOrg(javax.swing.JList XSSAttackNames) {
        MyJListModel = new DefaultListModel();
        XSSAttackNames.setModel(MyJListModel);

    }

    public void OpenVulnerabilityXML(javax.swing.JTextField XMLFileName) {
        String filename = "." + File.separator;

        JFileChooser fc = new JFileChooser(new File(filename));
        fc.setDialogTitle("Open xssAttacks.xml program to get its location");
        // Show open dialog; this method does not return until the dialog is closed
        int returnVal = fc.showOpenDialog(new JFrame());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            System.out.println("You chose to open this file: " + fc.getSelectedFile().getName());
            XMLFileName.setText(fc.getSelectedFile().getParent() + File.separator + fc.getSelectedFile().getName());
        } else {
//            System.out.println("You chose not to open file");
            }
    }

    public void ProcessVulnerabilityXML(javax.swing.JTextField XMLFileName, javax.swing.JTextField XSSAttackName, javax.swing.JTextArea XSSAttackCode, javax.swing.JTextArea XSSAttackDesc, javax.swing.JTextField XSSAttackLabel, javax.swing.JTextArea XSSAttackBrowser, javax.swing.JList XSSAttackNames) {
        //Adapted from: http://www.developerfusion.co.uk/show/2064/

        XSSAttackNameArray.clear();
        XSSAttackCodeArray.clear();
        XSSAttackDescArray.clear();
        XSSAttackLabelArray.clear();
        XSSAttackBrowserArray.clear();

        try {
            DocumentBuilderFactory docBuilderFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder docBuilder = docBuilderFactory.newDocumentBuilder();
            Document doc = docBuilder.parse(new File(XMLFileName.getText()));

            // normalize text representation
            doc.getDocumentElement().normalize();
            System.out.println("Root element of the doc is " + doc.getDocumentElement().getNodeName());

            NodeList listOfAttacks = doc.getElementsByTagName("attack");
            int totalAttacks = listOfAttacks.getLength();
            System.out.println("Total no of Attacks : " + totalAttacks);

            for (int s = 0; s < listOfAttacks.getLength(); s++) {

                Node firstAttackNode = listOfAttacks.item(s);
                if (firstAttackNode.getNodeType() == Node.ELEMENT_NODE) {


                    Element firstAttackElement = (Element) firstAttackNode;

                    //-------
                    NodeList nameList = firstAttackElement.getElementsByTagName("name");
                    Element nameElement = (Element) nameList.item(0);

                    NodeList textFNList = nameElement.getChildNodes();
                    System.out.println("Name : " + ((Node) textFNList.item(0)).getNodeValue().trim());
                    XSSAttackNameArray.add(((Node) textFNList.item(0)).getNodeValue().trim());
                    MyJListModel.addElement(((Node) textFNList.item(0)).getNodeValue().trim());

                    //-------
                    NodeList codeList = firstAttackElement.getElementsByTagName("code");
                    Element codeElement = (Element) codeList.item(0);

                    NodeList textCodeList = codeElement.getChildNodes();
                    System.out.println("Code : " + ((Node) textCodeList.item(0)).getNodeValue().trim());
                    XSSAttackCodeArray.add(((Node) textCodeList.item(0)).getNodeValue().trim());
                    //----
                    NodeList descList = firstAttackElement.getElementsByTagName("desc");
                    Element descElement = (Element) descList.item(0);

                    NodeList textDescList = descElement.getChildNodes();
                    System.out.println("Description : " + ((Node) textDescList.item(0)).getNodeValue().trim());
                    XSSAttackDescArray.add(((Node) textDescList.item(0)).getNodeValue().trim());

                    //----
                    NodeList labelList = firstAttackElement.getElementsByTagName("label");
                    Element labelElement = (Element) labelList.item(0);

                    NodeList textLabelList = labelElement.getChildNodes();
                    System.out.println("Label : " + ((Node) textLabelList.item(0)).getNodeValue().trim());
                    XSSAttackLabelArray.add(((Node) textLabelList.item(0)).getNodeValue().trim());

                    //----
                    NodeList browserList = firstAttackElement.getElementsByTagName("browser");
                    Element browserElement = (Element) browserList.item(0);

                    NodeList textBrowserList = browserElement.getChildNodes();
                    System.out.println("Browser : " + ((Node) textBrowserList.item(0)).getNodeValue().trim());
                    XSSAttackBrowserArray.add(((Node) textBrowserList.item(0)).getNodeValue().trim());
//------


                }//end of if clause


            }//end of for loop with s var


        } catch (SAXParseException err) {
            System.out.println("** Parsing error" + ", line " + err.getLineNumber() + ", uri " + err.getSystemId());
            System.out.println(" " + err.getMessage());

        } catch (SAXException e) {
            Exception x = e.getException();
            ((x == null) ? e : x).printStackTrace();

        } catch (Throwable t) {
            t.printStackTrace();
        }

        XSSAttackName.setText(XSSAttackNameArray.get(0).toString());
        XSSAttackCode.setText(XSSAttackCodeArray.get(0).toString());
        XSSAttackDesc.setText(XSSAttackDescArray.get(0).toString());
        XSSAttackLabel.setText(XSSAttackLabelArray.get(0).toString());
        XSSAttackBrowser.setText(XSSAttackBrowserArray.get(0).toString());
        XSSAttackNames.setSelectedIndex(0);
    }

    public void XSSAttackNamesValueChanged(javax.swing.JTextField XMLFileName, javax.swing.JTextField XSSAttackName, javax.swing.JTextArea XSSAttackCode, javax.swing.JTextArea XSSAttackDesc, javax.swing.JTextField XSSAttackLabel, javax.swing.JTextArea XSSAttackBrowser, javax.swing.JList XSSAttackNames) {
        try {
            XSSAttackName.setText(XSSAttackNameArray.get(XSSAttackNames.getSelectedIndex()).toString());
            XSSAttackCode.setText(XSSAttackCodeArray.get(XSSAttackNames.getSelectedIndex()).toString());
            XSSAttackDesc.setText(XSSAttackDescArray.get(XSSAttackNames.getSelectedIndex()).toString());
            XSSAttackLabel.setText(XSSAttackLabelArray.get(XSSAttackNames.getSelectedIndex()).toString());
            XSSAttackBrowser.setText(XSSAttackBrowserArray.get(XSSAttackNames.getSelectedIndex()).toString());
        } catch (Exception err) {
            err.printStackTrace();
        }
    }
}
