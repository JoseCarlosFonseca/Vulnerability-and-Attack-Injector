/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.io.*;
import java.net.*;
import java.sql.*;
import java.util.Properties;
import javax.sql.rowset.serial.SerialBlob;

/**
 *
 * @author ze
 */
public class MySQLListener extends Thread {

    public static final int DEFAULT_PORT = 18000;
    private ServerSocket server = null;
    private int thisPort = DEFAULT_PORT;
    private Properties props = null;
    private String MODE=null;

    public MySQLListener(int port, Properties DBprops, String MODE) {
        thisPort = port;
        this.props = new Properties();
        this.props = DBprops;
        this.MODE=MODE;
    }

    /* closeSocket will close the open ServerSocket; use this
     * to halt a running MySQLListener thread
     */
    public void closeSocket() {
        try {
            // close the open server socket
            server.close();
        } catch (Exception e) {
            System.out.println(e);
        }

        server = null;
    }

    public void run() {
        try {
            // create a server socket, and loop forever listening for
            // client connections
            server = new ServerSocket(thisPort);

            while (true && !isInterrupted()) {
                Socket client = server.accept();
                MySQLListenerThread t;
                t = new MySQLListenerThread(client, this.props, this.MODE);
                t.start();
            }
        } catch (Exception e) {
            System.out.println("MySQLListener Thread error: " + e);
        }

        closeSocket();
    }
}

class MySQLListenerThread extends Thread {

    private Socket pSocket;
    private Properties props = null;
    // Size of receive buffer
    public static final int bufSize = 65536;
    private DatabaseAccess JavaDBAccess;
    private String MODE=null;

    public MySQLListenerThread(Socket s, Properties DBprops, String MODE) {
        pSocket = s;
        this.props = new Properties();
        this.props = DBprops;
        this.MODE=MODE;
    }

    public void run() {
        byte[] buf = new byte[bufSize];
        int count = -1, MYSQL_PACKETS_ID, MYSQL_PROXY_PACKETS_ID = 0;
        String MySQLProxyPacketThreads = "";
        int pos1 = 0, pos2 = 0, pos3 = 0;
        String ThisThreadID = "";
        String PeerThreadID = "";
        String PeerThreadID2 = "";
        String Port = "";
        Connection conn = null;
        PreparedStatement ps = null;
        Statement s = null;
        ResultSet rs = null;
        byte[] line = new byte[bufSize];
        int i = 0, pos = 0;
        String Client_Server = "";
        int Server = 0;
        java.util.Date today = new java.util.Date();
        Timestamp Now = new java.sql.Timestamp(today.getTime());//This is gathered here in order to syncronize with the HTTP proxy
        try {
            JavaDBAccess = new DatabaseAccess(props);
            if ((conn = this.JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            InputStream in = pSocket.getInputStream();
            pos = 0;
            try {
                while (((count = in.read(buf)) > 0) && !isInterrupted()) {
                    for (i = 0; i < count; i++) {
                        line[i + pos] = buf[i];
                    }
                    if (pos == 0) {
                        MySQLProxyPacketThreads = new String(line, 0, count);
                    }
                    pos = i + pos + 1;
                }
                /*
                if (line[pos - 1] == 0) {
                pos--;
                }
                 */
                /*
                pos1 = -1;
                for (int j = pos - 1; j > 0; j--) {
                if (line[j - 1] == '\r' & line[j] == '\n') {
                pos1 = j + 1;
                for (int k = pos1; k <= pos- 1; k++) {
                if (line[k] < '0' | line[k] > '9') {
                break;
                }
                PeerThreadID = PeerThreadID + (char) line[k];
                }
                break;
                }
                }
                pos2 = -2;
                for (int j = pos1-3; j > 0; j--) {
                if (line[j - 1] == '\r' & line[j] == '\n') {
                pos2 = j + 1;
                for (int k = pos2; k <= pos1-3; k++) {
                if (line[k] < '0' | line[k] > '9') {
                break;
                }
                ThisThreadID = ThisThreadID + (char) line[k];
                }
                break;
                }
                }
                 */
                pos1 = pos - 1;
                pos1 = MySQLProxyPacketThreads.indexOf("\r\n");
                pos2 = -2;
                pos3 = -2;
                if (pos1 > 0) {
                    ThisThreadID = MySQLProxyPacketThreads.substring(0, pos1);
                    pos2 = MySQLProxyPacketThreads.indexOf("\r\n", pos1 + 2);
                    if (pos2 > 0) {
                        PeerThreadID = MySQLProxyPacketThreads.substring(pos1 + 2, pos2);
                        pos3 = MySQLProxyPacketThreads.indexOf("\r\n", pos2 + 2);
                        if (pos3 > 0) {
                            Port = MySQLProxyPacketThreads.substring(pos2 + 2, pos3);
                        } else {
                            pos3 = pos2;
                        }
                    } else {
                        pos3 = pos2 = pos1;
                    }
                }
                /*
                pos1 = MySQLProxyPacketThreads.indexOf("\r\n");
                pos2 = -2;
                if (pos1 > 0) {
                ThisThreadID = MySQLProxyPacketThreads.substring(0, pos1);
                pos2 = MySQLProxyPacketThreads.indexOf("\r\n", pos1 + 2);
                if (pos2 > 0) {
                PeerThreadID = MySQLProxyPacketThreads.substring(pos1 + 2, pos2);
                } else {
                pos2 = pos1;
                }
                }
                 */
                if (Port.contentEquals("13306")) {
                    Client_Server = "C";
                } else {
                    Client_Server = "S";
                }
                byte[] result = new byte[pos - 1 - pos3 - 2];
                for (i = 0; i < pos - 1 - pos3 - 2; i++) {
                    result[i] = line[i + pos3 + 2];
                }

                /*
                byte[] result = new byte[pos2-2];
                for (i = 0; i < pos2-2; i++) {
                result[i] = line[i];
                }
                 */
                Server = 0;
                if (Integer.parseInt(ThisThreadID) < Integer.parseInt(PeerThreadID)) {
                    Client_Server = "C";
                /*
                ps = conn.prepareStatement("SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=? AND ID NOT IN (SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL)");
                ps.setInt(1, Integer.parseInt(ThisThreadID));
                rs = ps.executeQuery();
                rs.next();
                MYSQL_PROXY_PACKETS_ID = rs.getInt(1);
                rs.close();
                ps.close();
                if (MYSQL_PROXY_PACKETS_ID > 0) {
                Server = MYSQL_PROXY_PACKETS_ID;
                }
                 */
                } else {
                    Client_Server = "S";
                }
                ps = conn.prepareStatement("INSERT INTO MYSQL_PROXY_PACKETS (ID,THIS_THREAD_ID,PEER_THREAD_ID,PROXY_PACKET,CLIENT_SERVER,SERVER,PACKET_TIMESTAMP,MODE) VALUES (DEFAULT,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                ps.setInt(1, Integer.parseInt(ThisThreadID));
                ps.setInt(2, Integer.parseInt(PeerThreadID));
                ps.setBlob(3, new SerialBlob(result));
                ps.setString(4, Client_Server);
                if (Server == 0) {
                    ps.setNull(5, java.sql.Types.INTEGER);
                } else {
                    ps.setInt(5, Server);
                }
                ps.setTimestamp(6, Now);
                ps.setString(7, MODE);
                ps.executeUpdate();

                rs = ps.getGeneratedKeys(); // get the auto increment column key value
                rs.next();
                MYSQL_PACKETS_ID = rs.getInt(1);
                rs.close();
                ps.close();
                /*
                if (Client_Server.contentEquals("S")) {
                ps = conn.prepareStatement("SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=? AND CLIENT_SERVER = 'C' AND SERVER IS NULL");
                ps.setInt(1, Integer.parseInt(ThisThreadID));
                rs = ps.executeQuery();
                rs.next();
                MYSQL_PROXY_PACKETS_ID = rs.getInt(1);
                rs.close();
                ps.close();
                if (MYSQL_PROXY_PACKETS_ID > 0) {
                ps = conn.prepareStatement("UPDATE MYSQL_PROXY_PACKETS SET SERVER=? WHERE ID=?");
                ps.setInt(1, MYSQL_PACKETS_ID);
                ps.setInt(2, MYSQL_PROXY_PACKETS_ID);
                ps.executeUpdate();
                ps.close();
                }
                }
                 */
                conn.commit();

                /*
                s = conn.createStatement();
                s.executeQuery("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE CLIENT_SERVER='C' AND SERVER IS NULL FOR UPDATE");
                s.executeUpdate("UPDATE MYSQL_PROXY_PACKETS M1 SET M1.SERVER=(SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=M1.THIS_THREAD_ID AND ID NOT IN (SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL)) WHERE M1.THIS_THREAD_ID<M1.PEER_THREAD_ID AND M1.SERVER IS NULL");
                conn.commit();
                s.close();
                 */
                /*
                count = 0;
                if (Client_Server.contentEquals("S")) {
                ps = conn.prepareStatement("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE CLIENT_SERVER='C' AND PEER_THREAD_ID=? AND SERVER IS NULL FOR UPDATE");
                ps.setInt(1, Integer.parseInt(ThisThreadID));
                rs = ps.executeQuery();
                if (rs.next()) {//if returns at least a row of data
                rs.close();
                ps = conn.prepareStatement("UPDATE MYSQL_PROXY_PACKETS SET SERVER=? WHERE CLIENT_SERVER = 'C' AND PEER_THREAD_ID=? AND SERVER IS NULL");
                ps.setInt(1, MYSQL_PACKETS_ID);
                ps.setInt(2, Integer.parseInt(ThisThreadID));
                count = ps.executeUpdate();
                ps.close();
                conn.commit();
                System.out.println("S - " + MYSQL_PACKETS_ID + " - " + ThisThreadID+" - "+count);
                } else {
                rs.close();
                }
                } else {
                ps = conn.prepareStatement("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE ID=? AND SERVER IS NULL FOR UPDATE");
                ps.setInt(1, MYSQL_PACKETS_ID);
                rs = ps.executeQuery();
                if (rs.next()) {//if returns at least a row of data
                rs.close();
                ps = conn.prepareStatement("UPDATE MYSQL_PROXY_PACKETS M1 SET M1.SERVER=(SELECT MIN(ID) FROM  MYSQL_PROXY_PACKETS WHERE PEER_THREAD_ID=M1.THIS_THREAD_ID AND ID NOT IN (SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL)) WHERE M1.ID=?");
                ps.setInt(1, MYSQL_PACKETS_ID);
                count = ps.executeUpdate();
                ps.close();
                conn.commit();
                System.out.println("C - " + MYSQL_PACKETS_ID + " - " + ThisThreadID+" - "+count);
                } else {
                rs.close();
                }
                }
                 */

                /*
                MySQLPacket MySQLPacket = new MySQLPacket();
                s = conn.createStatement();
                rs = s.executeQuery("SELECT SERVER FROM MYSQL_PROXY_PACKETS WHERE SERVER IS NOT NULL AND ID NOT IN (SELECT MYSQL_PROXY_PACKET FROM MYSQL_PACKETS)");
                while (rs.next()) {
                    MYSQL_PACKETS_ID = rs.getInt("SERVER");
                    MySQLPacket.AnalyzeMySQLPackets(JavaDBAccess, MYSQL_PACKETS_ID);
                }
                rs.close();
                s.close();
                */
                conn.close();

                pSocket.close();

//                if (MYSQL_PROXY_PACKETS_ID > 0) {//only when the server packet is connected to the client packet
//                if (count > 0) {//only when the SERVER column of the MYSQL_PROXY_PACKET SERVER table has been updated
//                    MySQLPacket MySQLPacket = new MySQLPacket();
//                    MySQLPacket.AnalyzeMySQLPackets(JavaDBAccess, MYSQL_PACKETS_ID);
//                }



            } catch (Exception xc) {
                System.out.println(xc);
                xc.printStackTrace();
            }
        } catch (Exception xc) {
            System.out.println(xc);
            xc.printStackTrace();
        }
    }
}