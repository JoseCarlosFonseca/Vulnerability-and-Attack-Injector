/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.io.*;
import java.util.regex.*;

/**
 *
 * @author ze
 */
public class ToolRegex {

    private javax.swing.table.DefaultTableModel MyRegexResultTmodel;
    private String LS = System.getProperty("line.separator"); //line terminator of the current system
    private String FS = LS; //line terminator of the ToolRegex SubjectString file

    ToolRegex(javax.swing.JTable RegexResultTable) {
        MyRegexResultTmodel = new javax.swing.table.DefaultTableModel();
        MyRegexResultTmodel.addColumn("Start");
        MyRegexResultTmodel.addColumn("End");
        MyRegexResultTmodel.addColumn("Line");
        MyRegexResultTmodel.addColumn("Column");
        MyRegexResultTmodel.addColumn("Result");

        RegexResultTable.setModel(MyRegexResultTmodel);
        RegexResultTable.getColumnModel().getColumn(0).setPreferredWidth(70);
        RegexResultTable.getColumnModel().getColumn(0).setMaxWidth(70);
        RegexResultTable.getColumnModel().getColumn(1).setPreferredWidth(70);
        RegexResultTable.getColumnModel().getColumn(1).setMaxWidth(70);
        RegexResultTable.getColumnModel().getColumn(2).setPreferredWidth(70);
        RegexResultTable.getColumnModel().getColumn(2).setMaxWidth(70);
        RegexResultTable.getColumnModel().getColumn(3).setPreferredWidth(70);
        RegexResultTable.getColumnModel().getColumn(3).setMaxWidth(70);
    }

    public void ReadFile(javax.swing.JTextField RegexFilePath, javax.swing.JTextField RegexFileName, javax.swing.JTextArea RegexSubjectString) {
        String line = null;
        //Ze using the StringBuffer is much more quick than any other way!!!!!
        StringBuffer buf = new StringBuffer();
        try {
            FS = TestSeparator(RegexFilePath.getText() + RegexFileName.getText());
            if (FS.isEmpty()) {
                FS = LS;
            }
            RegexSubjectString.setText("");
            // Open the file that is the first
            // command line parameter
            BufferedReader in = new BufferedReader(new FileReader(RegexFilePath.getText() + RegexFileName.getText()));
            while ((line = in.readLine()) != null) {
                buf.append(line + FS); //using the same line separator that is used by the original file
            }
            in.close();
            RegexSubjectString.setText(buf.toString());
        } catch (Exception e) {
            System.err.println("File input error");
        }
    }

    public void TestRegexMatch(javax.swing.JTextField RegularExpression, javax.swing.JCheckBox CaseSensitiveCB, javax.swing.JTextField RegexMatchTrueFalse, javax.swing.JTextArea RegexSubjectString) {
        Matcher existMatch;
        Integer existMatchStart = 0, existMatchEnd = 0, LastMatch = 0;

        try {
            while (MyRegexResultTmodel.getRowCount() > 0) {
                MyRegexResultTmodel.removeRow(0);
            }
            existMatch = ProcessRegex(RegularExpression.getText(), CaseSensitiveCB.isSelected(), RegexSubjectString, MyRegexResultTmodel, null);
            RegexMatchTrueFalse.setText("");
            if (existMatch.find()) {
                RegexMatchTrueFalse.setText("Successful match");
                System.out.println("0,4: " + MyRegexResultTmodel.getValueAt(0, 4));
                LastMatch = MyRegexResultTmodel.getRowCount();
                existMatchStart = Integer.parseInt(MyRegexResultTmodel.getValueAt(LastMatch - 1, 0).toString());
                existMatchEnd = Integer.parseInt(MyRegexResultTmodel.getValueAt(LastMatch - 1, 1).toString());
                RegexSubjectString.setCaretPosition(existMatchStart);
                RegexSubjectString.setSelectionStart(existMatchStart);
                RegexSubjectString.setSelectionEnd(existMatchEnd);

                RegexSubjectString.setCaretPosition(RegexSubjectString.getLineStartOffset(RegexSubjectString.getLineOfOffset(existMatchStart)));
                RegexSubjectString.setSelectionStart(RegexSubjectString.getLineStartOffset(RegexSubjectString.getLineOfOffset(existMatchStart)));
                RegexSubjectString.setSelectionEnd(RegexSubjectString.getLineEndOffset(RegexSubjectString.getLineOfOffset(existMatchStart)));

            } else {
                RegexMatchTrueFalse.setText("No match");
            }
        } catch (Exception e) {
            System.out.println(e);
        }
    }

    public void RegexResult(javax.swing.JTable RegexResultTable, javax.swing.JTextArea RegexSubjectString) {
        int startMatch = 0, endMatch = 0, line = 0;

        try {
            startMatch = Integer.parseInt(RegexResultTable.getValueAt(RegexResultTable.getSelectedRow(), 0).toString());
            endMatch = Integer.parseInt(RegexResultTable.getValueAt(RegexResultTable.getSelectedRow(), 1).toString());
            line = Integer.parseInt(RegexResultTable.getValueAt(RegexResultTable.getSelectedRow(), 2).toString());
            RegexSubjectString.setCaretPosition(startMatch);
            RegexSubjectString.setSelectionStart(startMatch);
            RegexSubjectString.setSelectionEnd(endMatch);

            System.out.println(line + "c" + line + "\n" + "" + "< " + RegexSubjectString.getText(startMatch, endMatch - startMatch) + "\n" + "> ");
        } catch (Exception e) {
            System.err.println("File input error");
        }
    }

    private String TestSeparator(String InputFileName) {
        //from: http://forum.java.sun.com/thread.jspa?threadID=595418&messageID=3142044
        java.io.BufferedReader br = null;
        int k = 0x0, temp = 0x0;
        String LineSeparator = "";
        try {
            br = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(InputFileName), "UTF8"));//file and encoding are arbitrary
            while ((k = br.read()) != -1) {
                if ((temp == (char) 0xd) && (k != (char) 0xa)) {
                    System.out.println();
                }
                if (k == (char) 0xd || k == (char) 0xa) {
                    if (k == (char) 0xd) {
                        System.out.print("r");
                        LineSeparator = LineSeparator + "\r";
                    }
                    if (k == (char) 0xa) {
                        System.out.print("n");
                        LineSeparator = LineSeparator + "\n";
                    }
                    if (temp == (char) 0xd || k == (char) 0xa) {
                        System.out.println();
                        return LineSeparator;
                    }
                }
                temp = k;
            }//end of while
            System.out.println("");
            br.close();
            return null;
        } catch (Exception e) {
            System.err.println("File input error");
            return null;
        }
    }

    private Matcher ProcessRegex(String RegExpText, boolean CaseSensitiveOption, javax.swing.JTextArea SubjectStringText, javax.swing.table.DefaultTableModel ResultTableModel, String ProcessRegex) {
        Matcher existMatch = null;
        Pattern p = null;
        int i = 0;
        int existMatchStart = 0, existMatchEnd = 0;

        try {
            if (CaseSensitiveOption) {
                p = Pattern.compile(RegExpText);
            } else {
                p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
            }

            existMatch = p.matcher(SubjectStringText.getText());

            while (existMatch.find()) {
                existMatchStart = existMatch.start();
                existMatchEnd = existMatch.end();
                ResultTableModel.insertRow(i, new Object[]{existMatchStart, existMatchEnd, SubjectStringText.getLineOfOffset(existMatchStart) + 1, existMatchStart - SubjectStringText.getLineStartOffset(SubjectStringText.getLineOfOffset(existMatchStart)) + 1, existMatch.group(), ProcessRegex});
//                System.out.println(SubjectString.getText(existMatch.start(), existMatch.end()-existMatch.start()));
                i++;
            }
        } catch (Exception e) {
            System.out.println(e);
        }
        if (existMatch != null) {
            existMatch.reset();
        }
        return existMatch;
    }
}
