/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.io.*;
import javax.swing.*;
import java.sql.*;
import java.util.regex.*;
import java.util.ArrayList;

/**
 *
 * @author ze
 */
public class PHPFileOperations {

    private String LS = System.getProperty("line.separator"); //line terminator of the current system

    public void AttackInjectorPHPFile() {
    }

    public void AddPHPFileToDatabase(DatabaseAccess JavaDBAccess, String host, String url, int port, String FileURL) {
        File PHPFile; //The PHP file where we want to inject the vulnerabilities

        String filename = "." + File.separator;
        Connection conn = null;

        JFileChooser fc = new JFileChooser(new File(filename));
        fc.setDialogTitle("Open VulnOpXSSAttacks.xml program to get its location");

        class MyFilter extends javax.swing.filechooser.FileFilter {

            public boolean accept(File file) {
                String filename = file.getName();
                return filename.endsWith(".php");
            }

            public String getDescription() {
                return "*.php";
            }
        }

//    fc.addChoosableFileFilter(new MyFilter());

        // Show open dialog; this method does not return until the dialog is closed
        int returnVal = fc.showOpenDialog(new JFrame());
        if (returnVal == JFileChooser.APPROVE_OPTION) {
//            System.out.println("You chose to open this file: " + fc.getSelectedFile().getName());
            PHPFile = fc.getSelectedFile();
            try {
                if ((conn = JavaDBAccess.setConn()) != null) {
                    System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
                } else {
                    throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
                }

                JavaDBAccess.ReadFile2DB(PHPFile, host, url, FileURL, JavaDBAccess, true);
            } catch (Throwable e) {
                System.out.println("exception thrown:");

                if (e instanceof SQLException) {
                    JavaDBAccess.printSQLError((SQLException) e);
                } else {
                    e.printStackTrace();
                }
            }

//        PHPFileTextClean = ReadFile(PHPFile);
        } else {
//            System.out.println("You chose not to open file");
        }
    }

    public void DeletePHPFileFromDatabase(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {
        PreparedStatement ps = null;
        Connection conn = null;

        try {
            int n = 0;
            n = JOptionPane.showConfirmDialog(new JFrame(), "Do you want to delete from the database\nthe vulnerability injection results\nand all the information related to the file\n" + TargetPHPFileSelectedComboBox + "?", "Attention!", JOptionPane.ERROR_MESSAGE, JOptionPane.YES_NO_OPTION);
            if (n == JOptionPane.YES_OPTION) {//updates the file

                if ((conn = JavaDBAccess.setConn()) != null) {
                    System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
                } else {
                    throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
                }

                conn.setAutoCommit(false);

                // Test to see if the Target PHP file is already in the DB
                ps = conn.prepareStatement("DELETE FROM VULNERABILITY_INJECTION_RESULTS WHERE ID IN (SELECT VULNERABILITY_INJECTION_RESULTS.ID FROM VULNERABILITY_INJECTION_RESULTS, TARGET_PHP_FILES WHERE TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH=?)");
                ps.setString(1, TargetPHPFileSelectedComboBox);
                ps.executeUpdate(); // get the result

                ps.close();
                // Test to see if the Target PHP file is already in the DB
                ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES WHERE TARGET_PHP_FILES.PATH=?");
                ps.setString(1, TargetPHPFileSelectedComboBox);
                ps.executeUpdate(); // get the result

                ps.close();
                conn.commit();
                ps.close();
                conn.close();
            }
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public String ViewPHPFileFromDatabase(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {
        String PHPFileText = null; //The text of the PHP file where we want to inject the vulnerabilities

        PreparedStatement ps = null;
        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);
            /*
            Creating a statement lets us issue commands against
            the connection.
             */
            Statement s = conn.createStatement();
            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            rs.next();
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileTextClean = "";
            while (c > 0) {
            //            System.out.print((char) c);
            
            PHPFileTextClean = PHPFileTextClean + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            rs.close();
            s.close();
            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        return PHPFileText;
    }

    public int FileMatchStartLine(String FileText, int CharNum) {
        int i = 0, j = 0;
        while (i < CharNum) {
            i = FileText.indexOf(LS, i + 1);
            if (i == -1) {
                break;
            }
            if (i < CharNum) {
                j = i;
            }
        }
        return j + LS.length();
    }

    public int FileMatchEndLine(String FileText, int CharNum) {
        int i = 0;
        while (i < CharNum) {
            i = FileText.indexOf(LS, i + 1);
            if (i == -1) {
                break;
            }
        }
        return i;
    }

    //recursively detect what follows the function name
    public int SearchEndChar(String FileText, int CharNumStart, char endChar) {
        int i = 0, l = FileText.length();
        char ch = ' ';
        try {
            i = CharNumStart;
            while (i < l) {
                if (i == -1) {
                    i = l;
                    break;
                }
                ch = FileText.charAt(i);
                if (ch == endChar) {//the endChar was found, so the function must exit
                    break;
                } else if (ch == '(' & i < l - 1) {// if a ( is found we must find first the corresponding )
                    i = SearchEndChar(FileText, i + 1, ')');
                } else if (ch == '{' & i < l - 1) {// if a { is found we must find first the corresponding }
                    i = SearchEndChar(FileText, i + 1, '}');
                } else if (ch == '\"' & i < l - 1) {// if a " is found we must find first the corresponding "
                    if (i > 0) {
                        if (FileText.charAt(i - 1) != '\\') {// the " is not escaped (it is not a /") so we have to find the next " that is also not escaped
                            while (i < l - 1) {
                                i = FileText.indexOf('\"', i + 1);
                                if (i == -1) {
                                    break;
                                }
                                if (FileText.charAt(i - 1) != '\\') {
                                    break;
                                }
                            }
                        }
                    } else {
                        while (i < l - 1) {
                            i = FileText.indexOf('\"', i + 1);
                            if (i == -1) {
                                break;
                            }
                            if (FileText.charAt(i - 1) != '\\') {
                                break;
                            }
                        }
                    }
                } else if (ch == '\'' & i < l - 1) {// if a ' is found we must find first the corresponding '
                    if (i > 0) {
                        if (FileText.charAt(i - 1) != '\\') {// the ' is not escaped (it is not a /') so we have to find the next ' that is also not escaped
                            while ((i < l - 1)) {
                                i = FileText.indexOf('\'', i + 1);
                                if (i == -1) {
                                    break;
                                }
                                if (FileText.charAt(i - 1) != '\\') {
                                    break;
                                }
                            }
                        }
                    } else {
                        while (i < l - 1) {
                            i = FileText.indexOf('\'', i + 1);
                            if (i == -1) {
                                break;
                            }
                            if (FileText.charAt(i - 1) != '\\') {
                                break;
                            }
                        }
                    }
                }
                i++;
            }
            return i;
        } catch (Exception e) {
            System.out.println("Errors in SearchEndChar!");
            e.printStackTrace();
            return l;
        }
    }

    public int SearchStartChar(String FileText, int CharNumStart, char startChar) {
        int i = 0;
        char ch = ' ';
        try {
            i = CharNumStart;
            while (i > 0) {
                if (i == -1) {
                    i = 0;
                    break;
                }
                ch = FileText.charAt(i);
                if (ch == startChar) {
                    break;
                } else if (ch == ')' & i > 0) {
                    i = SearchStartChar(FileText, i - 1, '(');
                } else if (ch == '}' & i > 0) {
                    i = SearchStartChar(FileText, i - 1, '{');
                } else if (ch == '\"') {
                    i = FileText.lastIndexOf('\"', i - 1);
                } else if (ch == '\'') {
                    i = FileText.lastIndexOf('\'', i - 1);
                }
                i--;
            }
            return i;
        } catch (Exception e) {
            e.printStackTrace();
            return 0;
        }
    }

    public int FileMatchLine(String FileText, int CharNum) {
        int i = 0, count = 1;
        while (i < CharNum) {
            i = FileText.indexOf(LS, i + 1);
            if (i == -1) {
                break;
            }
            if (i < CharNum) {
                count++;
            }
        }
        return count;
    }

    public int stringTrim(String TargetString, int CharNumStart) {
        int FileTextPointer = 0, FileTextLength = TargetString.length();
        try {
            FileTextPointer = CharNumStart;
            while ((FileTextPointer < FileTextLength - 1) & (TargetString.charAt(FileTextPointer) <= 0x20)) {
                FileTextPointer++;
            }
        } catch (Exception e) {
            e.printStackTrace();
            return FileTextPointer;
        }
        return FileTextPointer;
    }
    //Searches for the end of the string. The termination char of the string is the EndStringChar (that should be " or ')
    //It exludes the \EndStringChar

    public int SearchEndString(String TargetString, int CharNumStart, char EndStringChar) {
        int FileTextPointer = 0;
        try {
            FileTextPointer = CharNumStart;
            while (true) {
                FileTextPointer = TargetString.indexOf(EndStringChar, FileTextPointer + 1);
                if (FileTextPointer > 0) {
                    if (TargetString.charAt(FileTextPointer - 1) != '\\') {
                        break;
                    }
                } else {
                    break;
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
            return FileTextPointer;
        }
        return FileTextPointer;
    }

    //Searches for a target char in the same level in the string. It exludes pairs of (), {}, '', ""
    public int SearchLevelChar(String TargetString, int CharNumStart, char TargetChar) {
        int FileTextPointer = 0, FileTextLength = TargetString.length();
        char ch = ' ';
        try {
            FileTextPointer = CharNumStart;
            //recursively detect what follows
            while (FileTextPointer < FileTextLength) {
                if (FileTextPointer == -1) {//reached the end of the TargetString

                    break;
                }
                ch = TargetString.charAt(FileTextPointer);
                if (ch == TargetChar) {
                    break;
                } else if (ch == '(' & FileTextPointer < FileTextLength - 1) {
                    FileTextPointer = SearchEndChar(TargetString, FileTextPointer + 1, ')');
                } else if (ch == '{' & FileTextPointer < FileTextLength - 1) {
                    FileTextPointer = SearchEndChar(TargetString, FileTextPointer + 1, '}');
                } else if (ch == '\"') {
                    while (true) {
                        FileTextPointer = TargetString.indexOf('\"', FileTextPointer + 1);
                        if (FileTextPointer > 0) {
                            if (TargetString.charAt(FileTextPointer - 1) != '\\') {
                                break;
                            }
                            if (FileTextPointer == -1) {
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                } else if (ch == '\'') {
                    while (true) {
                        FileTextPointer = TargetString.indexOf('\'', FileTextPointer + 1);
                        if (FileTextPointer > 0) {
                            if (TargetString.charAt(FileTextPointer - 1) != '\\') {
                                break;
                            }
                            if (FileTextPointer == -1) {
                                break;
                            }
                        } else {
                            break;
                        }
                    }
                } else if (FileTextPointer < FileTextLength - 1) {
                    if (ch == '/' & TargetString.charAt(FileTextPointer + 1) == '/') {//If it is a comment // then skip to the end of line

                        FileTextPointer = TargetString.indexOf('\n', FileTextPointer);
                    }
                }
                FileTextPointer++;
            }
            return FileTextPointer;
        } catch (Exception e) {
            System.out.println("Errors in SearchLevelChar!");
            System.out.println("exception thrown:");
            e.printStackTrace();
            return FileTextLength;
        }
    }

    //Searches for a target char in the same level in the string going from the CharNumStart to the beginning of the string. It exludes pairs of (), {}, '', ""
    public int SearchLevelCharReverse(String TargetString, int CharNumStart, char TargetChar) {
        int FileTextPointer = 0;
        char ch = ' ';
        try {
            FileTextPointer = CharNumStart;
            //recursively detect what follows
            while (FileTextPointer > 0) {
                ch = TargetString.charAt(FileTextPointer);
                if (ch == TargetChar) {
                    break;
                } else if (ch == ')' & FileTextPointer > 0) {
                    FileTextPointer = SearchStartChar(TargetString, FileTextPointer - 1, '(');
                } else if (ch == '}' & FileTextPointer > 0) {
                    FileTextPointer = SearchStartChar(TargetString, FileTextPointer - 1, '{');
                } else if (ch == '\"') {
                    while (true) {
                        FileTextPointer = TargetString.lastIndexOf('\"', FileTextPointer - 1);
                        if (FileTextPointer == -1) {
                            break;
                        }
                        if (TargetString.charAt(FileTextPointer - 1) != '\\') {
                            break;
                        }
                    }
                } else if (ch == '\'') {
                    while (true) {
                        FileTextPointer = TargetString.lastIndexOf('\'', FileTextPointer - 1);
                        if (FileTextPointer == -1) {
                            break;
                        }
                        if (TargetString.charAt(FileTextPointer - 1) != '\\') {
                            break;
                        }
                    }

                }
                FileTextPointer--;
                if (FileTextPointer < 0) {//reached the end of the TargetString

                    FileTextPointer = -1;
                    break;
                }
            }
            return FileTextPointer;
        } catch (Exception e) {
            e.printStackTrace();
            return -1;
        }
    }

    public void ObtainPHPFileFunctions(DatabaseAccess JavaDBAccess, String TargetPHPFileSelected) {
        int TARGET_PHP_FILES_ID = 0, VariableLocation = 0, StartCharTargetLine = 0, EndCharTargetLine = 0, StartTargetLine = 0, EndTargetLine = 0;

        PreparedStatement ps = null;
        String PHPFileText = "", PHPFileTextClean = ""; //The text of the PHP file where we want to inject the vulnerabilities

        Matcher existMatch = null;
        Pattern p = null;
        int existMatchStart = 0, existMatchEnd = 0;
        ResultSet rs = null;

        int count = 0;
        String TargetFunction = "", RegExpText = "";
        Boolean CaseSensitiveOption = false;

        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT, CLEANED_TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelected);
            rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            System.out.println("Chave usada: " + TARGET_PHP_FILES_ID);
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileTextClean = "";
            while (c > 0) {
            //            System.out.print((char) c);
            
            PHPFileTextClean = PHPFileTextClean + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            PHPFileTextClean = rs.getString("CLEANED_TEXT");
            rs.close();

            try {
                // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
                ps = conn.prepareStatement("INSERT INTO TARGET_PHP_FILES_FUNCTIONS VALUES (0,NULL,'MAIN BODY',0,0,0,0)");
                ps.executeUpdate();
            } catch (Throwable e) { //When the function already exists. No problem
            }

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_FUNCTIONS WHERE TARGET_PHP_FILE=?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ps.executeUpdate();

            CaseSensitiveOption = false;
            RegExpText = "\\bfunction\\b\\s+[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // using the regex string: \bfunction\b\s+[a-zA-Z_\x7f-\xff][a-zA-Z0-9_\x7f-\xff]* to find all the PHP functions
            // The function name part of the regex string was found at http://pt2.php.net/manual/en/language.functions.php

            if (CaseSensitiveOption) {
                p = Pattern.compile(RegExpText);
            } else {
                p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
            }

            existMatch = p.matcher(PHPFileTextClean);

            while (existMatch.find()) {
                existMatchStart = existMatch.start();
                existMatchEnd = existMatch.end();
//                System.out.println(SubjectString.getText(existMatch.start(), existMatch.end()-existMatch.start()));
                //TargetFunction stores the function
                TargetFunction = PHPFileText.substring(existMatchStart, existMatchEnd).trim();
                TargetFunction = TargetFunction.substring(8, TargetFunction.length()).trim();
                StartCharTargetLine = FileMatchStartLine(PHPFileText, existMatchStart + 1);
                EndCharTargetLine = SearchEndChar(PHPFileText, existMatchStart, '{');
                EndCharTargetLine = SearchEndChar(PHPFileText, EndCharTargetLine + 1, '}');
                StartTargetLine = FileMatchLine(PHPFileText, existMatchStart + 1);
                EndTargetLine = FileMatchLine(PHPFileText, EndCharTargetLine);

                // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
                ps = conn.prepareStatement("INSERT INTO TARGET_PHP_FILES_FUNCTIONS VALUES (DEFAULT,?,?,?,?,?,?)");
                ps.setInt(1, TARGET_PHP_FILES_ID);
                ps.setString(2, TargetFunction);
                ps.setInt(3, StartCharTargetLine);
                ps.setInt(4, EndCharTargetLine);
                ps.setInt(5, StartTargetLine);
                ps.setInt(6, EndTargetLine);
                ps.executeUpdate();
            }
            ps.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in ObtainPHPFileFunctions!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

    public void ObtainPHPFileVariables(DatabaseAccess JavaDBAccess, String TargetPHPFileSelected) {
        int TARGET_PHP_FILES_ID = 0;
        PreparedStatement ps = null;
        String PHPFileText = "", PHPFileTextClean = ""; //The text of the PHP file where we want to inject the vulnerabilities

        String[] RegExpTextArray = new String[5];
        Matcher existMatch = null;
        Pattern p = null;
        int existMatchStart = 0, existMatchEnd = 0;
        ResultSet rs = null;

        int count = 0, RegExpTextArrayIndex = 0;
        String TargetVariable = "";
        Boolean CaseSensitiveOption = false;

        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT,CLEANED_TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelected);
            rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            System.out.println("Chave usada: " + TARGET_PHP_FILES_ID);
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileTextClean = "";
            while (c > 0) {
            //            System.out.print((char) c);
            
            PHPFileTextClean = PHPFileTextClean + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            PHPFileTextClean = rs.getString("CLEANED_TEXT");

            rs.close();
            // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table
            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_SQL_VARIABLES WHERE TARGET_PHP_FILES_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?)");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ps.executeUpdate();

            // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table
            ps = conn.prepareStatement("DELETE FROM VARIABLES_SQL_VARIABLES WHERE TARGET_PHP_FILES_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?) OR TARGET_PHP_FILES_SQL_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?)");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ps.setInt(2, TARGET_PHP_FILES_ID);
            ps.executeUpdate();

            ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_RUNS_FUNCTIONS_VARIABLES SET TARGET_PHP_FILES_VARIABLE=NULL WHERE TARGET_PHP_FILES_VARIABLE IN (SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?)");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ps.executeUpdate();

            ps = conn.prepareStatement("DELETE FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ps.executeUpdate();

            CaseSensitiveOption = true;

            RegExpTextArray[0] = "\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // Using the regex to find all the PHP variables.

            RegExpTextArray[1] = "(?<=\\$_GET\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // Using the regex to find all the PHP variables that come from the Superglobal variables $_GET

            RegExpTextArray[2] = "(?<=\\$HTTP_GET_VARS\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // Using the regex to find all the PHP variables that come from the Superglobal variables $HTTP_GET_VARS

            RegExpTextArray[3] = "(?<=\\$_POST\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // Using the regex to find all the PHP variables that come from the Superglobal variables $_POST

            RegExpTextArray[4] = "(?<=\\$_HTTP_POST_VARS\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // Using the regex to find all the PHP variables that come from the Superglobal variables $HTTP_POST_VARS

            //Superglobal variables
            //$_GET[
            //RegExpText = "(?<=\\$_GET\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*";
            //$HTTP_GET_VARS[
            //RegExpText = "(?<=\\$HTTP_GET_VARS\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*";
            //$_POST[
            //RegExpText = "(?<=\\$_POST\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*";
            //$HTTP_POST_VARS[
            //RegExpText = "(?<=\\$_HTTP_POST_VARS\\[')[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*";

            //RegExpText = "\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // using the regex to find all the PHP variables.
            // The regex string was found at http://pt2.php.net/language.variables
//            RegExpText = "\\$+\\count+"; // using the regex string: \$+\count+ to find all the PHP variables
//            for (int FileTextPointer = 0; FileTextPointer < 2; FileTextPointer++) {
//                if (FileTextPointer == 0) {
//                    RegExpText = "\\$+\\b\\count+\\b\\s*(?!\\[)"; // using the regex string: \$+\b\count+\b\s*(?!\[) to find the scalar PHP variables
//                } else {
//                    RegExpText = "\\$+\\b+\\count+\\b\\s*(?=\\[)"; // using the regex string: \$+\b\count+\b\s*(?=\[) to find the PHP variables arrays
//                }
            RegExpTextArrayIndex = 0;
            for (String RegExpText : RegExpTextArray) {
                if (CaseSensitiveOption) {
                    p = Pattern.compile(RegExpText);
                } else {
                    p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
                }

                existMatch = p.matcher(PHPFileTextClean);

                while (existMatch.find()) {
                    existMatchStart = existMatch.start();
                    existMatchEnd = existMatch.end();
//                System.out.println(SubjectString.getText(existMatch.start(), existMatch.end()-existMatch.start()));
                    //TargetFunction stores the function
                    if (RegExpTextArrayIndex == 0) {//Regular PHP variables

                        TargetVariable = PHPFileText.substring(existMatchStart, existMatchEnd).trim();
                    } else {//PHP variables that come from the Superglobal variables $_GET, $HTTP_GET_VARS, $_POST, $HTTP_POST_VARS

                        TargetVariable = "$" + PHPFileText.substring(existMatchStart, existMatchEnd).trim();
                    }
                    if (!TargetVariable.matches("(\\$_GET|\\$HTTP_GET_VARS|\\$_POST|\\$_HTTP_POST_VARS)")) {//The TargetVariable must not be the Superglobal Variable itself
                        // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table

                        ps = conn.prepareStatement("SELECT COUNT(*) FROM TARGET_PHP_FILES_VARIABLES WHERE NAME = ? AND TARGET_PHP_FILE=?");
                        ps.setString(1, TargetVariable);
                        ps.setInt(2, TARGET_PHP_FILES_ID);
                        rs = ps.executeQuery();
                        rs.next();
                        count = rs.getInt(1);
                        rs.close();
                        if (count == 0) {
                            // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table
                            ps = conn.prepareStatement("INSERT INTO TARGET_PHP_FILES_VARIABLES (ID, TARGET_PHP_FILE, NAME, AFFECT_SQL_STATIC, INPUT_VARIABLE, DEFAULT_TEST_VALUE, DATA_TYPE) VALUES (DEFAULT,?,?,?,?,?,?)");
                            ps.setInt(1, TARGET_PHP_FILES_ID);
                            ps.setString(2, TargetVariable);
                            ps.setString(3, "U"); //Unknow if affects SQL Injection or not

                            ps.setString(4, "U"); //INPUT_VARIABLE

                            ps.setNull(5, java.sql.Types.VARCHAR); //DEFAULT_TEST_VALUE

                            ps.setString(6, "U"); //DATA_TYPE

                            ps.executeUpdate();
                        }
                    }
                }
                RegExpTextArrayIndex++;
            }
            ps.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in ObtainPHPFileVariables!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

    public void AnalyzeFileVariables(DatabaseAccess JavaDBAccess, String TargetPHPFileSelected) {
        ArrayList VariableUnknownArray = new ArrayList();
        ArrayList VariableYesArray = new ArrayList();
        ArrayList VariableNoArray = new ArrayList();
        ArrayList VariableUnderProcessingArray = new ArrayList();

        int TARGET_PHP_FILES_ID = 0;
        PreparedStatement ps = null;
        String PHPFileText = "", PHPFileTextClean = ""; //The text of the PHP file where we want to inject the vulnerabilities

        int i = 0, j = 0;
        String UnknownVariable = "";
        Boolean Match = false;

        ResultSet rs = null;
        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT,CLEANED_TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelected);
            rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            System.out.println("Chave usada: " + TARGET_PHP_FILES_ID);
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileTextClean = "";
            while (c > 0) {
            //            System.out.print((char) c);
            PHPFileTextClean = PHPFileTextClean + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            PHPFileTextClean = rs.getString("CLEANED_TEXT");

            rs.close();
            VariableYesArray.clear();
            VariableNoArray.clear();
            VariableUnknownArray.clear();
            // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table
            ps = conn.prepareStatement("SELECT ID, NAME, AFFECT_SQL_STATIC FROM TARGET_PHP_FILES_VARIABLES WHERE TARGET_PHP_FILE=?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            rs = ps.executeQuery();
            while (rs.next()) {
                if (rs.getString(3).equalsIgnoreCase("Y")) {
                    VariableYesArray.add(rs.getString(2));
                } else if (rs.getString(3).equalsIgnoreCase("N")) {
                    VariableNoArray.add(rs.getString(2));
                } else { // if (rs.getString(3).equalsIgnoreCase("U"))

                    VariableUnknownArray.add(rs.getString(2));
                }
            }
            ps.close();

            for (i = 0; i < VariableUnknownArray.size(); i++) {
                UnknownVariable = VariableUnknownArray.get(i).toString();
                SearchVariables(JavaDBAccess, TARGET_PHP_FILES_ID, PHPFileText, PHPFileTextClean, VariableYesArray, VariableNoArray, VariableUnderProcessingArray, UnknownVariable, conn);
            }
            // update the VariableNoArray

            for (i = 0; i < VariableUnknownArray.size(); i++) {
                UnknownVariable = VariableUnknownArray.get(i).toString();
                Match = false;
                for (j = 0; j < VariableYesArray.size(); j++) {
                    if (UnknownVariable.equals(VariableYesArray.get(j))) {
                        Match = true;
                        break;
                    }
                }
                if (Match == false) {
                    VariableNoArray.add(UnknownVariable);
                }
            }
            VariableUnknownArray.clear();
            for (i = 0; i < VariableYesArray.size(); i++) {
                ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_VARIABLES SET AFFECT_SQL_STATIC= ? WHERE TARGET_PHP_FILE=? AND NAME=?");
                ps.setString(1, "Y");
                ps.setInt(2, TARGET_PHP_FILES_ID);
                ps.setString(3, VariableYesArray.get(i).toString());
                ps.executeUpdate();
                System.out.print("Yes: " + VariableYesArray.get(i) + "\n");
            }
            for (i = 0; i < VariableNoArray.size(); i++) {
                ps = conn.prepareStatement("UPDATE TARGET_PHP_FILES_VARIABLES SET AFFECT_SQL_STATIC= ? WHERE TARGET_PHP_FILE=? AND NAME=?");
                ps.setString(1, "N");
                ps.setInt(2, TARGET_PHP_FILES_ID);
                ps.setString(3, VariableNoArray.get(i).toString());
                ps.executeUpdate();
                System.out.print("No: " + VariableNoArray.get(i) + "\n");
            }
            for (i = 0; i < VariableUnknownArray.size(); i++) {
                System.out.print("Unknown: " + VariableUnknownArray.get(i) + "\n");
            }

            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in AnalyzeFileVariables!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }

    //Tells if the position VariableLocation is inside a PHP string
    //returns the start of the string or -1 if it is not inside a PHP string
    public int TextInsidePHPString(String PHPFileTextClean, int VariableLocation) {
        int index = 0, LastIndex = -1;
        int escapeCount = 0;

        boolean IsInsideDoubleQuoteString, IsInsideSingleQuoteString;

        IsInsideDoubleQuoteString = false;
        IsInsideSingleQuoteString = false;
        while (index < VariableLocation) {
            if (IsInsideDoubleQuoteString == true | IsInsideSingleQuoteString == true) {
                while (index < VariableLocation) {
                    escapeCount = 0;
                    while (PHPFileTextClean.charAt(index) == '\\') {
                        escapeCount++;
                        index++;
                    }
                    if (escapeCount % 2 != 0) {// % 	 	mod (remainder from integer division)
                        index++;
                    } else {
                        break;
                    }
                }
            }
            if (IsInsideDoubleQuoteString == false & IsInsideSingleQuoteString == false) {
                if (PHPFileTextClean.charAt(index) == '"') {
                    LastIndex = index;
                    IsInsideDoubleQuoteString = true;
                } else if (PHPFileTextClean.charAt(index) == '\'') {
                    LastIndex = index;
                    IsInsideSingleQuoteString = true;
                }
            } else if (IsInsideDoubleQuoteString == false & IsInsideSingleQuoteString == true) {
                if (PHPFileTextClean.charAt(index) == '\'') {
                    LastIndex = index;
                    IsInsideSingleQuoteString = false;
                }
            } else if (IsInsideDoubleQuoteString == true & IsInsideSingleQuoteString == false) {
                if (PHPFileTextClean.charAt(index) == '"') {
                    LastIndex = index;
                    IsInsideDoubleQuoteString = false;
                }
            }
            index++;
        }
        if (IsInsideDoubleQuoteString == true | IsInsideSingleQuoteString == true) {
            return LastIndex;
        } else {
            return -1;
        }
    }
    //This is a recursive function

    public void SearchVariables(DatabaseAccess JavaDBAccess, int TARGET_PHP_FILES_ID, String PHPFileText, String PHPFileTextClean, ArrayList VariableYesArray, ArrayList VariableNoArray, ArrayList VariableUnderProcessingArray, String UnknownVariable, Connection conn) {
        int UnknownVariableIndex = 0, i = 0, j = 0, count = 0, PHPFileTextLength = PHPFileTextClean.length();
        int VariableLocation = 0, StartCharTargetLine = 0, EndCharTargetLine = 0, StartTargetLine = 0, EndTargetLine = 0;
        Boolean Match = false;
        String Line = "", NewUnknownVariable = "", SQL_COMMAND_TYPE = "";
        PreparedStatement ps = null;
        ResultSet rs = null;
        int TARGET_PHP_FILES_VARIABLES_ID = 0, TARGET_PHP_FILES_FUNCTIONS_ID = 0, TARGET_PHP_FILES_SQL_VARIABLES_ID = 0;
        int pos1 = 0, pos2 = 0, pos3 = 0;
        int VariableLocationInsideString = -1;

        Boolean CaseSensitiveOption = false;
        String[] RegExpTextArray = new String[5];
        Matcher existMatch = null;
        Pattern p = null;
        int existMatchStart = 0, existMatchEnd = 0;
        int RegExpTextArrayIndex = 0;


        try {
            //Test to see if the UnknownVariable is already being processed (to avoid an endless recursive search)
            Match = false;
            for (UnknownVariableIndex = 0; UnknownVariableIndex < VariableUnderProcessingArray.size(); UnknownVariableIndex++) {
                if (UnknownVariable.equals(VariableUnderProcessingArray.get(UnknownVariableIndex))) {
                    Match = true;
                    break;
                }
            }
            for (UnknownVariableIndex = 0; UnknownVariableIndex < VariableYesArray.size(); UnknownVariableIndex++) {
                if (UnknownVariable.equals(VariableYesArray.get(UnknownVariableIndex))) {
                    Match = true;
                    break;
                }
            }
            if (Match == false) {
                for (UnknownVariableIndex = 0; UnknownVariableIndex < VariableNoArray.size(); UnknownVariableIndex++) {
                    if (UnknownVariable.equals(VariableNoArray.get(UnknownVariableIndex))) {
                        Match = true;
                        break;
                    }
                }
            }
            if (Match == false) { //Means that we still do not know if the variable is used or not in SQL Queries (vulnerable to SQL Injection)

                VariableUnderProcessingArray.add(UnknownVariable); //updates the VariableUnderProcessingArray by adding the UnknownVariable to it
                //get the lines of code where the variable is used

                VariableLocation = 0;


                CaseSensitiveOption = true;

                RegExpTextArray[0] = "\\" + UnknownVariable; // Using the regex to find all the PHP variables.

                RegExpTextArray[1] = "(?<=\\$_GET\\[')" + UnknownVariable.substring(1); // Using the regex to find all the PHP variables that come from the Superglobal variables $_GET

                RegExpTextArray[2] = "(?<=\\$HTTP_GET_VARS\\[')" + UnknownVariable.substring(1); // Using the regex to find all the PHP variables that come from the Superglobal variables $HTTP_GET_VARS

                RegExpTextArray[3] = "(?<=\\$_POST\\[')" + UnknownVariable.substring(1); // Using the regex to find all the PHP variables that come from the Superglobal variables $_POST

                RegExpTextArray[4] = "(?<=\\$_HTTP_POST_VARS\\[')" + UnknownVariable.substring(1); // Using the regex to find all the PHP variables that come from the Superglobal variables $HTTP_POST_VARS

                for (String RegExpText : RegExpTextArray) {
                    if (CaseSensitiveOption) {
                        p = Pattern.compile(RegExpText);
                    } else {
                        p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
                    }

                    existMatch = p.matcher(PHPFileTextClean);

                    while (existMatch.find()) {
                        existMatchStart = existMatch.start();
                        existMatchEnd = existMatch.end();
                        VariableLocation = existMatchStart;

                        // 1) The target variable may be in a multiline PHP command
                        // 2) In a PHP file text line there may be several PHP lines
                        VariableLocationInsideString = TextInsidePHPString(PHPFileTextClean, VariableLocation);
                        if (VariableLocationInsideString >= 0) {
                            pos1 = SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, ';') + 1;
                            pos2 = SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, '{') + 1;
                            pos3 = SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, '}') + 1;
                        } else {
                            pos1 = SearchLevelCharReverse(PHPFileTextClean, VariableLocation, ';') + 1;
                            pos2 = SearchLevelCharReverse(PHPFileTextClean, VariableLocation, '{') + 1;
                            pos3 = SearchLevelCharReverse(PHPFileTextClean, VariableLocation, '}') + 1;
                        }
                        if (pos1 >= pos2 & pos1 >= pos3) {
                            pos3 = pos1;
                        } else if (pos2 >= pos1 & pos2 >= pos3) {
                            pos3 = pos2;
                        }
                        if (pos3 < 0) {
                            pos3 = 0;
                        }
                        pos3 = stringTrim(PHPFileTextClean, pos3);
                        StartCharTargetLine = FileMatchStartLine(PHPFileTextClean, pos3);
                        StartTargetLine = FileMatchLine(PHPFileTextClean, StartCharTargetLine);

                        if (VariableLocationInsideString >= 0) {
                            VariableLocationInsideString = SearchEndString(PHPFileTextClean, VariableLocationInsideString, PHPFileTextClean.charAt(VariableLocationInsideString));
                            pos1 = SearchLevelChar(PHPFileTextClean, VariableLocationInsideString + 1, ';');
                            pos2 = SearchLevelChar(PHPFileTextClean, VariableLocationInsideString + 1, '{') - 1;
                        } else {
                            pos1 = SearchLevelChar(PHPFileTextClean, VariableLocation, ';');
                            pos2 = SearchLevelChar(PHPFileTextClean, VariableLocation, '{') - 1;
                        }

                        if (pos1 >= 0 & ((pos1 < pos2 & pos2 >= 0) | (pos2 < 0))) {
                            pos2 = pos1;
                        }
                        if (pos2 < 0) {
                            pos2 = PHPFileTextClean.length() - 1;
                        }
                        EndCharTargetLine = FileMatchEndLine(PHPFileTextClean, pos2);
                        EndTargetLine = FileMatchLine(PHPFileTextClean, EndCharTargetLine);

                        Line = PHPFileTextClean.substring(pos3, pos2 + 1);

                        // Is the variable used directly in a query?
                        SQL_COMMAND_TYPE = RegexTextInsidePHPString(PHPFileTextClean, Line.toLowerCase(), pos3, "(\\bselect\\b|\\binsert\\b|\\bdelete\\b|\\bupdate\\b)");
                        if (!SQL_COMMAND_TYPE.contentEquals("")) {// If the UnknownVariable is in a SQL Query with a SELECT, INSERT, DELETE or UPDATE
                            // Start a transaction by inserting a record in the TARGET_PHP_FILES_VARIABLES table

                            ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE NAME = ? AND TARGET_PHP_FILE=?");
                            ps.setString(1, UnknownVariable);
                            ps.setInt(2, TARGET_PHP_FILES_ID);
                            rs = ps.executeQuery();
                            rs.next();
                            TARGET_PHP_FILES_VARIABLES_ID = rs.getInt(1);
                            rs.close();

                            // Start a transaction by inserting a record in the TARGET_PHP_FILES_FUNCTIONS table
                            ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES_FUNCTIONS WHERE START_FUNCTION_LINE <= ? AND END_FUNCTION_LINE >= ? AND TARGET_PHP_FILE=?");
                            ps.setInt(1, StartTargetLine);
                            ps.setInt(2, EndTargetLine);
                            ps.setInt(3, TARGET_PHP_FILES_ID);
                            try {
                                rs = ps.executeQuery();
                                rs.next();
                                TARGET_PHP_FILES_FUNCTIONS_ID = rs.getInt(1);
                                rs.close();
                            } catch (Throwable e) {
                                TARGET_PHP_FILES_FUNCTIONS_ID = 0;
                            }

                            ps = conn.prepareStatement("INSERT INTO TARGET_PHP_FILES_SQL_VARIABLES VALUES (DEFAULT,?,?,?,?,?,?,?,?,?)", Statement.RETURN_GENERATED_KEYS);
                            ps.setInt(1, TARGET_PHP_FILES_VARIABLES_ID);
                            ps.setInt(2, TARGET_PHP_FILES_FUNCTIONS_ID);
                            ps.setString(3, UnknownVariable);
                            ps.setInt(4, StartCharTargetLine);
                            ps.setInt(5, EndCharTargetLine);
                            ps.setInt(6, StartTargetLine);
                            ps.setInt(7, EndTargetLine);
                            ps.setString(8, SQL_COMMAND_TYPE);
                            ps.setString(9, Line);
                            ps.executeUpdate();
                            rs = ps.getGeneratedKeys(); // get the auto increment column key value

                            rs.next();
                            TARGET_PHP_FILES_SQL_VARIABLES_ID = rs.getInt(1);
                            rs.close();
                            ps.close();

                            VariableYesArray.add(UnknownVariable);

                            break; //breaks the while loop and continues to the next variable

                        } else {// If the UnknownVariable is not used in a SQL query let's see if it is used in an assignment with a variable that is

                            NewUnknownVariable = VariableAssignmentInPHPString(Line, UnknownVariable);
                            if (NewUnknownVariable != null) {
                                SearchVariables(JavaDBAccess, TARGET_PHP_FILES_ID, PHPFileText, PHPFileTextClean, VariableYesArray, VariableNoArray, VariableUnderProcessingArray, NewUnknownVariable, conn);
                                for (i = 0; i < VariableYesArray.size(); i++) {
                                    if (NewUnknownVariable.equals(VariableYesArray.get(i))) {
                                        ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE NAME = ? AND TARGET_PHP_FILE=?");
                                        ps.setString(1, UnknownVariable);
                                        ps.setInt(2, TARGET_PHP_FILES_ID);
                                        rs = ps.executeQuery();
                                        rs.next();
                                        TARGET_PHP_FILES_VARIABLES_ID = rs.getInt(1);
                                        rs.close();

                                        ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE NAME= ? AND TARGET_PHP_FILE= ?");
                                        ps.setString(1, NewUnknownVariable);
                                        ps.setInt(2, TARGET_PHP_FILES_ID);
                                        rs = ps.executeQuery();
                                        rs.next();
                                        count = rs.getInt(1);
                                        rs.close();
                                        ps.close();

                                        ps = conn.prepareStatement("DELETE FROM VARIABLES_SQL_VARIABLES WHERE TARGET_PHP_FILES_VARIABLE=? AND TARGET_PHP_FILES_SQL_VARIABLE=?");
                                        ps.setInt(1, TARGET_PHP_FILES_VARIABLES_ID);
                                        ps.setInt(2, count);
                                        ps.executeUpdate();
                                        ps.close();

                                        ps = conn.prepareStatement("INSERT INTO VARIABLES_SQL_VARIABLES (TARGET_PHP_FILES_VARIABLE,TARGET_PHP_FILES_SQL_VARIABLE) VALUES (?,?)");
                                        ps.setInt(1, TARGET_PHP_FILES_VARIABLES_ID);
                                        ps.setInt(2, count);
                                        ps.executeUpdate();
                                        ps.close();

                                        for (j = 0; j < VariableYesArray.size(); j++) {
                                            if (UnknownVariable.equals(VariableYesArray.get(j))) {
                                                VariableYesArray.remove(j);
                                            }
                                        }
                                        VariableYesArray.add(UnknownVariable);

                                        break; //breaks the while loop and continues to the next variable

                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (Throwable e) {
            System.out.println("Errors in SearchVariables!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public String VariableAssignmentInPHPString(String Line, String UnknownVariable) {
        String ReturnVariable = null, NewUnknownVariable = null, RegExpText, LineEnd = null;
        int positionUnknownVariable = 0, positionNewUnknownVariable = 0, positionEqual = 0, existMatchStart = 0, existMatchEnd = 0, positionLineEnd = 0;
        boolean CaseSensitiveOption;

        Matcher existMatch = null;
        Pattern p = null;

        CaseSensitiveOption = true;
        RegExpText = "\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // using the regex to find all the PHP variables.
        // The regex string was found at http://pt2.php.net/language.variables
//        RegExpText = "\\$+\\count+"; // using the regex string: \$+\count+ to find all the PHP variables

        try {
            if (CaseSensitiveOption) {
                p = Pattern.compile(RegExpText);
            } else {
                p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
            }

            existMatch = p.matcher(Line);

            if (existMatch.find()) {//we are only interested in the first variable found

                existMatchStart = existMatch.start();
                existMatchEnd = existMatch.end();
                NewUnknownVariable = Line.substring(existMatchStart, existMatchEnd).trim();
                if (!NewUnknownVariable.equals(UnknownVariable)) {

                    //TargetFunction stores the function
                    LineEnd = Line.substring(existMatchEnd).trim();
                    positionLineEnd = 0;
                    if (LineEnd.startsWith("[")) {
                        positionLineEnd = 1;
                    }
                    while (positionLineEnd == 1) {
                        positionLineEnd = SearchEndChar(LineEnd, 0, ']');
                        LineEnd = LineEnd.substring(positionLineEnd).trim();
                        positionLineEnd = 0;
                        if (LineEnd.startsWith("[")) {
                            positionLineEnd = 1;
                        }
                    }
                    if (LineEnd.startsWith("=")) {
                        positionUnknownVariable = Line.indexOf(UnknownVariable);
                        if (positionUnknownVariable < 0) {//The variable may be inside a $_GET, $HTTP_GET_VARS, $_POST, $_HTTP_POST_VARS Superglobal Variables

                            positionUnknownVariable = Line.indexOf(UnknownVariable.substring(1));
                        }
                        positionNewUnknownVariable = Line.indexOf(NewUnknownVariable);
                        positionEqual = Line.indexOf("=");
                        if (positionEqual < positionUnknownVariable & positionEqual > positionNewUnknownVariable) {
                            ReturnVariable = NewUnknownVariable;
                        }
                    }
                }
            }
            return ReturnVariable;
        } catch (Throwable e) {
            System.out.println("Errors in VariableAssignmentInPHPString!");
            System.out.println("exception thrown:");
            e.printStackTrace();
            return null;
        }
    }

    //Tells if the Match of the regex defined by TargetText is inside a PHP string
    //It returns the string found or ""
    public String RegexTextInsidePHPString(String PHPFileTextClean, String Line, int StartLine, String TargetText) {
        Pattern p = null;
        Matcher existMatch = null;
        String SelectedTargetText = "";

        try {
            p = Pattern.compile(TargetText, Pattern.CASE_INSENSITIVE);
            existMatch = p.matcher(Line);
            while (existMatch.find()) {
                if (TextInsidePHPString(PHPFileTextClean, existMatch.start() + StartLine) >= 0) {
                    SelectedTargetText = Line.substring(existMatch.start(), existMatch.end());
                    break;
                }
            }
        } catch (Exception e) {
            System.err.println("WordInsidePHPString error");
            return "";
        }
        return SelectedTargetText;
    }

    public String FileMatchOriginalText(String FileText, int CharNumStart, int CharNumEnd) {
        String Result = "";

        Result = FileText.substring(FileMatchStartLine(FileText, CharNumStart), FileMatchEndLine(FileText, CharNumEnd));
        return Result;

    }

    // ReadFile
    public String ReadFile(File TargetFile) {
        String line = null;
        //Ze using the StringBuffer is much more quick than any other way!!!!!
        StringBuffer buf = new StringBuffer();
        try {
            // Open the file that is the first
            // command line parameter
            BufferedReader in = new BufferedReader(new FileReader(TargetFile));
            while ((line = in.readLine()) != null) {
                buf.append(line + LS);
            }

            in.close();
            return (buf.toString());
        } catch (Exception e) {
            System.err.println("File input error");
            return (null);
        }
    }
    //Static Analysis of the PHP File, obtaining data about the PHP Functions and PHP Variables

    public void AnalyzePHPFile(DatabaseAccess JavaDBAccess, String TargetPHPFileSelected) {
        if (!TargetPHPFileSelected.equalsIgnoreCase("null")) {
            //Obtain data about PHP Functions present in the PHP File
            ObtainPHPFileFunctions(JavaDBAccess, TargetPHPFileSelected);
            //Obtain the PHP Variables present in the PHP File
            ObtainPHPFileVariables(JavaDBAccess, TargetPHPFileSelected);
            //Analyze the PHP Variables present in the PHP File
            AnalyzeFileVariables(JavaDBAccess, TargetPHPFileSelected);
        }
    }
}
