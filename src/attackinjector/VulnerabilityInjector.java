/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package attackinjector;

import java.io.*;
import java.sql.*;
import java.util.regex.*;

/**
 *
 * @author ze
 */
public class VulnerabilityInjector {

    private String LS = System.getProperty("line.separator"); //line terminator of the current system

    public void AttackInjectorVulnerabilityInjector() {
    }

    public String VulnerabilityInjection(DatabaseAccess JavaDBAccess, PHPFileOperations PHPFile, String TargetPHPFileSelectedComboBox, Boolean AffectSQLStatic, Boolean AffectSQLDynamic) {
        String PHPFileText = null, PHPFileTextClean = ""; //The text of the PHP file where we want to inject the vulnerabilities

        String PHPFileTextArea = null;

        PreparedStatement ps = null;
        int TARGET_PHP_FILES_ID = 0;
        String Line = "";
        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Clean previous vulnerability injections in the same file
            System.out.println(TargetPHPFileSelectedComboBox);
            ps = conn.prepareStatement("DELETE FROM ATTACK_PAYLOADS WHERE VULNERABILITY_INJECTION_RESULT IN (SELECT VULNERABILITY_INJECTION_RESULTS.ID FROM VULNERABILITY_INJECTION_RESULTS, TARGET_PHP_FILES WHERE TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH=?)");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ps.execute();
            ps = conn.prepareStatement("DELETE FROM VULNERABILITY_INJECTION_RESULTS WHERE ID IN (SELECT VULNERABILITY_INJECTION_RESULTS.ID FROM VULNERABILITY_INJECTION_RESULTS, TARGET_PHP_FILES WHERE TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH=?)");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ps.execute();
            conn.commit();

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT,CLEANED_TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            System.out.println("Chave usada: " + TARGET_PHP_FILES_ID);
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileText = "";
            while (c > 0) {
            //            System.out.print((char) c);
            
            PHPFileText = PHPFileText + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            PHPFileTextClean = rs.getString("CLEANED_TEXT");

            rs.close();

            /*
            Creating a statement lets us issue commands against
            the connection.
             */
            Statement s = conn.createStatement();
            /*
            We select the rows and verify the results.
             */
            rs = s.executeQuery("SELECT * FROM ALL_OPERATORS");
            for (int i = 1; i < rs.getMetaData().getColumnCount() + 1; i++) {
                Line = Line + "   " + rs.getMetaData().getColumnName(i);
            }
            PHPFileTextArea = Line;
            while (rs.next()) {
                Line = "";
                for (int i = 1; i < rs.getMetaData().getColumnCount() + 1; i++) {
                    Line = Line + "   " + rs.getString(i);
                }
                PHPFileTextArea = PHPFileTextArea + LS + Line;
                System.out.println(Line);
                ProcessRegex(JavaDBAccess, PHPFile, rs.getString("SEARCH_TARGETS_REGEX"), false, PHPFileText, PHPFileTextClean, "", TARGET_PHP_FILES_ID, rs.getInt("SEARCH_TARGETS_ID"), conn, AffectSQLStatic, AffectSQLDynamic);
            }
            rs.close();
            s.close();
            conn.commit();
            conn.close();
        } catch (Throwable e) {
            System.out.println("Errors in VulnerabilityInjection!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        return PHPFileTextArea;
    }

    public void ProcessRegex(DatabaseAccess JavaDBAccess, PHPFileOperations PHPFile, String RegExpText, boolean CaseSensitiveOption, String PHPFileText, String PHPFileTextClean, String ProcessRegex, int Target_PHP_Files_ID, int Search_Target_ID, Connection conn, Boolean AffectSQLStatic, Boolean AffectSQLDynamic) {
        Matcher existMatch = null;
        Pattern p = null;
        int i = 0, StartTargetLine = 0, EndTargetLine = 0, EndLine = 0, StartTargetColumn = 0, EndTargetColumn = 0;
        int existMatchStart = 0, existMatchEnd = 0, StartCharTargetLine = 0, EndCharTargetLine = 0;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int pos = 0, count = 0, TARGET_PHP_FILES_VARIABLES_ID = 0;
        String AFFECT_SQL_STATIC = "Y", AFFECT_SQL_DYNAMIC = "Y";

        int l = PHPFileText.length(), StartSubjectText = 0, EndSubjectText = 0, StartVariableText = 0, EndVariableText = 0, HasParentisis = 0;
        char ch = ' ';
        String TargetFunction = "", TargetPHPFunctionArgument = "", TargetVariable = "", OriginalText = "", VulnerableText = "", RText = "", LText = "", Action = "", DiffText = "", Parent = "Main Body";

        Matcher existMatchPHPVariable = null;
        Pattern pPHPVariable = null;
        int existMatchStartPHPVariable = 0, existMatchEndPHPVariable = 0;
        String RegExpTextPHPVariable;

        int pos1 = 0, pos2 = 0, pos3 = 0;
        int VariableLocationInsideString = -1;

        try {

            if (CaseSensitiveOption) {
                p = Pattern.compile(RegExpText);
            } else {
                p = Pattern.compile(RegExpText, Pattern.CASE_INSENSITIVE);
            }

            existMatch = p.matcher(PHPFileTextClean);

            while (existMatch.find()) {
                existMatchStart = existMatch.start();
                existMatchEnd = existMatch.end();
//                System.out.println(SubjectString.getText(existMatch.start(), existMatch.end()-existMatch.start()));

                StartSubjectText = existMatchStart;
                EndSubjectText = existMatchEnd;
                //TargetFunction stores the function
                TargetFunction = PHPFileText.substring(StartSubjectText, EndSubjectText);

                //Now let's look for the target variable
                StartVariableText = existMatchEnd;
                EndVariableText = SubjectVariable(PHPFile, PHPFileTextClean, StartVariableText);
                HasParentisis = 0;
                if (PHPFileTextClean.charAt(StartVariableText) == '(') {
                    EndVariableText = PHPFile.SearchLevelChar(PHPFileTextClean, StartVariableText + 1, ')');
                    StartVariableText++;
                    HasParentisis = 1;
                }
                /*
                if (PHPFileTextClean.charAt(EndVariableText - 1) == ')') {
                EndVariableText--;
                HasParentisis = 1;
                }
                 */
                TargetPHPFunctionArgument = PHPFileText.substring(StartVariableText, EndVariableText);

                StartCharTargetLine = PHPFile.FileMatchStartLine(PHPFileTextClean, existMatchStart);
                EndCharTargetLine = PHPFile.FileMatchEndLine(PHPFileTextClean, existMatchEnd);

                // 1) The target variable may be in a multiline PHP command
                // 2) In a PHP file text line there may be several PHP lines
                VariableLocationInsideString = PHPFile.TextInsidePHPString(PHPFileTextClean, existMatchStart);
                if (VariableLocationInsideString >= 0) {
                    pos1 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, ';') + 1;
                    pos2 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, '{') + 1;
                    pos3 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, VariableLocationInsideString - 1, '}') + 1;
                } else {
                    pos1 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, existMatchStart, ';') + 1;
                    pos2 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, existMatchStart, '{') + 1;
                    pos3 = PHPFile.SearchLevelCharReverse(PHPFileTextClean, existMatchStart, '}') + 1;
                }
                if (pos1 >= pos2 & pos1 >= pos3) {
                    pos3 = pos1;
                } else if (pos2 >= pos1 & pos2 >= pos3) {
                    pos3 = pos2;
                }
                if (pos3 < 0) {
                    pos3 = 0;
                }
                pos3 = PHPFile.stringTrim(PHPFileTextClean, pos3);
                StartCharTargetLine = PHPFile.FileMatchStartLine(PHPFileTextClean, pos3);
                StartTargetLine = PHPFile.FileMatchLine(PHPFileTextClean, StartCharTargetLine);

                if (VariableLocationInsideString >= 0) {
                    VariableLocationInsideString = PHPFile.SearchEndString(PHPFileTextClean, existMatchStart, PHPFileTextClean.charAt(VariableLocationInsideString));
//                    VariableLocationInsideString = PHPFile.SearchEndString(PHPFileTextClean, VariableLocationInsideString, PHPFileTextClean.charAt(VariableLocationInsideString));
                    pos1 = PHPFile.SearchLevelChar(PHPFileTextClean, VariableLocationInsideString + 1, ';');
                    pos2 = PHPFile.SearchLevelChar(PHPFileTextClean, VariableLocationInsideString + 1, '{') - 1;
                } else {
                    pos1 = PHPFile.SearchLevelChar(PHPFileTextClean, existMatchEnd, ';');
                    pos2 = PHPFile.SearchLevelChar(PHPFileTextClean, existMatchEnd, '{') - 1;
                }

                if (pos1 >= 0 & ((pos1 < pos2 & pos2 >= 0) | (pos2 < 0))) {
                    pos2 = pos1;
                }
                if (pos2 < 0) {
                    pos2 = PHPFileTextClean.length() - 1;
                }
                EndCharTargetLine = PHPFile.FileMatchEndLine(PHPFileTextClean, pos2);
                EndTargetLine = PHPFile.FileMatchLine(PHPFileTextClean, EndCharTargetLine);

//                Line = PHPFileTextClean.substring(pos3, pos2);

                //if there are more than one argument in the target function only the first must be selected
                if (TargetPHPFunctionArgument.charAt(0) == '(') {
                    pos = -1;
                }
                pos = PHPFile.SearchLevelChar(TargetPHPFunctionArgument, 0, ',');
                if (pos != -1) {
                    TargetPHPFunctionArgument = TargetPHPFunctionArgument.substring(0, pos);
                }
                //PHP variable inside the TargetPHPFunctionArgument
                pos = TargetPHPFunctionArgument.indexOf("['");
                if (pos > 0) {
                    TargetVariable = TargetPHPFunctionArgument.substring(pos + 2);
                    pos = PHPFile.SearchLevelChar(TargetVariable, 0, '\'');
                    TargetVariable = "$" + TargetVariable.substring(0, pos);
                } else {
                    RegExpTextPHPVariable = "\\$[a-zA-Z_\\x7f-\\xff][a-zA-Z0-9_\\x7f-\\xff]*"; // using the regex to find all the PHP variables.
                    // The regex string was found at http://pt2.php.net/language.variables

                    pPHPVariable = Pattern.compile(RegExpTextPHPVariable);
                    existMatchPHPVariable = pPHPVariable.matcher(TargetPHPFunctionArgument);
                    while (existMatchPHPVariable.find()) {
                        existMatchStartPHPVariable = existMatchPHPVariable.start();
                        existMatchEndPHPVariable = existMatchPHPVariable.end();
                        TargetVariable = TargetPHPFunctionArgument.substring(existMatchStartPHPVariable, existMatchEndPHPVariable).trim();
                        break;
                    }
                }

                //Only the functions that affect variables that are present in SQL queries should be considered
                if (AffectSQLStatic) {
                    AFFECT_SQL_STATIC = "Y";
                } else {
                    AFFECT_SQL_STATIC = "N";
                }
                if (AffectSQLDynamic) {
                    AFFECT_SQL_DYNAMIC = "Y";
                } else {
                    AFFECT_SQL_DYNAMIC = "N";
                }
                ps = conn.prepareStatement("SELECT COUNT(*) FROM TARGET_PHP_FILES_VARIABLES WHERE AFFECT_SQL_STATIC=? AND AFFECT_SQL_DYNAMIC=? AND NAME=? AND TARGET_PHP_FILE=?");
                ps.setString(1, AFFECT_SQL_STATIC);
                ps.setString(2, AFFECT_SQL_DYNAMIC);
                ps.setString(3, TargetVariable);
                ps.setInt(4, Target_PHP_Files_ID);
                rs = ps.executeQuery();
                rs.next();
                count = rs.getInt(1);
                rs.close();
                ps.close();

                if (count > 0) {//if the target variable affects an SQL query

                    ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES_VARIABLES WHERE NAME=? AND TARGET_PHP_FILE=?");
                    ps.setString(1, TargetVariable);
                    ps.setInt(2, Target_PHP_Files_ID);
                    rs = ps.executeQuery();
                    rs.next();
                    TARGET_PHP_FILES_VARIABLES_ID = rs.getInt(1);
                    rs.close();
                    ps.close();

                    StartCharTargetLine = PHPFile.FileMatchStartLine(PHPFileText, existMatchStart);
                    StartTargetLine = PHPFile.FileMatchLine(PHPFileText, existMatchStart);
                    EndCharTargetLine = PHPFile.FileMatchEndLine(PHPFileText, EndVariableText + HasParentisis);
                    EndTargetLine = PHPFile.FileMatchLine(PHPFileText, EndVariableText + HasParentisis);

                    OriginalText = PHPFileText.substring(StartCharTargetLine, EndCharTargetLine);
                    VulnerableText = PHPFileText.substring(StartCharTargetLine, StartSubjectText) + TargetPHPFunctionArgument + PHPFileText.substring(EndVariableText + HasParentisis, EndCharTargetLine);
                    TargetFunction = PHPFileText.substring(StartSubjectText, EndVariableText + HasParentisis);

                    /*
                    StartTargetLine = PHPFile.FileMatchLine(PHPFileText, existMatchStart);
                    EndTargetLine = PHPFile.FileMatchLine(PHPFileText, existMatchEnd);
                     */
                    StartTargetColumn = FileMatchColumn(PHPFileText, existMatchStart);
                    EndTargetColumn = FileMatchColumn(PHPFileText, existMatchEnd);

                    //If the Vulnerable line is something like: abc = abc;
                    //then it will be removed in orther to cope with what was seen in the field
                    LText = PHPFileText.substring(StartCharTargetLine, StartSubjectText).trim();
                    RText = (TargetPHPFunctionArgument + PHPFileText.substring(EndVariableText + HasParentisis, EndCharTargetLine - 1)).trim();
                    Action = "Remove Function";
                    if (LText.length() > 0) {
                        if (LText.charAt(LText.length() - 1) == '=') {
                            LText = LText.substring(0, LText.length() - 1);
                            if (LText.equalsIgnoreCase(RText)) {
                                Action = "Remove Line";
                            }
                        }
                    }

                    DiffText = "No Diff Text Yet";
                    if (Action.equalsIgnoreCase("Remove Line")) {
                        if (StartTargetLine == EndTargetLine) {
                            DiffText = StartTargetLine + "d" + (StartTargetLine - 1) + LS + "< " + OriginalText + LS;
                        } else {
                            DiffText = StartTargetLine + "," + EndTargetLine + "d" + (StartTargetLine - 1) + LS + "< " + OriginalText + LS;
                        }
                    } else if (Action.equalsIgnoreCase("Remove Function")) {
                        if (StartTargetLine == EndTargetLine) {
                            DiffText = StartTargetLine + "c" + StartTargetLine + LS + "< " + OriginalText + LS + "---" + LS + "> " + VulnerableText + LS;
                        } else {
                            DiffText = StartTargetLine + "," + EndTargetLine + "c" + StartTargetLine + "," + EndTargetLine + LS + "< " + OriginalText + LS + "---" + LS + "> " + VulnerableText + LS;
                        }
                    }

                    // Start a transaction by inserting a record in the TARGET_PHP_FILES table
                    ps = conn.prepareStatement("INSERT INTO VULNERABILITY_INJECTION_RESULTS (ID,TARGET_PHP_FILE,SEARCH_TARGET,TARGET_PHP_FILES_VARIABLE,START_CHAR,END_CHAR,START_CHAR_OF_TARGET_LINE,END_CHAR_OF_TARGET_LINE,START_TARGET_LINE,END_TARGET_LINE,START_OF_TARGET_COLUMN,END_OF_TARGET_COLUMN,ORIGINAL_TEXT,VULNERABLE_TEXT,DIFF_TEXT,TARGET_FUNCTION,TARGET_FUNCTION_ARGUMENT,TARGET_PHP_VARIABLE,ACTION,PARENT,ACTIVE) VALUES(DEFAULT,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,?,'Y')");
                    ps.setInt(1, Target_PHP_Files_ID);
                    ps.setInt(2, Search_Target_ID);
                    ps.setInt(3, TARGET_PHP_FILES_VARIABLES_ID);
                    ps.setInt(4, existMatchStart);
                    ps.setInt(5, existMatchEnd);
                    ps.setInt(6, StartCharTargetLine);//Start Char of Target Line

                    ps.setInt(7, EndCharTargetLine);//End Char of Target Line

                    ps.setInt(8, StartTargetLine);//Start File Line

                    ps.setInt(9, EndTargetLine);//Start File Line

                    ps.setInt(10, StartTargetColumn);//Start Column

                    ps.setInt(11, EndTargetColumn);//End Column

                    ps.setString(12, OriginalText);//Original Text

                    ps.setString(13, VulnerableText);//Vulnerable Text

                    ps.setString(14, DiffText);//Diff Text

                    ps.setString(15, TargetFunction);//Target Function

                    ps.setString(16, TargetPHPFunctionArgument);//Target Function Argument

                    ps.setString(17, TargetVariable);//PHP Variable

                    ps.setString(18, Action);//Action

                    ps.setString(19, Parent);//Parent (where  the code is located: inside a function or main body)

                    ps.execute();
                    i++;
                }
            }
        } catch (Throwable e) {
            System.out.println("ProcessRegex exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        if (existMatch != null) {
            existMatch.reset();
        }
//        return existMatch;
    }

    public int SubjectVariable(PHPFileOperations PHPFile, String PHPFileTextClean, int CharNumStart) {
        int i = 0, l = PHPFileTextClean.length();
        char ch = ' ';

        i = CharNumStart;
        //recursively detect what follows the function name
        while (i < l) {
            ch = PHPFileTextClean.charAt(i);
            if (ch == '(') {
                i = PHPFile.SearchEndChar(PHPFileTextClean, i + 1, ')');
            } else if (ch == '{') {
                i = PHPFile.SearchEndChar(PHPFileTextClean, i + 1, '}');
            } else if (ch == '\"') {
                i = PHPFileTextClean.indexOf('\"', i);
//                i = SearchEndChar(PHPFileTextClean, i + 1, '\"');
            } else if (ch == '\'') {
                i = PHPFileTextClean.indexOf('\'', i);
//                i = SearchEndChar(PHPFileTextClean, i + 1, '\'');
            } else if (ch == '/' & PHPFileTextClean.charAt(i + 1) == '/') {
                i = PHPFileTextClean.indexOf('\n', i);
            } else if (ch == ',' | ch == ';' | ch == '.' | ch == ' ' | ch == ')') {
                break;
            }
            i++;
        }
        return i;
    }

    public int FileMatchColumn(String FileText, int CharNum) {
        int i = 0, j = 0, count = 0;
        while (i < CharNum) {
            i = FileText.indexOf(LS, i + 1);
            if (i == -1) {
                break;
            }
            if (i < CharNum) {
                j = i;
            }
            count++;
        }
        return CharNum - j + LS.length() - 1;
    }

    public String CreateDiffFiles(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {
        String PHPFileTextArea = null;
        Connection conn = null;
        PreparedStatement ps = null;
        String diffFile = "";
        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT VULNERABILITY_INJECTION_RESULTS.DIFF_TEXT FROM TARGET_PHP_FILES,VULNERABILITY_INJECTION_RESULTS WHERE VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND TARGET_PHP_FILES.PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            PrintWriter WebPageFileWriter = null;
            while (rs.next()) {
                diffFile = rs.getString(1);

                // Open matches log file.
                try {
                    WebPageFileWriter = new PrintWriter(new FileWriter(TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".diff"));
                } catch (Exception e) {
                    System.out.println("Unable to open matches Web Page log file.");
                }
                // Add URL to matches log file.
                try {
                    WebPageFileWriter.print(diffFile);
                } catch (Exception e) {
                    System.out.println("Unable to Web page log match.");
                }
                // Close matches log file.
                try {
                    WebPageFileWriter.close();
                } catch (Exception e) {
                    System.out.println("Unable to close matches web page log file.");
                }
            }
            rs.close();
            conn.commit();
            conn.close();
            PHPFileTextArea = "To apply the diff files to the original file in order to obtain a vulnerable file do the follwing:\n";
            PHPFileTextArea = PHPFileTextArea + "patch edit_authors_original.php --binary -p0 -o edit_authors_vulnerable.php < edit_authors.php_1.diff";

        } catch (Throwable e) {
            System.out.println("Errors in CreateDiffFiles!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
        return PHPFileTextArea;
    }

    public void DeleteDiffFiles(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {
        int TARGET_PHP_FILES_ID = 0;
        PreparedStatement ps = null;
        Connection conn = null;


        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);

            rs.close();

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID FROM VULNERABILITY_INJECTION_RESULTS WHERE TARGET_PHP_FILE = ?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            rs = ps.executeQuery();

            while (rs.next()) {
                // Open matches log file.
                try {

                    boolean success = (new File(TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".diff")).delete();
                    if (!success) {
                        System.out.println("Expected file " + TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".diff" + " does not exist!");
                    }

                } catch (Exception e) {
                    System.out.println("Unable to open matches Web Page log file.");
                }
            }
            rs.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in DeleteDiffFiles!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public void CreateVulnerabilityFiles(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {
        int TARGET_PHP_FILES_ID = 0;
        PreparedStatement ps = null;
        String diffFile = "";
        String PHPFileText; //The text of the PHP file where we want to inject the vulnerabilities

        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID,TEXT FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            System.out.println("Chave usada: " + TARGET_PHP_FILES_ID);
            /*
            java.io.InputStream ip = rs.getAsciiStream(2);
            int c = ip.read();
            PHPFileText = "";
            while (c > 0) {
            //            System.out.print((char) c);
            
            PHPFileText = PHPFileText + (char) c;
            c = ip.read();
            }
             */
            PHPFileText = rs.getString("TEXT");
            rs.close();

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT START_CHAR_OF_TARGET_LINE, END_CHAR_OF_TARGET_LINE, VULNERABLE_TEXT, ACTION FROM VULNERABILITY_INJECTION_RESULTS WHERE TARGET_PHP_FILE = ?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            rs = ps.executeQuery();

            PrintWriter WebPageFileWriter = null;
            while (rs.next()) {
                if (rs.getString(4).equalsIgnoreCase("Remove Line")) {
                    diffFile = PHPFileText.substring(0, rs.getInt(1)) + PHPFileText.substring(rs.getInt(2) + LS.length(), PHPFileText.length());
                } else if (rs.getString(4).equalsIgnoreCase("Remove Function")) {
                    diffFile = PHPFileText.substring(0, rs.getInt(1)) + rs.getString(3) + PHPFileText.substring(rs.getInt(2), PHPFileText.length());
                }

                // Open matches log file.
                try {
                    WebPageFileWriter = new PrintWriter(new FileWriter(TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".php"));
                } catch (Exception e) {
                    System.out.println("Unable to open matches Web Page log file.");
                }
                // Add URL to matches log file.
                try {
                    WebPageFileWriter.print(diffFile);
                } catch (Exception e) {
                    System.out.println("Unable to Web page log match.");
                }
                WebPageFileWriter.flush();
                // Close matches log file.
                try {
                    WebPageFileWriter.close();
                } catch (Exception e) {
                    System.out.println("Unable to close matches web page log file.");
                }
            }
            rs.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in CreateVulnerabilityFiles!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public void RestoreOriginalPHPFile(DatabaseAccess JavaDBAccess, int TARGET_PHP_FILES_ID) {
        PreparedStatement ps = null;
        String PHPFileText; //The text of the PHP file where we want to inject the vulnerabilities

        String PATH = "";
        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT TEXT,PATH FROM TARGET_PHP_FILES WHERE ID = ?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            ResultSet rs = ps.executeQuery();

            rs.next();
            PHPFileText = rs.getString("TEXT");
            PATH = rs.getString("PATH");
            rs.close();
            conn.commit();
            conn.close();


            PrintWriter WebPageFileWriter = null;
            // Open matches log file.
            try {
                WebPageFileWriter = new PrintWriter(new FileWriter(PATH));
            } catch (Exception e) {
                System.out.println("Unable to open matches Web Page log file.");
            }
            // Add URL to matches log file.
            try {
                WebPageFileWriter.print(PHPFileText);
            } catch (Exception e) {
                System.out.println("Unable to Web page log match.");
            }
            WebPageFileWriter.flush();
            // Close matches log file.
            try {
                WebPageFileWriter.close();
            } catch (Exception e) {
                System.out.println("Unable to close matches web page log file.");
            }

        } catch (Throwable e) {
            System.out.println("Errors in RestorePHPFile!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public void ApplyVulnerablePHPFile(DatabaseAccess JavaDBAccess, int VULNERABILITY_INJECTION_RESULTS_ID) {
        PreparedStatement ps = null;
        String diffFile = "";
        String PHPFileText; //The text of the PHP file where we want to inject the vulnerabilities

        Connection conn = null;
        String PATH = "";

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT TEXT,PATH,START_CHAR_OF_TARGET_LINE, END_CHAR_OF_TARGET_LINE, VULNERABLE_TEXT, ACTION FROM TARGET_PHP_FILES,VULNERABILITY_INJECTION_RESULTS WHERE VULNERABILITY_INJECTION_RESULTS.TARGET_PHP_FILE=TARGET_PHP_FILES.ID AND VULNERABILITY_INJECTION_RESULTS.ID = ?");
            ps.setInt(1, VULNERABILITY_INJECTION_RESULTS_ID);
            ResultSet rs = ps.executeQuery();

            rs.next();
            PHPFileText = rs.getString("TEXT");
            PATH = rs.getString("PATH");
            if (rs.getString("ACTION").equalsIgnoreCase("Remove Line")) {
                diffFile = PHPFileText.substring(0, rs.getInt("START_CHAR_OF_TARGET_LINE")) + PHPFileText.substring(rs.getInt("END_CHAR_OF_TARGET_LINE") + LS.length(), PHPFileText.length());
            } else if (rs.getString("ACTION").equalsIgnoreCase("Remove Function")) {
                diffFile = PHPFileText.substring(0, rs.getInt("START_CHAR_OF_TARGET_LINE")) + rs.getString("VULNERABLE_TEXT") + PHPFileText.substring(rs.getInt("END_CHAR_OF_TARGET_LINE"), PHPFileText.length());
            }

            PrintWriter WebPageFileWriter = null;
            // Open matches log file.
            try {
                WebPageFileWriter = new PrintWriter(new FileWriter(PATH));
            } catch (Exception e) {
                System.out.println("Unable to open matches Web Page log file.");
            }
            // Add URL to matches log file.
            try {
                WebPageFileWriter.print(diffFile);
            } catch (Exception e) {
                System.out.println("Unable to Web page log match.");
            }
            WebPageFileWriter.flush();
            // Close matches log file.
            try {
                WebPageFileWriter.close();
            } catch (Exception e) {
                System.out.println("Unable to close matches web page log file.");
            }
            rs.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in ApplyVulnerableFile!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }
    }

    public void DeleteVulnerabilityFiles(DatabaseAccess JavaDBAccess, String TargetPHPFileSelectedComboBox) {

        int TARGET_PHP_FILES_ID = 0;
        PreparedStatement ps = null;
        Connection conn = null;

        try {
            if ((conn = JavaDBAccess.setConn()) != null) {
                System.out.println("Connected to database " + JavaDBAccess.getDatabaseName());
            } else {
                throw new Exception("Not connected to database " + JavaDBAccess.getDatabaseName());
            }

            conn.setAutoCommit(false);

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID FROM TARGET_PHP_FILES WHERE PATH = ?");
            ps.setString(1, TargetPHPFileSelectedComboBox);
            ResultSet rs = ps.executeQuery();

            rs.next();
            TARGET_PHP_FILES_ID = rs.getInt(1);
            rs.close();

            // Start a transaction by inserting a record in the TARGET_PHP_FILES table
            ps = conn.prepareStatement("SELECT ID FROM RESULTS WHERE TARGET_PHP_FILE = ?");
            ps.setInt(1, TARGET_PHP_FILES_ID);
            rs = ps.executeQuery();

            while (rs.next()) {
                // Open matches log file.
                try {

                    boolean success = (new File(TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".php")).delete();
                    if (!success) {
                        System.out.println("Expected file " + TargetPHPFileSelectedComboBox + "_" + rs.getRow() + ".php" + " does not exist!");
                    }

                } catch (Exception e) {
                    System.out.println("Unable to open matches Web Page log file.");
                }
            }
            rs.close();
            conn.commit();
            conn.close();

        } catch (Throwable e) {
            System.out.println("Errors in DeleteVulnerabilityFiles!");
            System.out.println("exception thrown:");

            if (e instanceof SQLException) {
                JavaDBAccess.printSQLError((SQLException) e);
            } else {
                e.printStackTrace();
            }
        }

    }
}
